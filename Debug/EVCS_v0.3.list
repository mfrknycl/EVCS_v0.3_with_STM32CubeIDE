
EVCS_v0.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001048  080082b8  080082b8  000182b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009300  08009300  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009300  08009300  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009300  08009300  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009304  08009304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  200001e4  080094ec  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  080094ec  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001007c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023dc  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  00033658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b11  00000000  00000000  00034508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cd4d  00000000  00000000  00037019  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000511e1  00000000  00000000  00043d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00094f47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004170  00000000  00000000  00094fc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800829c 	.word	0x0800829c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800829c 	.word	0x0800829c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fef1 	bl	8001210 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe49 	bl	80010d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fee3 	bl	8001210 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fed9 	bl	8001210 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe6b 	bl	8001148 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe61 	bl	8001148 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000c      	movs	r4, r1
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	0f47      	lsrs	r7, r0, #29
 80004a6:	005e      	lsls	r6, r3, #1
 80004a8:	4339      	orrs	r1, r7
 80004aa:	031f      	lsls	r7, r3, #12
 80004ac:	0fdb      	lsrs	r3, r3, #31
 80004ae:	469c      	mov	ip, r3
 80004b0:	0065      	lsls	r5, r4, #1
 80004b2:	0a7b      	lsrs	r3, r7, #9
 80004b4:	0f57      	lsrs	r7, r2, #29
 80004b6:	431f      	orrs	r7, r3
 80004b8:	0d6d      	lsrs	r5, r5, #21
 80004ba:	0fe4      	lsrs	r4, r4, #31
 80004bc:	0d76      	lsrs	r6, r6, #21
 80004be:	46a1      	mov	r9, r4
 80004c0:	00c0      	lsls	r0, r0, #3
 80004c2:	46b8      	mov	r8, r7
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	1bab      	subs	r3, r5, r6
 80004c8:	4564      	cmp	r4, ip
 80004ca:	d07b      	beq.n	80005c4 <__aeabi_dadd+0x130>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd5f      	ble.n	8000590 <__aeabi_dadd+0xfc>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x42>
 80004d4:	e0a4      	b.n	8000620 <__aeabi_dadd+0x18c>
 80004d6:	003e      	movs	r6, r7
 80004d8:	4316      	orrs	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e112      	b.n	8000704 <__aeabi_dadd+0x270>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e19e      	b.n	8000824 <__aeabi_dadd+0x390>
 80004e6:	1a87      	subs	r7, r0, r2
 80004e8:	4643      	mov	r3, r8
 80004ea:	42b8      	cmp	r0, r7
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	2501      	movs	r5, #1
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	4240      	negs	r0, r0
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	020b      	lsls	r3, r1, #8
 80004f8:	d400      	bmi.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e131      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	0a4e      	lsrs	r6, r1, #9
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e16e      	b.n	80007e4 <__aeabi_dadd+0x350>
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fd62 	bl	8001fd0 <__clzsi2>
 800050c:	0003      	movs	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	2b1f      	cmp	r3, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x82>
 8000514:	e161      	b.n	80007da <__aeabi_dadd+0x346>
 8000516:	2220      	movs	r2, #32
 8000518:	0039      	movs	r1, r7
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	409e      	lsls	r6, r3
 800051e:	40d1      	lsrs	r1, r2
 8000520:	409f      	lsls	r7, r3
 8000522:	430e      	orrs	r6, r1
 8000524:	429d      	cmp	r5, r3
 8000526:	dd00      	ble.n	800052a <__aeabi_dadd+0x96>
 8000528:	e151      	b.n	80007ce <__aeabi_dadd+0x33a>
 800052a:	1b5d      	subs	r5, r3, r5
 800052c:	1c6b      	adds	r3, r5, #1
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0xa0>
 8000532:	e17c      	b.n	800082e <__aeabi_dadd+0x39a>
 8000534:	2120      	movs	r1, #32
 8000536:	1ac9      	subs	r1, r1, r3
 8000538:	003d      	movs	r5, r7
 800053a:	0030      	movs	r0, r6
 800053c:	408f      	lsls	r7, r1
 800053e:	4088      	lsls	r0, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	1e79      	subs	r1, r7, #1
 8000544:	418f      	sbcs	r7, r1
 8000546:	0031      	movs	r1, r6
 8000548:	2207      	movs	r2, #7
 800054a:	4328      	orrs	r0, r5
 800054c:	40d9      	lsrs	r1, r3
 800054e:	2500      	movs	r5, #0
 8000550:	4307      	orrs	r7, r0
 8000552:	403a      	ands	r2, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	d009      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000558:	230f      	movs	r3, #15
 800055a:	403b      	ands	r3, r7
 800055c:	2b04      	cmp	r3, #4
 800055e:	d005      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	42bb      	cmp	r3, r7
 8000564:	41bf      	sbcs	r7, r7
 8000566:	427f      	negs	r7, r7
 8000568:	19c9      	adds	r1, r1, r7
 800056a:	001f      	movs	r7, r3
 800056c:	020b      	lsls	r3, r1, #8
 800056e:	d400      	bmi.n	8000572 <__aeabi_dadd+0xde>
 8000570:	e226      	b.n	80009c0 <__aeabi_dadd+0x52c>
 8000572:	1c6a      	adds	r2, r5, #1
 8000574:	4bc6      	ldr	r3, [pc, #792]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000576:	0555      	lsls	r5, r2, #21
 8000578:	0d6d      	lsrs	r5, r5, #21
 800057a:	429a      	cmp	r2, r3
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0xec>
 800057e:	e106      	b.n	800078e <__aeabi_dadd+0x2fa>
 8000580:	4ac4      	ldr	r2, [pc, #784]	; (8000894 <__aeabi_dadd+0x400>)
 8000582:	08ff      	lsrs	r7, r7, #3
 8000584:	400a      	ands	r2, r1
 8000586:	0753      	lsls	r3, r2, #29
 8000588:	0252      	lsls	r2, r2, #9
 800058a:	433b      	orrs	r3, r7
 800058c:	0b12      	lsrs	r2, r2, #12
 800058e:	e08e      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x102>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x274>
 8000596:	1c6b      	adds	r3, r5, #1
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	0d5b      	lsrs	r3, r3, #21
 800059c:	2b01      	cmp	r3, #1
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dadd+0x10e>
 80005a0:	e130      	b.n	8000804 <__aeabi_dadd+0x370>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	41b6      	sbcs	r6, r6
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	4276      	negs	r6, r6
 80005ae:	1b9e      	subs	r6, r3, r6
 80005b0:	0233      	lsls	r3, r6, #8
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_dadd+0x122>
 80005b4:	e14c      	b.n	8000850 <__aeabi_dadd+0x3bc>
 80005b6:	003b      	movs	r3, r7
 80005b8:	4333      	orrs	r3, r6
 80005ba:	d1a1      	bne.n	8000500 <__aeabi_dadd+0x6c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	e070      	b.n	80006a6 <__aeabi_dadd+0x212>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x136>
 80005c8:	e0e5      	b.n	8000796 <__aeabi_dadd+0x302>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x13c>
 80005ce:	e083      	b.n	80006d8 <__aeabi_dadd+0x244>
 80005d0:	4eaf      	ldr	r6, [pc, #700]	; (8000890 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d060      	beq.n	8000698 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dc00      	bgt.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e13e      	b.n	8000862 <__aeabi_dadd+0x3ce>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	001f      	movs	r7, r3
 80005ea:	1e7a      	subs	r2, r7, #1
 80005ec:	4197      	sbcs	r7, r2
 80005ee:	183f      	adds	r7, r7, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	4180      	sbcs	r0, r0
 80005f4:	4240      	negs	r0, r0
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	020b      	lsls	r3, r1, #8
 80005fa:	d400      	bmi.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e0b0      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000600:	3501      	adds	r5, #1
 8000602:	429d      	cmp	r5, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x174>
 8000606:	e0c3      	b.n	8000790 <__aeabi_dadd+0x2fc>
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <__aeabi_dadd+0x400>)
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	400a      	ands	r2, r1
 800060e:	2101      	movs	r1, #1
 8000610:	400f      	ands	r7, r1
 8000612:	431f      	orrs	r7, r3
 8000614:	0851      	lsrs	r1, r2, #1
 8000616:	07d3      	lsls	r3, r2, #31
 8000618:	2207      	movs	r2, #7
 800061a:	431f      	orrs	r7, r3
 800061c:	403a      	ands	r2, r7
 800061e:	e799      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000620:	4e9b      	ldr	r6, [pc, #620]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d038      	beq.n	8000698 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_dadd+0x1a0>
 8000632:	e0dc      	b.n	80007ee <__aeabi_dadd+0x35a>
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x1a6>
 8000638:	e130      	b.n	800089c <__aeabi_dadd+0x408>
 800063a:	001e      	movs	r6, r3
 800063c:	4647      	mov	r7, r8
 800063e:	3e20      	subs	r6, #32
 8000640:	40f7      	lsrs	r7, r6
 8000642:	46bc      	mov	ip, r7
 8000644:	2b20      	cmp	r3, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_dadd+0x1be>
 8000648:	2640      	movs	r6, #64	; 0x40
 800064a:	1af3      	subs	r3, r6, r3
 800064c:	4646      	mov	r6, r8
 800064e:	409e      	lsls	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0017      	movs	r7, r2
 8000654:	4663      	mov	r3, ip
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	431f      	orrs	r7, r3
 800065c:	e0cc      	b.n	80007f8 <__aeabi_dadd+0x364>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1d0>
 8000662:	e204      	b.n	8000a6e <__aeabi_dadd+0x5da>
 8000664:	4643      	mov	r3, r8
 8000666:	4313      	orrs	r3, r2
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1d8>
 800066a:	e159      	b.n	8000920 <__aeabi_dadd+0x48c>
 800066c:	074b      	lsls	r3, r1, #29
 800066e:	08c0      	lsrs	r0, r0, #3
 8000670:	4318      	orrs	r0, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	08c9      	lsrs	r1, r1, #3
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4219      	tst	r1, r3
 800067a:	d008      	beq.n	800068e <__aeabi_dadd+0x1fa>
 800067c:	4645      	mov	r5, r8
 800067e:	08ed      	lsrs	r5, r5, #3
 8000680:	421d      	tst	r5, r3
 8000682:	d104      	bne.n	800068e <__aeabi_dadd+0x1fa>
 8000684:	4643      	mov	r3, r8
 8000686:	08d0      	lsrs	r0, r2, #3
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	4308      	orrs	r0, r1
 800068c:	0029      	movs	r1, r5
 800068e:	0f42      	lsrs	r2, r0, #29
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	4d7f      	ldr	r5, [pc, #508]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000694:	4311      	orrs	r1, r2
 8000696:	00c0      	lsls	r0, r0, #3
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08ca      	lsrs	r2, r1, #3
 800069c:	497c      	ldr	r1, [pc, #496]	; (8000890 <__aeabi_dadd+0x3fc>)
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	428d      	cmp	r5, r1
 80006a4:	d068      	beq.n	8000778 <__aeabi_dadd+0x2e4>
 80006a6:	0312      	lsls	r2, r2, #12
 80006a8:	056d      	lsls	r5, r5, #21
 80006aa:	0b12      	lsrs	r2, r2, #12
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	2100      	movs	r1, #0
 80006b0:	0312      	lsls	r2, r2, #12
 80006b2:	0018      	movs	r0, r3
 80006b4:	0b13      	lsrs	r3, r2, #12
 80006b6:	0d0a      	lsrs	r2, r1, #20
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	431a      	orrs	r2, r3
 80006bc:	4b76      	ldr	r3, [pc, #472]	; (8000898 <__aeabi_dadd+0x404>)
 80006be:	052d      	lsls	r5, r5, #20
 80006c0:	4013      	ands	r3, r2
 80006c2:	432b      	orrs	r3, r5
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	07e4      	lsls	r4, r4, #31
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	4323      	orrs	r3, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	bc1c      	pop	{r2, r3, r4}
 80006d0:	4690      	mov	r8, r2
 80006d2:	4699      	mov	r9, r3
 80006d4:	46a2      	mov	sl, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	003e      	movs	r6, r7
 80006da:	4316      	orrs	r6, r2
 80006dc:	d012      	beq.n	8000704 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x252>
 80006e4:	e100      	b.n	80008e8 <__aeabi_dadd+0x454>
 80006e6:	1887      	adds	r7, r0, r2
 80006e8:	4287      	cmp	r7, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4441      	add	r1, r8
 80006ee:	4240      	negs	r0, r0
 80006f0:	1809      	adds	r1, r1, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	020b      	lsls	r3, r1, #8
 80006f6:	d533      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006f8:	2502      	movs	r5, #2
 80006fa:	e785      	b.n	8000608 <__aeabi_dadd+0x174>
 80006fc:	4664      	mov	r4, ip
 80006fe:	0033      	movs	r3, r6
 8000700:	4641      	mov	r1, r8
 8000702:	0010      	movs	r0, r2
 8000704:	001d      	movs	r5, r3
 8000706:	e7c7      	b.n	8000698 <__aeabi_dadd+0x204>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e0da      	b.n	80008c4 <__aeabi_dadd+0x430>
 800070e:	000c      	movs	r4, r1
 8000710:	4304      	orrs	r4, r0
 8000712:	d0f3      	beq.n	80006fc <__aeabi_dadd+0x268>
 8000714:	1c5c      	adds	r4, r3, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x286>
 8000718:	e19f      	b.n	8000a5a <__aeabi_dadd+0x5c6>
 800071a:	4c5d      	ldr	r4, [pc, #372]	; (8000890 <__aeabi_dadd+0x3fc>)
 800071c:	42a6      	cmp	r6, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x28e>
 8000720:	e12f      	b.n	8000982 <__aeabi_dadd+0x4ee>
 8000722:	43db      	mvns	r3, r3
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x296>
 8000728:	e166      	b.n	80009f8 <__aeabi_dadd+0x564>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x29c>
 800072e:	e183      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000730:	2420      	movs	r4, #32
 8000732:	0005      	movs	r5, r0
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	000f      	movs	r7, r1
 8000738:	40dd      	lsrs	r5, r3
 800073a:	40d9      	lsrs	r1, r3
 800073c:	40a0      	lsls	r0, r4
 800073e:	4643      	mov	r3, r8
 8000740:	40a7      	lsls	r7, r4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	1e44      	subs	r4, r0, #1
 8000746:	41a0      	sbcs	r0, r4
 8000748:	4698      	mov	r8, r3
 800074a:	432f      	orrs	r7, r5
 800074c:	4338      	orrs	r0, r7
 800074e:	1a17      	subs	r7, r2, r0
 8000750:	42ba      	cmp	r2, r7
 8000752:	4192      	sbcs	r2, r2
 8000754:	4643      	mov	r3, r8
 8000756:	4252      	negs	r2, r2
 8000758:	1a99      	subs	r1, r3, r2
 800075a:	4664      	mov	r4, ip
 800075c:	0035      	movs	r5, r6
 800075e:	e6ca      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000760:	2207      	movs	r2, #7
 8000762:	403a      	ands	r2, r7
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e6f6      	b.n	8000558 <__aeabi_dadd+0xc4>
 800076a:	074b      	lsls	r3, r1, #29
 800076c:	08ca      	lsrs	r2, r1, #3
 800076e:	4948      	ldr	r1, [pc, #288]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000770:	08ff      	lsrs	r7, r7, #3
 8000772:	433b      	orrs	r3, r7
 8000774:	428d      	cmp	r5, r1
 8000776:	d196      	bne.n	80006a6 <__aeabi_dadd+0x212>
 8000778:	0019      	movs	r1, r3
 800077a:	4311      	orrs	r1, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x2ec>
 800077e:	e19e      	b.n	8000abe <__aeabi_dadd+0x62a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0309      	lsls	r1, r1, #12
 8000784:	430a      	orrs	r2, r1
 8000786:	0312      	lsls	r2, r2, #12
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	4d41      	ldr	r5, [pc, #260]	; (8000890 <__aeabi_dadd+0x3fc>)
 800078c:	e78f      	b.n	80006ae <__aeabi_dadd+0x21a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e78b      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x308>
 800079a:	e0c7      	b.n	800092c <__aeabi_dadd+0x498>
 800079c:	1c6b      	adds	r3, r5, #1
 800079e:	055f      	lsls	r7, r3, #21
 80007a0:	0d7f      	lsrs	r7, r7, #21
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x314>
 80007a6:	e0f1      	b.n	800098c <__aeabi_dadd+0x4f8>
 80007a8:	4d39      	ldr	r5, [pc, #228]	; (8000890 <__aeabi_dadd+0x3fc>)
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x31c>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dadd+0x490>
 80007b0:	1885      	adds	r5, r0, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4285      	cmp	r5, r0
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4442      	add	r2, r8
 80007ba:	4249      	negs	r1, r1
 80007bc:	1851      	adds	r1, r2, r1
 80007be:	2207      	movs	r2, #7
 80007c0:	07cf      	lsls	r7, r1, #31
 80007c2:	086d      	lsrs	r5, r5, #1
 80007c4:	432f      	orrs	r7, r5
 80007c6:	0849      	lsrs	r1, r1, #1
 80007c8:	403a      	ands	r2, r7
 80007ca:	001d      	movs	r5, r3
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	2207      	movs	r2, #7
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <__aeabi_dadd+0x400>)
 80007d2:	1aed      	subs	r5, r5, r3
 80007d4:	4031      	ands	r1, r6
 80007d6:	403a      	ands	r2, r7
 80007d8:	e6bc      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007da:	003e      	movs	r6, r7
 80007dc:	3828      	subs	r0, #40	; 0x28
 80007de:	4086      	lsls	r6, r0
 80007e0:	2700      	movs	r7, #0
 80007e2:	e69f      	b.n	8000524 <__aeabi_dadd+0x90>
 80007e4:	0038      	movs	r0, r7
 80007e6:	f001 fbf3 	bl	8001fd0 <__clzsi2>
 80007ea:	3020      	adds	r0, #32
 80007ec:	e68e      	b.n	800050c <__aeabi_dadd+0x78>
 80007ee:	4643      	mov	r3, r8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	001f      	movs	r7, r3
 80007f4:	1e7a      	subs	r2, r7, #1
 80007f6:	4197      	sbcs	r7, r2
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	4240      	negs	r0, r0
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	e678      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000804:	000e      	movs	r6, r1
 8000806:	003b      	movs	r3, r7
 8000808:	4306      	orrs	r6, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d161      	bne.n	80008d4 <__aeabi_dadd+0x440>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x382>
 8000814:	e0f4      	b.n	8000a00 <__aeabi_dadd+0x56c>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x388>
 800081a:	e11b      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 800081c:	4664      	mov	r4, ip
 800081e:	0039      	movs	r1, r7
 8000820:	0010      	movs	r0, r2
 8000822:	e739      	b.n	8000698 <__aeabi_dadd+0x204>
 8000824:	4f1a      	ldr	r7, [pc, #104]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000826:	42bb      	cmp	r3, r7
 8000828:	d07a      	beq.n	8000920 <__aeabi_dadd+0x48c>
 800082a:	0033      	movs	r3, r6
 800082c:	e6ff      	b.n	800062e <__aeabi_dadd+0x19a>
 800082e:	0030      	movs	r0, r6
 8000830:	3d1f      	subs	r5, #31
 8000832:	40e8      	lsrs	r0, r5
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x3ac>
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	409e      	lsls	r6, r3
 800083e:	4337      	orrs	r7, r6
 8000840:	1e7b      	subs	r3, r7, #1
 8000842:	419f      	sbcs	r7, r3
 8000844:	2207      	movs	r2, #7
 8000846:	4307      	orrs	r7, r0
 8000848:	403a      	ands	r2, r7
 800084a:	2100      	movs	r1, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e789      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000850:	1a17      	subs	r7, r2, r0
 8000852:	4643      	mov	r3, r8
 8000854:	42ba      	cmp	r2, r7
 8000856:	41b6      	sbcs	r6, r6
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	4276      	negs	r6, r6
 800085c:	1b8e      	subs	r6, r1, r6
 800085e:	4664      	mov	r4, ip
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x6c>
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3d4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x530>
 8000868:	2620      	movs	r6, #32
 800086a:	4647      	mov	r7, r8
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	40b7      	lsls	r7, r6
 8000870:	46b9      	mov	r9, r7
 8000872:	0017      	movs	r7, r2
 8000874:	46b2      	mov	sl, r6
 8000876:	40df      	lsrs	r7, r3
 8000878:	464e      	mov	r6, r9
 800087a:	433e      	orrs	r6, r7
 800087c:	0037      	movs	r7, r6
 800087e:	4656      	mov	r6, sl
 8000880:	40b2      	lsls	r2, r6
 8000882:	1e56      	subs	r6, r2, #1
 8000884:	41b2      	sbcs	r2, r6
 8000886:	4317      	orrs	r7, r2
 8000888:	4642      	mov	r2, r8
 800088a:	40da      	lsrs	r2, r3
 800088c:	1889      	adds	r1, r1, r2
 800088e:	e6ae      	b.n	80005ee <__aeabi_dadd+0x15a>
 8000890:	000007ff 	.word	0x000007ff
 8000894:	ff7fffff 	.word	0xff7fffff
 8000898:	800fffff 	.word	0x800fffff
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1a89      	subs	r1, r1, r2
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0x364>
 80008c4:	4c7f      	ldr	r4, [pc, #508]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d05b      	beq.n	8000982 <__aeabi_dadd+0x4ee>
 80008ca:	2480      	movs	r4, #128	; 0x80
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	425b      	negs	r3, r3
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e727      	b.n	8000724 <__aeabi_dadd+0x290>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_dadd+0x45e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x44a>
 80008dc:	e0cb      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80008de:	4664      	mov	r4, ip
 80008e0:	0039      	movs	r1, r7
 80008e2:	0010      	movs	r0, r2
 80008e4:	4d77      	ldr	r5, [pc, #476]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008e6:	e6d7      	b.n	8000698 <__aeabi_dadd+0x204>
 80008e8:	4f76      	ldr	r7, [pc, #472]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008ea:	42bb      	cmp	r3, r7
 80008ec:	d018      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008ee:	0033      	movs	r3, r6
 80008f0:	e675      	b.n	80005de <__aeabi_dadd+0x14a>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008f6:	074b      	lsls	r3, r1, #29
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	4318      	orrs	r0, r3
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	08c9      	lsrs	r1, r1, #3
 8000900:	031b      	lsls	r3, r3, #12
 8000902:	4219      	tst	r1, r3
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x482>
 8000906:	08fc      	lsrs	r4, r7, #3
 8000908:	421c      	tst	r4, r3
 800090a:	d104      	bne.n	8000916 <__aeabi_dadd+0x482>
 800090c:	0779      	lsls	r1, r7, #29
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	4308      	orrs	r0, r1
 8000912:	46e1      	mov	r9, ip
 8000914:	0021      	movs	r1, r4
 8000916:	464c      	mov	r4, r9
 8000918:	0f42      	lsrs	r2, r0, #29
 800091a:	00c9      	lsls	r1, r1, #3
 800091c:	4311      	orrs	r1, r2
 800091e:	00c0      	lsls	r0, r0, #3
 8000920:	4d68      	ldr	r5, [pc, #416]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x204>
 8000924:	001d      	movs	r5, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2300      	movs	r3, #0
 800092a:	e6c0      	b.n	80006ae <__aeabi_dadd+0x21a>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15b      	bne.n	80009e8 <__aeabi_dadd+0x554>
 8000930:	000d      	movs	r5, r1
 8000932:	4305      	orrs	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4a4>
 8000936:	e6e2      	b.n	80006fe <__aeabi_dadd+0x26a>
 8000938:	1c5d      	adds	r5, r3, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4aa>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x60c>
 800093e:	4d61      	ldr	r5, [pc, #388]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000940:	42ae      	cmp	r6, r5
 8000942:	d01f      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 8000944:	43db      	mvns	r3, r3
 8000946:	2b38      	cmp	r3, #56	; 0x38
 8000948:	dc71      	bgt.n	8000a2e <__aeabi_dadd+0x59a>
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x4bc>
 800094e:	e096      	b.n	8000a7e <__aeabi_dadd+0x5ea>
 8000950:	2520      	movs	r5, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1aed      	subs	r5, r5, r3
 8000956:	40af      	lsls	r7, r5
 8000958:	46b9      	mov	r9, r7
 800095a:	0007      	movs	r7, r0
 800095c:	46aa      	mov	sl, r5
 800095e:	40df      	lsrs	r7, r3
 8000960:	464d      	mov	r5, r9
 8000962:	433d      	orrs	r5, r7
 8000964:	002f      	movs	r7, r5
 8000966:	4655      	mov	r5, sl
 8000968:	40a8      	lsls	r0, r5
 800096a:	40d9      	lsrs	r1, r3
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	4488      	add	r8, r1
 8000972:	4307      	orrs	r7, r0
 8000974:	18bf      	adds	r7, r7, r2
 8000976:	4297      	cmp	r7, r2
 8000978:	4192      	sbcs	r2, r2
 800097a:	4251      	negs	r1, r2
 800097c:	4441      	add	r1, r8
 800097e:	0035      	movs	r5, r6
 8000980:	e63a      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000982:	4664      	mov	r4, ip
 8000984:	0035      	movs	r5, r6
 8000986:	4641      	mov	r1, r8
 8000988:	0010      	movs	r0, r2
 800098a:	e685      	b.n	8000698 <__aeabi_dadd+0x204>
 800098c:	000b      	movs	r3, r1
 800098e:	4303      	orrs	r3, r0
 8000990:	2d00      	cmp	r5, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x502>
 8000994:	e663      	b.n	800065e <__aeabi_dadd+0x1ca>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f5      	beq.n	8000986 <__aeabi_dadd+0x4f2>
 800099a:	4643      	mov	r3, r8
 800099c:	4313      	orrs	r3, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x50e>
 80009a0:	e67a      	b.n	8000698 <__aeabi_dadd+0x204>
 80009a2:	1887      	adds	r7, r0, r2
 80009a4:	4287      	cmp	r7, r0
 80009a6:	4180      	sbcs	r0, r0
 80009a8:	2207      	movs	r2, #7
 80009aa:	4441      	add	r1, r8
 80009ac:	4240      	negs	r0, r0
 80009ae:	1809      	adds	r1, r1, r0
 80009b0:	403a      	ands	r2, r7
 80009b2:	020b      	lsls	r3, r1, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x524>
 80009b6:	e6d5      	b.n	8000764 <__aeabi_dadd+0x2d0>
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x634>)
 80009ba:	3501      	adds	r5, #1
 80009bc:	4019      	ands	r1, r3
 80009be:	e5c9      	b.n	8000554 <__aeabi_dadd+0xc0>
 80009c0:	0038      	movs	r0, r7
 80009c2:	e669      	b.n	8000698 <__aeabi_dadd+0x204>
 80009c4:	001e      	movs	r6, r3
 80009c6:	4647      	mov	r7, r8
 80009c8:	3e20      	subs	r6, #32
 80009ca:	40f7      	lsrs	r7, r6
 80009cc:	46bc      	mov	ip, r7
 80009ce:	2b20      	cmp	r3, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x548>
 80009d2:	2640      	movs	r6, #64	; 0x40
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	4646      	mov	r6, r8
 80009d8:	409e      	lsls	r6, r3
 80009da:	4332      	orrs	r2, r6
 80009dc:	0017      	movs	r7, r2
 80009de:	4663      	mov	r3, ip
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e602      	b.n	80005ee <__aeabi_dadd+0x15a>
 80009e8:	4d36      	ldr	r5, [pc, #216]	; (8000ac4 <__aeabi_dadd+0x630>)
 80009ea:	42ae      	cmp	r6, r5
 80009ec:	d0ca      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 80009ee:	2580      	movs	r5, #128	; 0x80
 80009f0:	042d      	lsls	r5, r5, #16
 80009f2:	425b      	negs	r3, r3
 80009f4:	4329      	orrs	r1, r5
 80009f6:	e7a6      	b.n	8000946 <__aeabi_dadd+0x4b2>
 80009f8:	4308      	orrs	r0, r1
 80009fa:	1e41      	subs	r1, r0, #1
 80009fc:	4188      	sbcs	r0, r1
 80009fe:	e6a6      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x572>
 8000a04:	e648      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a06:	1a87      	subs	r7, r0, r2
 8000a08:	4643      	mov	r3, r8
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	41b6      	sbcs	r6, r6
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	4276      	negs	r6, r6
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	0233      	lsls	r3, r6, #8
 8000a16:	d54b      	bpl.n	8000ab0 <__aeabi_dadd+0x61c>
 8000a18:	1a17      	subs	r7, r2, r0
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1a59      	subs	r1, r3, r1
 8000a22:	4252      	negs	r2, r2
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	2207      	movs	r2, #7
 8000a28:	4664      	mov	r4, ip
 8000a2a:	403a      	ands	r2, r7
 8000a2c:	e592      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	000f      	movs	r7, r1
 8000a32:	1e79      	subs	r1, r7, #1
 8000a34:	418f      	sbcs	r7, r1
 8000a36:	e79d      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000a38:	001c      	movs	r4, r3
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	40e7      	lsrs	r7, r4
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d003      	beq.n	8000a4c <__aeabi_dadd+0x5b8>
 8000a44:	2440      	movs	r4, #64	; 0x40
 8000a46:	1ae3      	subs	r3, r4, r3
 8000a48:	4099      	lsls	r1, r3
 8000a4a:	4308      	orrs	r0, r1
 8000a4c:	1e41      	subs	r1, r0, #1
 8000a4e:	4188      	sbcs	r0, r1
 8000a50:	4338      	orrs	r0, r7
 8000a52:	e67c      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	e625      	b.n	80006a6 <__aeabi_dadd+0x212>
 8000a5a:	1a17      	subs	r7, r2, r0
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4252      	negs	r2, r2
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0035      	movs	r5, r6
 8000a6c:	e543      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	0010      	movs	r0, r2
 8000a72:	4d14      	ldr	r5, [pc, #80]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000a74:	e610      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	0312      	lsls	r2, r2, #12
 8000a7c:	e680      	b.n	8000780 <__aeabi_dadd+0x2ec>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	000f      	movs	r7, r1
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ef      	lsrs	r7, r5
 8000a86:	46bc      	mov	ip, r7
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d003      	beq.n	8000a94 <__aeabi_dadd+0x600>
 8000a8c:	2540      	movs	r5, #64	; 0x40
 8000a8e:	1aeb      	subs	r3, r5, r3
 8000a90:	4099      	lsls	r1, r3
 8000a92:	4308      	orrs	r0, r1
 8000a94:	0007      	movs	r7, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e78      	subs	r0, r7, #1
 8000a9a:	4187      	sbcs	r7, r0
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e769      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000aa0:	1887      	adds	r7, r0, r2
 8000aa2:	4297      	cmp	r7, r2
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4441      	add	r1, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	0035      	movs	r5, r6
 8000aae:	e5a3      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4333      	orrs	r3, r6
 8000ab4:	d0ce      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	0031      	movs	r1, r6
 8000aba:	403a      	ands	r2, r7
 8000abc:	e652      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	e5f4      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff

08000acc <__aeabi_ddiv>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	4657      	mov	r7, sl
 8000ad0:	46de      	mov	lr, fp
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	b5e0      	push	{r5, r6, r7, lr}
 8000ad8:	4683      	mov	fp, r0
 8000ada:	0007      	movs	r7, r0
 8000adc:	030e      	lsls	r6, r1, #12
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d40      	lsrs	r0, r0, #21
 8000aea:	0fcd      	lsrs	r5, r1, #31
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_ddiv+0x26>
 8000af0:	e09d      	b.n	8000c2e <__aeabi_ddiv+0x162>
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d039      	beq.n	8000b6c <__aeabi_ddiv+0xa0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	00f6      	lsls	r6, r6, #3
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431e      	orrs	r6, r3
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b02:	0f7b      	lsrs	r3, r7, #29
 8000b04:	4333      	orrs	r3, r6
 8000b06:	4699      	mov	r9, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	4463      	add	r3, ip
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2600      	movs	r6, #0
 8000b14:	00ff      	lsls	r7, r7, #3
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	0323      	lsls	r3, r4, #12
 8000b1a:	0b1b      	lsrs	r3, r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0063      	lsls	r3, r4, #1
 8000b20:	0fe4      	lsrs	r4, r4, #31
 8000b22:	4652      	mov	r2, sl
 8000b24:	0d5b      	lsrs	r3, r3, #21
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x60>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x1c8>
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x68>
 8000b32:	e09e      	b.n	8000c72 <__aeabi_ddiv+0x1a6>
 8000b34:	4642      	mov	r2, r8
 8000b36:	00d1      	lsls	r1, r2, #3
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0412      	lsls	r2, r2, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	4651      	mov	r1, sl
 8000b40:	0f49      	lsrs	r1, r1, #29
 8000b42:	4311      	orrs	r1, r2
 8000b44:	468b      	mov	fp, r1
 8000b46:	4981      	ldr	r1, [pc, #516]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b48:	4652      	mov	r2, sl
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4463      	add	r3, ip
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	002b      	movs	r3, r5
 8000b5a:	4063      	eors	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2e0f      	cmp	r6, #15
 8000b60:	d900      	bls.n	8000b64 <__aeabi_ddiv+0x98>
 8000b62:	e105      	b.n	8000d70 <__aeabi_ddiv+0x2a4>
 8000b64:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <__aeabi_ddiv+0x284>)
 8000b66:	00b6      	lsls	r6, r6, #2
 8000b68:	599b      	ldr	r3, [r3, r6]
 8000b6a:	469f      	mov	pc, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	4699      	mov	r9, r3
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ddiv+0xaa>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_ddiv+0x21c>
 8000b76:	2302      	movs	r3, #2
 8000b78:	2608      	movs	r6, #8
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	9000      	str	r0, [sp, #0]
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e7ca      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000b82:	46cb      	mov	fp, r9
 8000b84:	003a      	movs	r2, r7
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	9501      	str	r5, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d027      	beq.n	8000be2 <__aeabi_ddiv+0x116>
 8000b92:	2903      	cmp	r1, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0xcc>
 8000b96:	e280      	b.n	800109a <__aeabi_ddiv+0x5ce>
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d044      	beq.n	8000c26 <__aeabi_ddiv+0x15a>
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <__aeabi_ddiv+0x288>)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	dd38      	ble.n	8000c1c <__aeabi_ddiv+0x150>
 8000baa:	0753      	lsls	r3, r2, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000bae:	e213      	b.n	8000fd8 <__aeabi_ddiv+0x50c>
 8000bb0:	08d2      	lsrs	r2, r2, #3
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	d509      	bpl.n	8000bcc <__aeabi_ddiv+0x100>
 8000bb8:	4659      	mov	r1, fp
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <__aeabi_ddiv+0x28c>)
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	468b      	mov	fp, r1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	00c9      	lsls	r1, r1, #3
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	4463      	add	r3, ip
 8000bca:	001c      	movs	r4, r3
 8000bcc:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <__aeabi_ddiv+0x290>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	dc07      	bgt.n	8000be2 <__aeabi_ddiv+0x116>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	0564      	lsls	r4, r4, #21
 8000bd6:	075f      	lsls	r7, r3, #29
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b1b      	lsrs	r3, r3, #12
 8000bde:	0d62      	lsrs	r2, r4, #21
 8000be0:	e002      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2700      	movs	r7, #0
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	031b      	lsls	r3, r3, #12
 8000bec:	0b1c      	lsrs	r4, r3, #12
 8000bee:	0d0b      	lsrs	r3, r1, #20
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	0514      	lsls	r4, r2, #20
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <__aeabi_ddiv+0x294>)
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	0064      	lsls	r4, r4, #1
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	0864      	lsrs	r4, r4, #1
 8000c06:	431c      	orrs	r4, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	b005      	add	sp, #20
 8000c0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4699      	mov	r9, r3
 8000c12:	46a2      	mov	sl, r4
 8000c14:	46ab      	mov	fp, r5
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	2b38      	cmp	r3, #56	; 0x38
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_ddiv+0x15a>
 8000c24:	e1ad      	b.n	8000f82 <__aeabi_ddiv+0x4b6>
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	e7dc      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000c2e:	465b      	mov	r3, fp
 8000c30:	4333      	orrs	r3, r6
 8000c32:	4699      	mov	r9, r3
 8000c34:	d05e      	beq.n	8000cf4 <__aeabi_ddiv+0x228>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x170>
 8000c3a:	e18a      	b.n	8000f52 <__aeabi_ddiv+0x486>
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f001 f9c7 	bl	8001fd0 <__clzsi2>
 8000c42:	0003      	movs	r3, r0
 8000c44:	3b0b      	subs	r3, #11
 8000c46:	2b1c      	cmp	r3, #28
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_ddiv+0x180>
 8000c4a:	e17b      	b.n	8000f44 <__aeabi_ddiv+0x478>
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	465a      	mov	r2, fp
 8000c52:	0001      	movs	r1, r0
 8000c54:	40da      	lsrs	r2, r3
 8000c56:	3908      	subs	r1, #8
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	465f      	mov	r7, fp
 8000c5e:	4333      	orrs	r3, r6
 8000c60:	4699      	mov	r9, r3
 8000c62:	408f      	lsls	r7, r1
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <__aeabi_ddiv+0x298>)
 8000c66:	2600      	movs	r6, #0
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	e752      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000c72:	4641      	mov	r1, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	430b      	orrs	r3, r1
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <__aeabi_ddiv+0x29c>)
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	465b      	mov	r3, fp
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d13b      	bne.n	8000d02 <__aeabi_ddiv+0x236>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	2102      	movs	r1, #2
 8000c92:	e761      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	d037      	beq.n	8000d0c <__aeabi_ddiv+0x240>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x1d8>
 8000ca2:	e162      	b.n	8000f6a <__aeabi_ddiv+0x49e>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	f001 f993 	bl	8001fd0 <__clzsi2>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3b0b      	subs	r3, #11
 8000cae:	2b1c      	cmp	r3, #28
 8000cb0:	dd00      	ble.n	8000cb4 <__aeabi_ddiv+0x1e8>
 8000cb2:	e153      	b.n	8000f5c <__aeabi_ddiv+0x490>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	211d      	movs	r1, #29
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	4641      	mov	r1, r8
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	4925      	ldr	r1, [pc, #148]	; (8000d6c <__aeabi_ddiv+0x2a0>)
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	0003      	movs	r3, r0
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e737      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	46b1      	mov	r9, r6
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	260c      	movs	r6, #12
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e711      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	e70a      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	46c3      	mov	fp, r8
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	e725      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	031b      	lsls	r3, r3, #12
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d22:	e761      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4649      	mov	r1, r9
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x264>
 8000d2e:	e0e2      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4219      	tst	r1, r3
 8000d34:	d000      	beq.n	8000d38 <__aeabi_ddiv+0x26c>
 8000d36:	e0de      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	0017      	movs	r7, r2
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	46a2      	mov	sl, r4
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d44:	e750      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	fffffc01 	.word	0xfffffc01
 8000d50:	080082e0 	.word	0x080082e0
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	feffffff 	.word	0xfeffffff
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	800fffff 	.word	0x800fffff
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	fffff801 	.word	0xfffff801
 8000d6c:	000003f3 	.word	0x000003f3
 8000d70:	45d9      	cmp	r9, fp
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x2aa>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_ddiv+0x442>
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000d78:	e0c6      	b.n	8000f08 <__aeabi_ddiv+0x43c>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	465b      	mov	r3, fp
 8000d88:	0e16      	lsrs	r6, r2, #24
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0213      	lsls	r3, r2, #8
 8000d90:	4698      	mov	r8, r3
 8000d92:	0433      	lsls	r3, r6, #16
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	4699      	mov	r9, r3
 8000d98:	0c31      	lsrs	r1, r6, #16
 8000d9a:	9101      	str	r1, [sp, #4]
 8000d9c:	f7ff fa4c 	bl	8000238 <__aeabi_uidivmod>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4342      	muls	r2, r0
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	0005      	movs	r5, r0
 8000daa:	4319      	orrs	r1, r3
 8000dac:	428a      	cmp	r2, r1
 8000dae:	d907      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	3d01      	subs	r5, #1
 8000db4:	428e      	cmp	r6, r1
 8000db6:	d803      	bhi.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d901      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000dbc:	1e85      	subs	r5, r0, #2
 8000dbe:	1989      	adds	r1, r1, r6
 8000dc0:	1a88      	subs	r0, r1, r2
 8000dc2:	9901      	ldr	r1, [sp, #4]
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_uidivmod>
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	468c      	mov	ip, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0421      	lsls	r1, r4, #16
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d904      	bls.n	8000de8 <__aeabi_ddiv+0x31c>
 8000dde:	1989      	adds	r1, r1, r6
 8000de0:	3b01      	subs	r3, #1
 8000de2:	428e      	cmp	r6, r1
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x31c>
 8000de6:	e0f1      	b.n	8000fcc <__aeabi_ddiv+0x500>
 8000de8:	042d      	lsls	r5, r5, #16
 8000dea:	431d      	orrs	r5, r3
 8000dec:	46ab      	mov	fp, r5
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a89      	subs	r1, r1, r2
 8000df2:	4642      	mov	r2, r8
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	0c1d      	lsrs	r5, r3, #16
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	0c14      	lsrs	r4, r2, #16
 8000dfe:	0022      	movs	r2, r4
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435a      	muls	r2, r3
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	9502      	str	r5, [sp, #8]
 8000e0e:	4368      	muls	r0, r5
 8000e10:	191b      	adds	r3, r3, r4
 8000e12:	0c15      	lsrs	r5, r2, #16
 8000e14:	18eb      	adds	r3, r5, r3
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d903      	bls.n	8000e22 <__aeabi_ddiv+0x356>
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	46a4      	mov	ip, r4
 8000e20:	4460      	add	r0, ip
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	0415      	lsls	r5, r2, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c2d      	lsrs	r5, r5, #16
 8000e2a:	1820      	adds	r0, r4, r0
 8000e2c:	195d      	adds	r5, r3, r5
 8000e2e:	4281      	cmp	r1, r0
 8000e30:	d377      	bcc.n	8000f22 <__aeabi_ddiv+0x456>
 8000e32:	d073      	beq.n	8000f1c <__aeabi_ddiv+0x450>
 8000e34:	1a0c      	subs	r4, r1, r0
 8000e36:	4aa2      	ldr	r2, [pc, #648]	; (80010c0 <__aeabi_ddiv+0x5f4>)
 8000e38:	1b7d      	subs	r5, r7, r5
 8000e3a:	42af      	cmp	r7, r5
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4694      	mov	ip, r2
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	427f      	negs	r7, r7
 8000e44:	4463      	add	r3, ip
 8000e46:	1be0      	subs	r0, r4, r7
 8000e48:	001c      	movs	r4, r3
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x384>
 8000e4e:	e0db      	b.n	8001008 <__aeabi_ddiv+0x53c>
 8000e50:	9901      	ldr	r1, [sp, #4]
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	464a      	mov	r2, r9
 8000e58:	4342      	muls	r2, r0
 8000e5a:	040b      	lsls	r3, r1, #16
 8000e5c:	0c29      	lsrs	r1, r5, #16
 8000e5e:	0007      	movs	r7, r0
 8000e60:	4319      	orrs	r1, r3
 8000e62:	428a      	cmp	r2, r1
 8000e64:	d907      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e66:	1989      	adds	r1, r1, r6
 8000e68:	3f01      	subs	r7, #1
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d803      	bhi.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d901      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e72:	1e87      	subs	r7, r0, #2
 8000e74:	1989      	adds	r1, r1, r6
 8000e76:	1a88      	subs	r0, r1, r2
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	f7ff f9dd 	bl	8000238 <__aeabi_uidivmod>
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	464a      	mov	r2, r9
 8000e82:	4689      	mov	r9, r1
 8000e84:	0429      	lsls	r1, r5, #16
 8000e86:	464d      	mov	r5, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0c09      	lsrs	r1, r1, #16
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4329      	orrs	r1, r5
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d907      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e94:	1989      	adds	r1, r1, r6
 8000e96:	3b01      	subs	r3, #1
 8000e98:	428e      	cmp	r6, r1
 8000e9a:	d803      	bhi.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d901      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	9f03      	ldr	r7, [sp, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0038      	movs	r0, r7
 8000eb0:	0413      	lsls	r3, r2, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	4358      	muls	r0, r3
 8000eb6:	4681      	mov	r9, r0
 8000eb8:	9802      	ldr	r0, [sp, #8]
 8000eba:	0c15      	lsrs	r5, r2, #16
 8000ebc:	436f      	muls	r7, r5
 8000ebe:	4343      	muls	r3, r0
 8000ec0:	4345      	muls	r5, r0
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	0c00      	lsrs	r0, r0, #16
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	429f      	cmp	r7, r3
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_ddiv+0x40c>
 8000ed0:	2080      	movs	r0, #128	; 0x80
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4465      	add	r5, ip
 8000ed8:	4648      	mov	r0, r9
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c00      	lsrs	r0, r0, #16
 8000ee2:	197d      	adds	r5, r7, r5
 8000ee4:	1818      	adds	r0, r3, r0
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x420>
 8000eea:	e084      	b.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x424>
 8000eee:	e07f      	b.n	8000ff0 <__aeabi_ddiv+0x524>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	e657      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	464a      	mov	r2, r9
 8000efa:	031b      	lsls	r3, r3, #12
 8000efc:	4313      	orrs	r3, r2
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	0b1b      	lsrs	r3, r3, #12
 8000f02:	46aa      	mov	sl, r5
 8000f04:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 8000f06:	e66f      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000f08:	42ba      	cmp	r2, r7
 8000f0a:	d900      	bls.n	8000f0e <__aeabi_ddiv+0x442>
 8000f0c:	e735      	b.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	07dc      	lsls	r4, r3, #31
 8000f12:	0858      	lsrs	r0, r3, #1
 8000f14:	087b      	lsrs	r3, r7, #1
 8000f16:	431c      	orrs	r4, r3
 8000f18:	07ff      	lsls	r7, r7, #31
 8000f1a:	e734      	b.n	8000d86 <__aeabi_ddiv+0x2ba>
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	42af      	cmp	r7, r5
 8000f20:	d289      	bcs.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f22:	4447      	add	r7, r8
 8000f24:	4547      	cmp	r7, r8
 8000f26:	41a4      	sbcs	r4, r4
 8000f28:	465b      	mov	r3, fp
 8000f2a:	4264      	negs	r4, r4
 8000f2c:	19a4      	adds	r4, r4, r6
 8000f2e:	1864      	adds	r4, r4, r1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d21e      	bcs.n	8000f74 <__aeabi_ddiv+0x4a8>
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	d86d      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f3c:	e0b6      	b.n	80010ac <__aeabi_ddiv+0x5e0>
 8000f3e:	1a24      	subs	r4, r4, r0
 8000f40:	469b      	mov	fp, r3
 8000f42:	e778      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	465a      	mov	r2, fp
 8000f48:	3b28      	subs	r3, #40	; 0x28
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	4691      	mov	r9, r2
 8000f50:	e688      	b.n	8000c64 <__aeabi_ddiv+0x198>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 f83c 	bl	8001fd0 <__clzsi2>
 8000f58:	3020      	adds	r0, #32
 8000f5a:	e672      	b.n	8000c42 <__aeabi_ddiv+0x176>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4693      	mov	fp, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b4      	b.n	8000cd4 <__aeabi_ddiv+0x208>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	f001 f830 	bl	8001fd0 <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e69a      	b.n	8000caa <__aeabi_ddiv+0x1de>
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d1e2      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f78:	45b8      	cmp	r8, r7
 8000f7a:	d9dc      	bls.n	8000f36 <__aeabi_ddiv+0x46a>
 8000f7c:	1a34      	subs	r4, r6, r0
 8000f7e:	469b      	mov	fp, r3
 8000f80:	e759      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc65      	bgt.n	8001052 <__aeabi_ddiv+0x586>
 8000f86:	4c50      	ldr	r4, [pc, #320]	; (80010c8 <__aeabi_ddiv+0x5fc>)
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	46a4      	mov	ip, r4
 8000f8c:	465c      	mov	r4, fp
 8000f8e:	4461      	add	r1, ip
 8000f90:	0008      	movs	r0, r1
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0011      	movs	r1, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	1e50      	subs	r0, r2, #1
 8000f9c:	4182      	sbcs	r2, r0
 8000f9e:	430c      	orrs	r4, r1
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	465a      	mov	r2, fp
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	d009      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fac:	220f      	movs	r2, #15
 8000fae:	4022      	ands	r2, r4
 8000fb0:	2a04      	cmp	r2, #4
 8000fb2:	d005      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	1d14      	adds	r4, r2, #4
 8000fb8:	4294      	cmp	r4, r2
 8000fba:	4189      	sbcs	r1, r1
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	d562      	bpl.n	800108a <__aeabi_ddiv+0x5be>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	e60d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x506>
 8000fd0:	e70a      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd2:	1e83      	subs	r3, r0, #2
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	e707      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x516>
 8000fe0:	e5e6      	b.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000fe2:	1d17      	adds	r7, r2, #4
 8000fe4:	4297      	cmp	r7, r2
 8000fe6:	4192      	sbcs	r2, r2
 8000fe8:	4253      	negs	r3, r2
 8000fea:	449b      	add	fp, r3
 8000fec:	08fa      	lsrs	r2, r7, #3
 8000fee:	e5e0      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000ff4:	e5d7      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ff6:	1871      	adds	r1, r6, r1
 8000ff8:	1e53      	subs	r3, r2, #1
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d327      	bcc.n	800104e <__aeabi_ddiv+0x582>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d315      	bcc.n	800102e <__aeabi_ddiv+0x562>
 8001002:	d058      	beq.n	80010b6 <__aeabi_ddiv+0x5ea>
 8001004:	001a      	movs	r2, r3
 8001006:	e773      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x542>
 800100c:	e604      	b.n	8000c18 <__aeabi_ddiv+0x14c>
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	449b      	add	fp, r3
 8001014:	e5cd      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8001016:	2302      	movs	r3, #2
 8001018:	4447      	add	r7, r8
 800101a:	4547      	cmp	r7, r8
 800101c:	4189      	sbcs	r1, r1
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	4249      	negs	r1, r1
 8001024:	1989      	adds	r1, r1, r6
 8001026:	190c      	adds	r4, r1, r4
 8001028:	44e3      	add	fp, ip
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	e703      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 800102e:	4643      	mov	r3, r8
 8001030:	005f      	lsls	r7, r3, #1
 8001032:	4547      	cmp	r7, r8
 8001034:	419b      	sbcs	r3, r3
 8001036:	46b8      	mov	r8, r7
 8001038:	425b      	negs	r3, r3
 800103a:	199e      	adds	r6, r3, r6
 800103c:	3a02      	subs	r2, #2
 800103e:	1989      	adds	r1, r1, r6
 8001040:	42a9      	cmp	r1, r5
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x57a>
 8001044:	e754      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001046:	4540      	cmp	r0, r8
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0x580>
 800104a:	e751      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 800104c:	e5ab      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 800104e:	001a      	movs	r2, r3
 8001050:	e7f6      	b.n	8001040 <__aeabi_ddiv+0x574>
 8001052:	211f      	movs	r1, #31
 8001054:	465f      	mov	r7, fp
 8001056:	4249      	negs	r1, r1
 8001058:	1b0c      	subs	r4, r1, r4
 800105a:	40e7      	lsrs	r7, r4
 800105c:	2b20      	cmp	r3, #32
 800105e:	d007      	beq.n	8001070 <__aeabi_ddiv+0x5a4>
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <__aeabi_ddiv+0x600>)
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	468c      	mov	ip, r1
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	465b      	mov	r3, fp
 800106c:	4083      	lsls	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	1e50      	subs	r0, r2, #1
 8001072:	4182      	sbcs	r2, r0
 8001074:	433a      	orrs	r2, r7
 8001076:	2707      	movs	r7, #7
 8001078:	2300      	movs	r3, #0
 800107a:	4017      	ands	r7, r2
 800107c:	d009      	beq.n	8001092 <__aeabi_ddiv+0x5c6>
 800107e:	210f      	movs	r1, #15
 8001080:	2300      	movs	r3, #0
 8001082:	4011      	ands	r1, r2
 8001084:	0014      	movs	r4, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d195      	bne.n	8000fb6 <__aeabi_ddiv+0x4ea>
 800108a:	0022      	movs	r2, r4
 800108c:	075f      	lsls	r7, r3, #29
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	0b1b      	lsrs	r3, r3, #12
 8001092:	08d2      	lsrs	r2, r2, #3
 8001094:	4317      	orrs	r7, r2
 8001096:	2200      	movs	r2, #0
 8001098:	e5a6      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	4659      	mov	r1, fp
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	0017      	movs	r7, r2
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 80010aa:	e59d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 80010ac:	42bd      	cmp	r5, r7
 80010ae:	d8b2      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 80010b0:	469b      	mov	fp, r3
 80010b2:	2400      	movs	r4, #0
 80010b4:	e6bf      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 80010b6:	4580      	cmp	r8, r0
 80010b8:	d3b9      	bcc.n	800102e <__aeabi_ddiv+0x562>
 80010ba:	001a      	movs	r2, r3
 80010bc:	e7c3      	b.n	8001046 <__aeabi_ddiv+0x57a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	0000043e 	.word	0x0000043e

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464f      	mov	r7, r9
 80010d4:	4646      	mov	r6, r8
 80010d6:	46d6      	mov	lr, sl
 80010d8:	4684      	mov	ip, r0
 80010da:	b5c0      	push	{r6, r7, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4e19      	ldr	r6, [pc, #100]	; (8001144 <__eqdf2+0x74>)
 80010e0:	0318      	lsls	r0, r3, #12
 80010e2:	030f      	lsls	r7, r1, #12
 80010e4:	004d      	lsls	r5, r1, #1
 80010e6:	0b00      	lsrs	r0, r0, #12
 80010e8:	005c      	lsls	r4, r3, #1
 80010ea:	4682      	mov	sl, r0
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d6d      	lsrs	r5, r5, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	4691      	mov	r9, r2
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	2001      	movs	r0, #1
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d00a      	beq.n	8001114 <__eqdf2+0x44>
 80010fe:	42b4      	cmp	r4, r6
 8001100:	d003      	beq.n	800110a <__eqdf2+0x3a>
 8001102:	42a5      	cmp	r5, r4
 8001104:	d101      	bne.n	800110a <__eqdf2+0x3a>
 8001106:	4557      	cmp	r7, sl
 8001108:	d00c      	beq.n	8001124 <__eqdf2+0x54>
 800110a:	bc1c      	pop	{r2, r3, r4}
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	46a2      	mov	sl, r4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	4666      	mov	r6, ip
 8001116:	433e      	orrs	r6, r7
 8001118:	d1f7      	bne.n	800110a <__eqdf2+0x3a>
 800111a:	42ac      	cmp	r4, r5
 800111c:	d1f5      	bne.n	800110a <__eqdf2+0x3a>
 800111e:	4654      	mov	r4, sl
 8001120:	4314      	orrs	r4, r2
 8001122:	d1f2      	bne.n	800110a <__eqdf2+0x3a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c8      	cmp	r8, r9
 8001128:	d1ef      	bne.n	800110a <__eqdf2+0x3a>
 800112a:	4299      	cmp	r1, r3
 800112c:	d007      	beq.n	800113e <__eqdf2+0x6e>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d1eb      	bne.n	800110a <__eqdf2+0x3a>
 8001132:	4663      	mov	r3, ip
 8001134:	431f      	orrs	r7, r3
 8001136:	0038      	movs	r0, r7
 8001138:	1e47      	subs	r7, r0, #1
 800113a:	41b8      	sbcs	r0, r7
 800113c:	e7e5      	b.n	800110a <__eqdf2+0x3a>
 800113e:	2000      	movs	r0, #0
 8001140:	e7e3      	b.n	800110a <__eqdf2+0x3a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff

08001148 <__gedf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	004d      	lsls	r5, r1, #1
 8001152:	b5c0      	push	{r6, r7, lr}
 8001154:	030e      	lsls	r6, r1, #12
 8001156:	0fc9      	lsrs	r1, r1, #31
 8001158:	468a      	mov	sl, r1
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <__gedf2+0xc4>)
 800115c:	031f      	lsls	r7, r3, #12
 800115e:	005c      	lsls	r4, r3, #1
 8001160:	4680      	mov	r8, r0
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d6d      	lsrs	r5, r5, #21
 8001166:	4691      	mov	r9, r2
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	0fdb      	lsrs	r3, r3, #31
 800116e:	428d      	cmp	r5, r1
 8001170:	d01e      	beq.n	80011b0 <__gedf2+0x68>
 8001172:	428c      	cmp	r4, r1
 8001174:	d016      	beq.n	80011a4 <__gedf2+0x5c>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d11e      	bne.n	80011b8 <__gedf2+0x70>
 800117a:	4330      	orrs	r0, r6
 800117c:	4684      	mov	ip, r0
 800117e:	2c00      	cmp	r4, #0
 8001180:	d101      	bne.n	8001186 <__gedf2+0x3e>
 8001182:	433a      	orrs	r2, r7
 8001184:	d023      	beq.n	80011ce <__gedf2+0x86>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d01a      	beq.n	80011c2 <__gedf2+0x7a>
 800118c:	459a      	cmp	sl, r3
 800118e:	d029      	beq.n	80011e4 <__gedf2+0x9c>
 8001190:	4651      	mov	r1, sl
 8001192:	2002      	movs	r0, #2
 8001194:	3901      	subs	r1, #1
 8001196:	4008      	ands	r0, r1
 8001198:	3801      	subs	r0, #1
 800119a:	bc1c      	pop	{r2, r3, r4}
 800119c:	4690      	mov	r8, r2
 800119e:	4699      	mov	r9, r3
 80011a0:	46a2      	mov	sl, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	0039      	movs	r1, r7
 80011a6:	4311      	orrs	r1, r2
 80011a8:	d0e5      	beq.n	8001176 <__gedf2+0x2e>
 80011aa:	2002      	movs	r0, #2
 80011ac:	4240      	negs	r0, r0
 80011ae:	e7f4      	b.n	800119a <__gedf2+0x52>
 80011b0:	4330      	orrs	r0, r6
 80011b2:	d1fa      	bne.n	80011aa <__gedf2+0x62>
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d00f      	beq.n	80011d8 <__gedf2+0x90>
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d10f      	bne.n	80011dc <__gedf2+0x94>
 80011bc:	433a      	orrs	r2, r7
 80011be:	d0e7      	beq.n	8001190 <__gedf2+0x48>
 80011c0:	e00c      	b.n	80011dc <__gedf2+0x94>
 80011c2:	2201      	movs	r2, #1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4393      	bics	r3, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	3001      	adds	r0, #1
 80011cc:	e7e5      	b.n	800119a <__gedf2+0x52>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0e1      	beq.n	800119a <__gedf2+0x52>
 80011d6:	e7db      	b.n	8001190 <__gedf2+0x48>
 80011d8:	433a      	orrs	r2, r7
 80011da:	d1e6      	bne.n	80011aa <__gedf2+0x62>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d1d7      	bne.n	8001190 <__gedf2+0x48>
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	dcd5      	bgt.n	8001190 <__gedf2+0x48>
 80011e4:	42a5      	cmp	r5, r4
 80011e6:	db05      	blt.n	80011f4 <__gedf2+0xac>
 80011e8:	42be      	cmp	r6, r7
 80011ea:	d8d1      	bhi.n	8001190 <__gedf2+0x48>
 80011ec:	d008      	beq.n	8001200 <__gedf2+0xb8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	42be      	cmp	r6, r7
 80011f2:	d2d2      	bcs.n	800119a <__gedf2+0x52>
 80011f4:	4650      	mov	r0, sl
 80011f6:	2301      	movs	r3, #1
 80011f8:	3801      	subs	r0, #1
 80011fa:	4398      	bics	r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	e7cc      	b.n	800119a <__gedf2+0x52>
 8001200:	45c8      	cmp	r8, r9
 8001202:	d8c5      	bhi.n	8001190 <__gedf2+0x48>
 8001204:	2000      	movs	r0, #0
 8001206:	45c8      	cmp	r8, r9
 8001208:	d3f4      	bcc.n	80011f4 <__gedf2+0xac>
 800120a:	e7c6      	b.n	800119a <__gedf2+0x52>
 800120c:	000007ff 	.word	0x000007ff

08001210 <__ledf2>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	4646      	mov	r6, r8
 8001216:	46d6      	mov	lr, sl
 8001218:	004d      	lsls	r5, r1, #1
 800121a:	b5c0      	push	{r6, r7, lr}
 800121c:	030e      	lsls	r6, r1, #12
 800121e:	0fc9      	lsrs	r1, r1, #31
 8001220:	468a      	mov	sl, r1
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <__ledf2+0xcc>)
 8001224:	031f      	lsls	r7, r3, #12
 8001226:	005c      	lsls	r4, r3, #1
 8001228:	4680      	mov	r8, r0
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	4691      	mov	r9, r2
 8001230:	0b3f      	lsrs	r7, r7, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	428d      	cmp	r5, r1
 8001238:	d018      	beq.n	800126c <__ledf2+0x5c>
 800123a:	428c      	cmp	r4, r1
 800123c:	d011      	beq.n	8001262 <__ledf2+0x52>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d118      	bne.n	8001274 <__ledf2+0x64>
 8001242:	4330      	orrs	r0, r6
 8001244:	4684      	mov	ip, r0
 8001246:	2c00      	cmp	r4, #0
 8001248:	d11e      	bne.n	8001288 <__ledf2+0x78>
 800124a:	433a      	orrs	r2, r7
 800124c:	d11c      	bne.n	8001288 <__ledf2+0x78>
 800124e:	4663      	mov	r3, ip
 8001250:	2000      	movs	r0, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d030      	beq.n	80012b8 <__ledf2+0xa8>
 8001256:	4651      	mov	r1, sl
 8001258:	2002      	movs	r0, #2
 800125a:	3901      	subs	r1, #1
 800125c:	4008      	ands	r0, r1
 800125e:	3801      	subs	r0, #1
 8001260:	e02a      	b.n	80012b8 <__ledf2+0xa8>
 8001262:	0039      	movs	r1, r7
 8001264:	4311      	orrs	r1, r2
 8001266:	d0ea      	beq.n	800123e <__ledf2+0x2e>
 8001268:	2002      	movs	r0, #2
 800126a:	e025      	b.n	80012b8 <__ledf2+0xa8>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fb      	bne.n	8001268 <__ledf2+0x58>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d026      	beq.n	80012c2 <__ledf2+0xb2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d126      	bne.n	80012c6 <__ledf2+0xb6>
 8001278:	433a      	orrs	r2, r7
 800127a:	d124      	bne.n	80012c6 <__ledf2+0xb6>
 800127c:	4651      	mov	r1, sl
 800127e:	2002      	movs	r0, #2
 8001280:	3901      	subs	r1, #1
 8001282:	4008      	ands	r0, r1
 8001284:	3801      	subs	r0, #1
 8001286:	e017      	b.n	80012b8 <__ledf2+0xa8>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d00f      	beq.n	80012ae <__ledf2+0x9e>
 800128e:	459a      	cmp	sl, r3
 8001290:	d1e1      	bne.n	8001256 <__ledf2+0x46>
 8001292:	42a5      	cmp	r5, r4
 8001294:	db05      	blt.n	80012a2 <__ledf2+0x92>
 8001296:	42be      	cmp	r6, r7
 8001298:	d8dd      	bhi.n	8001256 <__ledf2+0x46>
 800129a:	d019      	beq.n	80012d0 <__ledf2+0xc0>
 800129c:	2000      	movs	r0, #0
 800129e:	42be      	cmp	r6, r7
 80012a0:	d20a      	bcs.n	80012b8 <__ledf2+0xa8>
 80012a2:	4650      	mov	r0, sl
 80012a4:	2301      	movs	r3, #1
 80012a6:	3801      	subs	r0, #1
 80012a8:	4398      	bics	r0, r3
 80012aa:	3001      	adds	r0, #1
 80012ac:	e004      	b.n	80012b8 <__ledf2+0xa8>
 80012ae:	2201      	movs	r2, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4393      	bics	r3, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	3001      	adds	r0, #1
 80012b8:	bc1c      	pop	{r2, r3, r4}
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	46a2      	mov	sl, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	433a      	orrs	r2, r7
 80012c4:	d1d0      	bne.n	8001268 <__ledf2+0x58>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1c5      	bne.n	8001256 <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	dcc3      	bgt.n	8001256 <__ledf2+0x46>
 80012ce:	e7e0      	b.n	8001292 <__ledf2+0x82>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8c0      	bhi.n	8001256 <__ledf2+0x46>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d3e3      	bcc.n	80012a2 <__ledf2+0x92>
 80012da:	e7ed      	b.n	80012b8 <__ledf2+0xa8>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4657      	mov	r7, sl
 80012e4:	46de      	mov	lr, fp
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	b5e0      	push	{r5, r6, r7, lr}
 80012ec:	4683      	mov	fp, r0
 80012ee:	0006      	movs	r6, r0
 80012f0:	030f      	lsls	r7, r1, #12
 80012f2:	0048      	lsls	r0, r1, #1
 80012f4:	b087      	sub	sp, #28
 80012f6:	4692      	mov	sl, r2
 80012f8:	001d      	movs	r5, r3
 80012fa:	0b3f      	lsrs	r7, r7, #12
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	0fcc      	lsrs	r4, r1, #31
 8001300:	2800      	cmp	r0, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x26>
 8001304:	e06f      	b.n	80013e6 <__aeabi_dmul+0x106>
 8001306:	4bde      	ldr	r3, [pc, #888]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d038      	beq.n	800137e <__aeabi_dmul+0x9e>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00ff      	lsls	r7, r7, #3
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431f      	orrs	r7, r3
 8001314:	0f73      	lsrs	r3, r6, #29
 8001316:	433b      	orrs	r3, r7
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4bda      	ldr	r3, [pc, #872]	; (8001684 <__aeabi_dmul+0x3a4>)
 800131c:	2700      	movs	r7, #0
 800131e:	4699      	mov	r9, r3
 8001320:	2300      	movs	r3, #0
 8001322:	469b      	mov	fp, r3
 8001324:	00f6      	lsls	r6, r6, #3
 8001326:	4481      	add	r9, r0
 8001328:	032b      	lsls	r3, r5, #12
 800132a:	0069      	lsls	r1, r5, #1
 800132c:	0b1b      	lsrs	r3, r3, #12
 800132e:	4652      	mov	r2, sl
 8001330:	4698      	mov	r8, r3
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	0fed      	lsrs	r5, r5, #31
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x5c>
 800133a:	e085      	b.n	8001448 <__aeabi_dmul+0x168>
 800133c:	4bd0      	ldr	r3, [pc, #832]	; (8001680 <__aeabi_dmul+0x3a0>)
 800133e:	4299      	cmp	r1, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e073      	b.n	800142c <__aeabi_dmul+0x14c>
 8001344:	4643      	mov	r3, r8
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4313      	orrs	r3, r2
 800134e:	4652      	mov	r2, sl
 8001350:	48cc      	ldr	r0, [pc, #816]	; (8001684 <__aeabi_dmul+0x3a4>)
 8001352:	0f52      	lsrs	r2, r2, #29
 8001354:	4684      	mov	ip, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	4652      	mov	r2, sl
 800135a:	2000      	movs	r0, #0
 800135c:	4461      	add	r1, ip
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	4489      	add	r9, r1
 8001362:	0021      	movs	r1, r4
 8001364:	4069      	eors	r1, r5
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	468c      	mov	ip, r1
 800136a:	2101      	movs	r1, #1
 800136c:	4449      	add	r1, r9
 800136e:	468a      	mov	sl, r1
 8001370:	2f0f      	cmp	r7, #15
 8001372:	d900      	bls.n	8001376 <__aeabi_dmul+0x96>
 8001374:	e090      	b.n	8001498 <__aeabi_dmul+0x1b8>
 8001376:	49c4      	ldr	r1, [pc, #784]	; (8001688 <__aeabi_dmul+0x3a8>)
 8001378:	00bf      	lsls	r7, r7, #2
 800137a:	59cf      	ldr	r7, [r1, r7]
 800137c:	46bf      	mov	pc, r7
 800137e:	465b      	mov	r3, fp
 8001380:	433b      	orrs	r3, r7
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	d000      	beq.n	8001388 <__aeabi_dmul+0xa8>
 8001386:	e16a      	b.n	800165e <__aeabi_dmul+0x37e>
 8001388:	2302      	movs	r3, #2
 800138a:	2708      	movs	r7, #8
 800138c:	2600      	movs	r6, #0
 800138e:	4681      	mov	r9, r0
 8001390:	469b      	mov	fp, r3
 8001392:	e7c9      	b.n	8001328 <__aeabi_dmul+0x48>
 8001394:	0032      	movs	r2, r6
 8001396:	4658      	mov	r0, fp
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	4661      	mov	r1, ip
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	2802      	cmp	r0, #2
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0xc4>
 80013a2:	e075      	b.n	8001490 <__aeabi_dmul+0x1b0>
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dmul+0xca>
 80013a8:	e1fe      	b.n	80017a8 <__aeabi_dmul+0x4c8>
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dmul+0xd0>
 80013ae:	e12c      	b.n	800160a <__aeabi_dmul+0x32a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2700      	movs	r7, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	2500      	movs	r5, #0
 80013b8:	033f      	lsls	r7, r7, #12
 80013ba:	0d2a      	lsrs	r2, r5, #20
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	48b3      	ldr	r0, [pc, #716]	; (800168c <__aeabi_dmul+0x3ac>)
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	433a      	orrs	r2, r7
 80013c4:	4002      	ands	r2, r0
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	4313      	orrs	r3, r2
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	430b      	orrs	r3, r1
 80013d4:	0030      	movs	r0, r6
 80013d6:	0019      	movs	r1, r3
 80013d8:	b007      	add	sp, #28
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	465b      	mov	r3, fp
 80013e8:	433b      	orrs	r3, r7
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x110>
 80013ee:	e12f      	b.n	8001650 <__aeabi_dmul+0x370>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x116>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dmul+0x462>
 80013f6:	0038      	movs	r0, r7
 80013f8:	f000 fdea 	bl	8001fd0 <__clzsi2>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3b0b      	subs	r3, #11
 8001400:	2b1c      	cmp	r3, #28
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x126>
 8001404:	e196      	b.n	8001734 <__aeabi_dmul+0x454>
 8001406:	221d      	movs	r2, #29
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	465a      	mov	r2, fp
 800140c:	0001      	movs	r1, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	465e      	mov	r6, fp
 8001412:	3908      	subs	r1, #8
 8001414:	408f      	lsls	r7, r1
 8001416:	0013      	movs	r3, r2
 8001418:	408e      	lsls	r6, r1
 800141a:	433b      	orrs	r3, r7
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001420:	2700      	movs	r7, #0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	e77d      	b.n	8001328 <__aeabi_dmul+0x48>
 800142c:	4641      	mov	r1, r8
 800142e:	4653      	mov	r3, sl
 8001430:	430b      	orrs	r3, r1
 8001432:	4993      	ldr	r1, [pc, #588]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001434:	468c      	mov	ip, r1
 8001436:	44e1      	add	r9, ip
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0x15e>
 800143c:	e11a      	b.n	8001674 <__aeabi_dmul+0x394>
 800143e:	2202      	movs	r2, #2
 8001440:	2002      	movs	r0, #2
 8001442:	4317      	orrs	r7, r2
 8001444:	2200      	movs	r2, #0
 8001446:	e78c      	b.n	8001362 <__aeabi_dmul+0x82>
 8001448:	4313      	orrs	r3, r2
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x16e>
 800144c:	e10d      	b.n	800166a <__aeabi_dmul+0x38a>
 800144e:	4643      	mov	r3, r8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x176>
 8001454:	e181      	b.n	800175a <__aeabi_dmul+0x47a>
 8001456:	4640      	mov	r0, r8
 8001458:	f000 fdba 	bl	8001fd0 <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	2a1c      	cmp	r2, #28
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x186>
 8001464:	e172      	b.n	800174c <__aeabi_dmul+0x46c>
 8001466:	0001      	movs	r1, r0
 8001468:	4643      	mov	r3, r8
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	4698      	mov	r8, r3
 8001470:	231d      	movs	r3, #29
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	4653      	mov	r3, sl
 8001476:	40d3      	lsrs	r3, r2
 8001478:	001a      	movs	r2, r3
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	4652      	mov	r2, sl
 8001480:	408a      	lsls	r2, r1
 8001482:	4649      	mov	r1, r9
 8001484:	1a08      	subs	r0, r1, r0
 8001486:	4982      	ldr	r1, [pc, #520]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001488:	4689      	mov	r9, r1
 800148a:	4481      	add	r9, r0
 800148c:	2000      	movs	r0, #0
 800148e:	e768      	b.n	8001362 <__aeabi_dmul+0x82>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001492:	2700      	movs	r7, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e78e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001498:	0c14      	lsrs	r4, r2, #16
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	0011      	movs	r1, r2
 80014a0:	0c37      	lsrs	r7, r6, #16
 80014a2:	0436      	lsls	r6, r6, #16
 80014a4:	0c35      	lsrs	r5, r6, #16
 80014a6:	4379      	muls	r1, r7
 80014a8:	0028      	movs	r0, r5
 80014aa:	468c      	mov	ip, r1
 80014ac:	002e      	movs	r6, r5
 80014ae:	4360      	muls	r0, r4
 80014b0:	4460      	add	r0, ip
 80014b2:	4683      	mov	fp, r0
 80014b4:	4356      	muls	r6, r2
 80014b6:	0021      	movs	r1, r4
 80014b8:	0c30      	lsrs	r0, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4658      	mov	r0, fp
 80014be:	4379      	muls	r1, r7
 80014c0:	4440      	add	r0, r8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	4584      	cmp	ip, r0
 80014c6:	d906      	bls.n	80014d6 <__aeabi_dmul+0x1f6>
 80014c8:	4688      	mov	r8, r1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	468c      	mov	ip, r1
 80014d0:	44e0      	add	r8, ip
 80014d2:	4641      	mov	r1, r8
 80014d4:	9102      	str	r1, [sp, #8]
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0400      	lsls	r0, r0, #16
 80014de:	468b      	mov	fp, r1
 80014e0:	1981      	adds	r1, r0, r6
 80014e2:	0c1e      	lsrs	r6, r3, #16
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	0019      	movs	r1, r3
 80014ec:	4379      	muls	r1, r7
 80014ee:	468c      	mov	ip, r1
 80014f0:	0028      	movs	r0, r5
 80014f2:	4375      	muls	r5, r6
 80014f4:	4465      	add	r5, ip
 80014f6:	46a8      	mov	r8, r5
 80014f8:	4358      	muls	r0, r3
 80014fa:	0c05      	lsrs	r5, r0, #16
 80014fc:	4445      	add	r5, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	42a9      	cmp	r1, r5
 8001502:	d903      	bls.n	800150c <__aeabi_dmul+0x22c>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	468c      	mov	ip, r1
 800150a:	4467      	add	r7, ip
 800150c:	0c29      	lsrs	r1, r5, #16
 800150e:	468c      	mov	ip, r1
 8001510:	0039      	movs	r1, r7
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	042d      	lsls	r5, r5, #16
 8001518:	182d      	adds	r5, r5, r0
 800151a:	4461      	add	r1, ip
 800151c:	44ab      	add	fp, r5
 800151e:	9105      	str	r1, [sp, #20]
 8001520:	4659      	mov	r1, fp
 8001522:	9104      	str	r1, [sp, #16]
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	040f      	lsls	r7, r1, #16
 8001528:	0c3f      	lsrs	r7, r7, #16
 800152a:	0c08      	lsrs	r0, r1, #16
 800152c:	0039      	movs	r1, r7
 800152e:	4351      	muls	r1, r2
 8001530:	4342      	muls	r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	0002      	movs	r2, r0
 8001536:	468c      	mov	ip, r1
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	468b      	mov	fp, r1
 800153c:	4362      	muls	r2, r4
 800153e:	437c      	muls	r4, r7
 8001540:	4444      	add	r4, r8
 8001542:	445c      	add	r4, fp
 8001544:	45a0      	cmp	r8, r4
 8001546:	d903      	bls.n	8001550 <__aeabi_dmul+0x270>
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	4688      	mov	r8, r1
 800154e:	4442      	add	r2, r8
 8001550:	0c21      	lsrs	r1, r4, #16
 8001552:	4688      	mov	r8, r1
 8001554:	4661      	mov	r1, ip
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	468c      	mov	ip, r1
 800155c:	0039      	movs	r1, r7
 800155e:	4359      	muls	r1, r3
 8001560:	4343      	muls	r3, r0
 8001562:	4370      	muls	r0, r6
 8001564:	437e      	muls	r6, r7
 8001566:	0c0f      	lsrs	r7, r1, #16
 8001568:	18f6      	adds	r6, r6, r3
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	19be      	adds	r6, r7, r6
 800156e:	4464      	add	r4, ip
 8001570:	4442      	add	r2, r8
 8001572:	468c      	mov	ip, r1
 8001574:	42b3      	cmp	r3, r6
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x2a0>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4698      	mov	r8, r3
 800157e:	4440      	add	r0, r8
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	4661      	mov	r1, ip
 8001584:	4698      	mov	r8, r3
 8001586:	9b04      	ldr	r3, [sp, #16]
 8001588:	0437      	lsls	r7, r6, #16
 800158a:	4443      	add	r3, r8
 800158c:	469b      	mov	fp, r3
 800158e:	45ab      	cmp	fp, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426b      	negs	r3, r5
 8001594:	040d      	lsls	r5, r1, #16
 8001596:	9905      	ldr	r1, [sp, #20]
 8001598:	0c2d      	lsrs	r5, r5, #16
 800159a:	468c      	mov	ip, r1
 800159c:	197f      	adds	r7, r7, r5
 800159e:	4467      	add	r7, ip
 80015a0:	18fd      	adds	r5, r7, r3
 80015a2:	46a8      	mov	r8, r5
 80015a4:	465d      	mov	r5, fp
 80015a6:	192d      	adds	r5, r5, r4
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	41a4      	sbcs	r4, r4
 80015ac:	4693      	mov	fp, r2
 80015ae:	4264      	negs	r4, r4
 80015b0:	46a4      	mov	ip, r4
 80015b2:	44c3      	add	fp, r8
 80015b4:	44dc      	add	ip, fp
 80015b6:	428f      	cmp	r7, r1
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	4598      	cmp	r8, r3
 80015bc:	419b      	sbcs	r3, r3
 80015be:	4593      	cmp	fp, r2
 80015c0:	4192      	sbcs	r2, r2
 80015c2:	45a4      	cmp	ip, r4
 80015c4:	41a4      	sbcs	r4, r4
 80015c6:	425b      	negs	r3, r3
 80015c8:	427f      	negs	r7, r7
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c36      	lsrs	r6, r6, #16
 80015ce:	4252      	negs	r2, r2
 80015d0:	4264      	negs	r4, r4
 80015d2:	19bf      	adds	r7, r7, r6
 80015d4:	4322      	orrs	r2, r4
 80015d6:	18bf      	adds	r7, r7, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	0243      	lsls	r3, r0, #9
 80015de:	0dd2      	lsrs	r2, r2, #23
 80015e0:	9903      	ldr	r1, [sp, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	026a      	lsls	r2, r5, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	1e50      	subs	r0, r2, #1
 80015ea:	4182      	sbcs	r2, r0
 80015ec:	4661      	mov	r1, ip
 80015ee:	0ded      	lsrs	r5, r5, #23
 80015f0:	432a      	orrs	r2, r5
 80015f2:	024e      	lsls	r6, r1, #9
 80015f4:	4332      	orrs	r2, r6
 80015f6:	01d9      	lsls	r1, r3, #7
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dmul+0x31c>
 80015fa:	e0b3      	b.n	8001764 <__aeabi_dmul+0x484>
 80015fc:	2601      	movs	r6, #1
 80015fe:	0850      	lsrs	r0, r2, #1
 8001600:	4032      	ands	r2, r6
 8001602:	4302      	orrs	r2, r0
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	4332      	orrs	r2, r6
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <__aeabi_dmul+0x3b4>)
 800160c:	4454      	add	r4, sl
 800160e:	2c00      	cmp	r4, #0
 8001610:	dd62      	ble.n	80016d8 <__aeabi_dmul+0x3f8>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d009      	beq.n	800162a <__aeabi_dmul+0x34a>
 8001616:	200f      	movs	r0, #15
 8001618:	4010      	ands	r0, r2
 800161a:	2804      	cmp	r0, #4
 800161c:	d005      	beq.n	800162a <__aeabi_dmul+0x34a>
 800161e:	1d10      	adds	r0, r2, #4
 8001620:	4290      	cmp	r0, r2
 8001622:	4192      	sbcs	r2, r2
 8001624:	4252      	negs	r2, r2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	0002      	movs	r2, r0
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d504      	bpl.n	8001638 <__aeabi_dmul+0x358>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <__aeabi_dmul+0x3b8>)
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4003      	ands	r3, r0
 8001636:	4454      	add	r4, sl
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <__aeabi_dmul+0x3bc>)
 800163a:	4284      	cmp	r4, r0
 800163c:	dd00      	ble.n	8001640 <__aeabi_dmul+0x360>
 800163e:	e727      	b.n	8001490 <__aeabi_dmul+0x1b0>
 8001640:	075e      	lsls	r6, r3, #29
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	0b1f      	lsrs	r7, r3, #12
 8001648:	0563      	lsls	r3, r4, #21
 800164a:	4316      	orrs	r6, r2
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	e6b2      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	3301      	adds	r3, #1
 8001656:	2704      	movs	r7, #4
 8001658:	2600      	movs	r6, #0
 800165a:	469b      	mov	fp, r3
 800165c:	e664      	b.n	8001328 <__aeabi_dmul+0x48>
 800165e:	2303      	movs	r3, #3
 8001660:	9701      	str	r7, [sp, #4]
 8001662:	4681      	mov	r9, r0
 8001664:	270c      	movs	r7, #12
 8001666:	469b      	mov	fp, r3
 8001668:	e65e      	b.n	8001328 <__aeabi_dmul+0x48>
 800166a:	2201      	movs	r2, #1
 800166c:	2001      	movs	r0, #1
 800166e:	4317      	orrs	r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	e676      	b.n	8001362 <__aeabi_dmul+0x82>
 8001674:	2303      	movs	r3, #3
 8001676:	2003      	movs	r0, #3
 8001678:	431f      	orrs	r7, r3
 800167a:	4643      	mov	r3, r8
 800167c:	e671      	b.n	8001362 <__aeabi_dmul+0x82>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc01 	.word	0xfffffc01
 8001688:	08008320 	.word	0x08008320
 800168c:	800fffff 	.word	0x800fffff
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	2300      	movs	r3, #0
 80016a2:	2780      	movs	r7, #128	; 0x80
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	033f      	lsls	r7, r7, #12
 80016a8:	2600      	movs	r6, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016ac:	e683      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	0032      	movs	r2, r6
 80016b2:	46a4      	mov	ip, r4
 80016b4:	4658      	mov	r0, fp
 80016b6:	e670      	b.n	800139a <__aeabi_dmul+0xba>
 80016b8:	46ac      	mov	ip, r5
 80016ba:	e66e      	b.n	800139a <__aeabi_dmul+0xba>
 80016bc:	2780      	movs	r7, #128	; 0x80
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	033f      	lsls	r7, r7, #12
 80016c2:	4239      	tst	r1, r7
 80016c4:	d02d      	beq.n	8001722 <__aeabi_dmul+0x442>
 80016c6:	423b      	tst	r3, r7
 80016c8:	d12b      	bne.n	8001722 <__aeabi_dmul+0x442>
 80016ca:	431f      	orrs	r7, r3
 80016cc:	033f      	lsls	r7, r7, #12
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	0016      	movs	r6, r2
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016d8:	2501      	movs	r5, #1
 80016da:	1b2d      	subs	r5, r5, r4
 80016dc:	2d38      	cmp	r5, #56	; 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x402>
 80016e0:	e666      	b.n	80013b0 <__aeabi_dmul+0xd0>
 80016e2:	2d1f      	cmp	r5, #31
 80016e4:	dc40      	bgt.n	8001768 <__aeabi_dmul+0x488>
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <__aeabi_dmul+0x4dc>)
 80016e8:	001c      	movs	r4, r3
 80016ea:	4450      	add	r0, sl
 80016ec:	0016      	movs	r6, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	40ee      	lsrs	r6, r5
 80016f4:	1e50      	subs	r0, r2, #1
 80016f6:	4182      	sbcs	r2, r0
 80016f8:	4334      	orrs	r4, r6
 80016fa:	4314      	orrs	r4, r2
 80016fc:	40eb      	lsrs	r3, r5
 80016fe:	0762      	lsls	r2, r4, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_dmul+0x436>
 8001702:	220f      	movs	r2, #15
 8001704:	4022      	ands	r2, r4
 8001706:	2a04      	cmp	r2, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_dmul+0x436>
 800170a:	0022      	movs	r2, r4
 800170c:	1d14      	adds	r4, r2, #4
 800170e:	4294      	cmp	r4, r2
 8001710:	4180      	sbcs	r0, r0
 8001712:	4240      	negs	r0, r0
 8001714:	181b      	adds	r3, r3, r0
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	d53e      	bpl.n	8001798 <__aeabi_dmul+0x4b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2700      	movs	r7, #0
 800171e:	2600      	movs	r6, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001722:	2780      	movs	r7, #128	; 0x80
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	033f      	lsls	r7, r7, #12
 8001728:	431f      	orrs	r7, r3
 800172a:	033f      	lsls	r7, r7, #12
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4d8>)
 8001732:	e640      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001734:	0003      	movs	r3, r0
 8001736:	465a      	mov	r2, fp
 8001738:	3b28      	subs	r3, #40	; 0x28
 800173a:	409a      	lsls	r2, r3
 800173c:	2600      	movs	r6, #0
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	e66d      	b.n	800141e <__aeabi_dmul+0x13e>
 8001742:	4658      	mov	r0, fp
 8001744:	f000 fc44 	bl	8001fd0 <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e657      	b.n	80013fc <__aeabi_dmul+0x11c>
 800174c:	0003      	movs	r3, r0
 800174e:	4652      	mov	r2, sl
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	e693      	b.n	8001482 <__aeabi_dmul+0x1a2>
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fc38 	bl	8001fd0 <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e67b      	b.n	800145c <__aeabi_dmul+0x17c>
 8001764:	46ca      	mov	sl, r9
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x32a>
 8001768:	201f      	movs	r0, #31
 800176a:	001e      	movs	r6, r3
 800176c:	4240      	negs	r0, r0
 800176e:	1b04      	subs	r4, r0, r4
 8001770:	40e6      	lsrs	r6, r4
 8001772:	2d20      	cmp	r5, #32
 8001774:	d003      	beq.n	800177e <__aeabi_dmul+0x49e>
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4e0>)
 8001778:	4454      	add	r4, sl
 800177a:	40a3      	lsls	r3, r4
 800177c:	431a      	orrs	r2, r3
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4332      	orrs	r2, r6
 8001784:	2607      	movs	r6, #7
 8001786:	2700      	movs	r7, #0
 8001788:	4016      	ands	r6, r2
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x4c0>
 800178c:	200f      	movs	r0, #15
 800178e:	2300      	movs	r3, #0
 8001790:	4010      	ands	r0, r2
 8001792:	0014      	movs	r4, r2
 8001794:	2804      	cmp	r0, #4
 8001796:	d1b9      	bne.n	800170c <__aeabi_dmul+0x42c>
 8001798:	0022      	movs	r2, r4
 800179a:	075e      	lsls	r6, r3, #29
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	0b1f      	lsrs	r7, r3, #12
 80017a0:	08d2      	lsrs	r2, r2, #3
 80017a2:	4316      	orrs	r6, r2
 80017a4:	2300      	movs	r3, #0
 80017a6:	e606      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017a8:	2780      	movs	r7, #128	; 0x80
 80017aa:	033f      	lsls	r7, r7, #12
 80017ac:	431f      	orrs	r7, r3
 80017ae:	033f      	lsls	r7, r7, #12
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	4b00      	ldr	r3, [pc, #0]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80017b6:	e5fe      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	0000043e 	.word	0x0000043e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	000c      	movs	r4, r1
 80017d0:	0309      	lsls	r1, r1, #12
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	0a49      	lsrs	r1, r1, #9
 80017d6:	0f46      	lsrs	r6, r0, #29
 80017d8:	005f      	lsls	r7, r3, #1
 80017da:	4331      	orrs	r1, r6
 80017dc:	031e      	lsls	r6, r3, #12
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	0a76      	lsrs	r6, r6, #9
 80017e2:	469b      	mov	fp, r3
 80017e4:	0f53      	lsrs	r3, r2, #29
 80017e6:	4333      	orrs	r3, r6
 80017e8:	4ec8      	ldr	r6, [pc, #800]	; (8001b0c <__aeabi_dsub+0x348>)
 80017ea:	0065      	lsls	r5, r4, #1
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	0fe4      	lsrs	r4, r4, #31
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	0d6d      	lsrs	r5, r5, #21
 80017f4:	46a2      	mov	sl, r4
 80017f6:	4681      	mov	r9, r0
 80017f8:	0d7f      	lsrs	r7, r7, #21
 80017fa:	469c      	mov	ip, r3
 80017fc:	4690      	mov	r8, r2
 80017fe:	42b7      	cmp	r7, r6
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b9      	b.n	8001978 <__aeabi_dsub+0x1b4>
 8001804:	465b      	mov	r3, fp
 8001806:	2601      	movs	r6, #1
 8001808:	4073      	eors	r3, r6
 800180a:	469b      	mov	fp, r3
 800180c:	1bee      	subs	r6, r5, r7
 800180e:	45a3      	cmp	fp, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x50>
 8001812:	e083      	b.n	800191c <__aeabi_dsub+0x158>
 8001814:	2e00      	cmp	r6, #0
 8001816:	dd63      	ble.n	80018e0 <__aeabi_dsub+0x11c>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x5a>
 800181c:	e0b1      	b.n	8001982 <__aeabi_dsub+0x1be>
 800181e:	4663      	mov	r3, ip
 8001820:	4313      	orrs	r3, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e123      	b.n	8001a6e <__aeabi_dsub+0x2aa>
 8001826:	1e73      	subs	r3, r6, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e1ba      	b.n	8001ba4 <__aeabi_dsub+0x3e0>
 800182e:	1a86      	subs	r6, r0, r2
 8001830:	4663      	mov	r3, ip
 8001832:	42b0      	cmp	r0, r6
 8001834:	4180      	sbcs	r0, r0
 8001836:	2501      	movs	r5, #1
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	4240      	negs	r0, r0
 800183c:	1a09      	subs	r1, r1, r0
 800183e:	020b      	lsls	r3, r1, #8
 8001840:	d400      	bmi.n	8001844 <__aeabi_dsub+0x80>
 8001842:	e147      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	0a4b      	lsrs	r3, r1, #9
 8001848:	4698      	mov	r8, r3
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x8e>
 8001850:	e189      	b.n	8001b66 <__aeabi_dsub+0x3a2>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fbbc 	bl	8001fd0 <__clzsi2>
 8001858:	0003      	movs	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd00      	ble.n	8001862 <__aeabi_dsub+0x9e>
 8001860:	e17c      	b.n	8001b5c <__aeabi_dsub+0x398>
 8001862:	2220      	movs	r2, #32
 8001864:	0030      	movs	r0, r6
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	4641      	mov	r1, r8
 800186a:	40d0      	lsrs	r0, r2
 800186c:	4099      	lsls	r1, r3
 800186e:	0002      	movs	r2, r0
 8001870:	409e      	lsls	r6, r3
 8001872:	430a      	orrs	r2, r1
 8001874:	429d      	cmp	r5, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0xb6>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dsub+0x38c>
 800187a:	1b5d      	subs	r5, r3, r5
 800187c:	1c6b      	adds	r3, r5, #1
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xc0>
 8001882:	e194      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001884:	2120      	movs	r1, #32
 8001886:	0010      	movs	r0, r2
 8001888:	0035      	movs	r5, r6
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	408e      	lsls	r6, r1
 800188e:	40da      	lsrs	r2, r3
 8001890:	4088      	lsls	r0, r1
 8001892:	40dd      	lsrs	r5, r3
 8001894:	1e71      	subs	r1, r6, #1
 8001896:	418e      	sbcs	r6, r1
 8001898:	0011      	movs	r1, r2
 800189a:	2207      	movs	r2, #7
 800189c:	4328      	orrs	r0, r5
 800189e:	2500      	movs	r5, #0
 80018a0:	4306      	orrs	r6, r0
 80018a2:	4032      	ands	r2, r6
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d009      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018a8:	230f      	movs	r3, #15
 80018aa:	4033      	ands	r3, r6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	41b6      	sbcs	r6, r6
 80018b6:	4276      	negs	r6, r6
 80018b8:	1989      	adds	r1, r1, r6
 80018ba:	001e      	movs	r6, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xfe>
 80018c0:	e23d      	b.n	8001d3e <__aeabi_dsub+0x57a>
 80018c2:	1c6a      	adds	r2, r5, #1
 80018c4:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <__aeabi_dsub+0x348>)
 80018c6:	0555      	lsls	r5, r2, #21
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x10c>
 80018ce:	e119      	b.n	8001b04 <__aeabi_dsub+0x340>
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <__aeabi_dsub+0x34c>)
 80018d2:	08f6      	lsrs	r6, r6, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	0757      	lsls	r7, r2, #29
 80018d8:	0252      	lsls	r2, r2, #9
 80018da:	4337      	orrs	r7, r6
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	e09b      	b.n	8001a18 <__aeabi_dsub+0x254>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x122>
 80018e4:	e0c5      	b.n	8001a72 <__aeabi_dsub+0x2ae>
 80018e6:	1c6e      	adds	r6, r5, #1
 80018e8:	0576      	lsls	r6, r6, #21
 80018ea:	0d76      	lsrs	r6, r6, #21
 80018ec:	2e01      	cmp	r6, #1
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dsub+0x12e>
 80018f0:	e148      	b.n	8001b84 <__aeabi_dsub+0x3c0>
 80018f2:	4667      	mov	r7, ip
 80018f4:	1a86      	subs	r6, r0, r2
 80018f6:	1bcb      	subs	r3, r1, r7
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	41bf      	sbcs	r7, r7
 80018fc:	427f      	negs	r7, r7
 80018fe:	46b8      	mov	r8, r7
 8001900:	001f      	movs	r7, r3
 8001902:	4643      	mov	r3, r8
 8001904:	1aff      	subs	r7, r7, r3
 8001906:	003b      	movs	r3, r7
 8001908:	46b8      	mov	r8, r7
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d500      	bpl.n	8001910 <__aeabi_dsub+0x14c>
 800190e:	e15f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001910:	4337      	orrs	r7, r6
 8001912:	d19a      	bne.n	800184a <__aeabi_dsub+0x86>
 8001914:	2200      	movs	r2, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e079      	b.n	8001a10 <__aeabi_dsub+0x24c>
 800191c:	2e00      	cmp	r6, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x15e>
 8001920:	e0fa      	b.n	8001b18 <__aeabi_dsub+0x354>
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x164>
 8001926:	e08d      	b.n	8001a44 <__aeabi_dsub+0x280>
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <__aeabi_dsub+0x348>)
 800192a:	429d      	cmp	r5, r3
 800192c:	d067      	beq.n	80019fe <__aeabi_dsub+0x23a>
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	4667      	mov	r7, ip
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431f      	orrs	r7, r3
 8001936:	46bc      	mov	ip, r7
 8001938:	2e38      	cmp	r6, #56	; 0x38
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x17a>
 800193c:	e152      	b.n	8001be4 <__aeabi_dsub+0x420>
 800193e:	4663      	mov	r3, ip
 8001940:	4313      	orrs	r3, r2
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	4193      	sbcs	r3, r2
 8001946:	181e      	adds	r6, r3, r0
 8001948:	4286      	cmp	r6, r0
 800194a:	4180      	sbcs	r0, r0
 800194c:	4240      	negs	r0, r0
 800194e:	1809      	adds	r1, r1, r0
 8001950:	020b      	lsls	r3, r1, #8
 8001952:	d400      	bmi.n	8001956 <__aeabi_dsub+0x192>
 8001954:	e0be      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <__aeabi_dsub+0x348>)
 8001958:	3501      	adds	r5, #1
 800195a:	429d      	cmp	r5, r3
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x19c>
 800195e:	e0d2      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <__aeabi_dsub+0x34c>)
 8001962:	0873      	lsrs	r3, r6, #1
 8001964:	400a      	ands	r2, r1
 8001966:	2101      	movs	r1, #1
 8001968:	400e      	ands	r6, r1
 800196a:	431e      	orrs	r6, r3
 800196c:	0851      	lsrs	r1, r2, #1
 800196e:	07d3      	lsls	r3, r2, #31
 8001970:	2207      	movs	r2, #7
 8001972:	431e      	orrs	r6, r3
 8001974:	4032      	ands	r2, r6
 8001976:	e795      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001978:	001e      	movs	r6, r3
 800197a:	4316      	orrs	r6, r2
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1bc>
 800197e:	e745      	b.n	800180c <__aeabi_dsub+0x48>
 8001980:	e740      	b.n	8001804 <__aeabi_dsub+0x40>
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_dsub+0x348>)
 8001984:	429d      	cmp	r5, r3
 8001986:	d03a      	beq.n	80019fe <__aeabi_dsub+0x23a>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	4667      	mov	r7, ip
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431f      	orrs	r7, r3
 8001990:	46bc      	mov	ip, r7
 8001992:	2e38      	cmp	r6, #56	; 0x38
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e0eb      	b.n	8001b70 <__aeabi_dsub+0x3ac>
 8001998:	2e1f      	cmp	r6, #31
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x1da>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x450>
 800199e:	0033      	movs	r3, r6
 80019a0:	4667      	mov	r7, ip
 80019a2:	3b20      	subs	r3, #32
 80019a4:	40df      	lsrs	r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	2e20      	cmp	r6, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dsub+0x1f4>
 80019ac:	2740      	movs	r7, #64	; 0x40
 80019ae:	1bbf      	subs	r7, r7, r6
 80019b0:	4666      	mov	r6, ip
 80019b2:	40be      	lsls	r6, r7
 80019b4:	4332      	orrs	r2, r6
 80019b6:	4690      	mov	r8, r2
 80019b8:	4646      	mov	r6, r8
 80019ba:	1e72      	subs	r2, r6, #1
 80019bc:	4196      	sbcs	r6, r2
 80019be:	4333      	orrs	r3, r6
 80019c0:	e0da      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x204>
 80019c6:	e214      	b.n	8001df2 <__aeabi_dsub+0x62e>
 80019c8:	4663      	mov	r3, ip
 80019ca:	4313      	orrs	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e168      	b.n	8001ca2 <__aeabi_dsub+0x4de>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	074e      	lsls	r6, r1, #29
 80019d4:	08c0      	lsrs	r0, r0, #3
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4306      	orrs	r6, r0
 80019dc:	4219      	tst	r1, r3
 80019de:	d008      	beq.n	80019f2 <__aeabi_dsub+0x22e>
 80019e0:	4660      	mov	r0, ip
 80019e2:	08c0      	lsrs	r0, r0, #3
 80019e4:	4218      	tst	r0, r3
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dsub+0x22e>
 80019e8:	4663      	mov	r3, ip
 80019ea:	0001      	movs	r1, r0
 80019ec:	08d2      	lsrs	r2, r2, #3
 80019ee:	075e      	lsls	r6, r3, #29
 80019f0:	4316      	orrs	r6, r2
 80019f2:	00f3      	lsls	r3, r6, #3
 80019f4:	4699      	mov	r9, r3
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	4d44      	ldr	r5, [pc, #272]	; (8001b0c <__aeabi_dsub+0x348>)
 80019fc:	4311      	orrs	r1, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	08de      	lsrs	r6, r3, #3
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a04:	074f      	lsls	r7, r1, #29
 8001a06:	4337      	orrs	r7, r6
 8001a08:	08ca      	lsrs	r2, r1, #3
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x24c>
 8001a0e:	e06e      	b.n	8001aee <__aeabi_dsub+0x32a>
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	056d      	lsls	r5, r5, #21
 8001a14:	0b12      	lsrs	r2, r2, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	0b13      	lsrs	r3, r2, #12
 8001a1e:	0d0a      	lsrs	r2, r1, #20
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	431a      	orrs	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <__aeabi_dsub+0x350>)
 8001a26:	052d      	lsls	r5, r5, #20
 8001a28:	4013      	ands	r3, r2
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0038      	movs	r0, r7
 8001a36:	0019      	movs	r1, r3
 8001a38:	bc3c      	pop	{r2, r3, r4, r5}
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	46ab      	mov	fp, r5
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d011      	beq.n	8001a6e <__aeabi_dsub+0x2aa>
 8001a4a:	1e73      	subs	r3, r6, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x28e>
 8001a50:	e107      	b.n	8001c62 <__aeabi_dsub+0x49e>
 8001a52:	1886      	adds	r6, r0, r2
 8001a54:	4286      	cmp	r6, r0
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4461      	add	r1, ip
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1809      	adds	r1, r1, r0
 8001a5e:	2501      	movs	r5, #1
 8001a60:	020b      	lsls	r3, r1, #8
 8001a62:	d537      	bpl.n	8001ad4 <__aeabi_dsub+0x310>
 8001a64:	2502      	movs	r5, #2
 8001a66:	e77b      	b.n	8001960 <__aeabi_dsub+0x19c>
 8001a68:	003e      	movs	r6, r7
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	0035      	movs	r5, r6
 8001a70:	e7c5      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001a72:	465c      	mov	r4, fp
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2b6>
 8001a78:	e0e1      	b.n	8001c3e <__aeabi_dsub+0x47a>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	d0f3      	beq.n	8001a68 <__aeabi_dsub+0x2a4>
 8001a80:	1c73      	adds	r3, r6, #1
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2c2>
 8001a84:	e1ac      	b.n	8001de0 <__aeabi_dsub+0x61c>
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a88:	429f      	cmp	r7, r3
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e13a      	b.n	8001d04 <__aeabi_dsub+0x540>
 8001a8e:	43f3      	mvns	r3, r6
 8001a90:	2b38      	cmp	r3, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x2d2>
 8001a94:	e16f      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x2d8>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_dsub+0x5f2>
 8001a9c:	2520      	movs	r5, #32
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	1aed      	subs	r5, r5, r3
 8001aa2:	40ae      	lsls	r6, r5
 8001aa4:	46b0      	mov	r8, r6
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	46aa      	mov	sl, r5
 8001aaa:	40de      	lsrs	r6, r3
 8001aac:	4645      	mov	r5, r8
 8001aae:	4335      	orrs	r5, r6
 8001ab0:	002e      	movs	r6, r5
 8001ab2:	4655      	mov	r5, sl
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	40a8      	lsls	r0, r5
 8001ab8:	4663      	mov	r3, ip
 8001aba:	1e45      	subs	r5, r0, #1
 8001abc:	41a8      	sbcs	r0, r5
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	1a16      	subs	r6, r2, r0
 8001ac6:	42b2      	cmp	r2, r6
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	4663      	mov	r3, ip
 8001acc:	4252      	negs	r2, r2
 8001ace:	1a99      	subs	r1, r3, r2
 8001ad0:	003d      	movs	r5, r7
 8001ad2:	e6b4      	b.n	800183e <__aeabi_dsub+0x7a>
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4032      	ands	r2, r6
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_dsub+0xe4>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__aeabi_dsub+0x348>)
 8001ae0:	08f6      	lsrs	r6, r6, #3
 8001ae2:	074f      	lsls	r7, r1, #29
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	08ca      	lsrs	r2, r1, #3
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x32a>
 8001aec:	e790      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001aee:	003b      	movs	r3, r7
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x332>
 8001af4:	e1a6      	b.n	8001e44 <__aeabi_dsub+0x680>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	4d02      	ldr	r5, [pc, #8]	; (8001b0c <__aeabi_dsub+0x348>)
 8001b02:	e789      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b04:	0015      	movs	r5, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	e785      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	800fffff 	.word	0x800fffff
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x35a>
 8001b1c:	e0c7      	b.n	8001cae <__aeabi_dsub+0x4ea>
 8001b1e:	1c6b      	adds	r3, r5, #1
 8001b20:	055e      	lsls	r6, r3, #21
 8001b22:	0d76      	lsrs	r6, r6, #21
 8001b24:	2e01      	cmp	r6, #1
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x366>
 8001b28:	e0f0      	b.n	8001d0c <__aeabi_dsub+0x548>
 8001b2a:	4dc8      	ldr	r5, [pc, #800]	; (8001e4c <__aeabi_dsub+0x688>)
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x36e>
 8001b30:	e0b9      	b.n	8001ca6 <__aeabi_dsub+0x4e2>
 8001b32:	1885      	adds	r5, r0, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	4285      	cmp	r5, r0
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	1851      	adds	r1, r2, r1
 8001b40:	2207      	movs	r2, #7
 8001b42:	07ce      	lsls	r6, r1, #31
 8001b44:	086d      	lsrs	r5, r5, #1
 8001b46:	432e      	orrs	r6, r5
 8001b48:	0849      	lsrs	r1, r1, #1
 8001b4a:	4032      	ands	r2, r6
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	e6a9      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b50:	49bf      	ldr	r1, [pc, #764]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001b52:	1aed      	subs	r5, r5, r3
 8001b54:	4011      	ands	r1, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	4032      	ands	r2, r6
 8001b5a:	e6a3      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	3828      	subs	r0, #40	; 0x28
 8001b60:	4082      	lsls	r2, r0
 8001b62:	2600      	movs	r6, #0
 8001b64:	e686      	b.n	8001874 <__aeabi_dsub+0xb0>
 8001b66:	0030      	movs	r0, r6
 8001b68:	f000 fa32 	bl	8001fd0 <__clzsi2>
 8001b6c:	3020      	adds	r0, #32
 8001b6e:	e673      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b70:	4663      	mov	r3, ip
 8001b72:	4313      	orrs	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	4193      	sbcs	r3, r2
 8001b78:	1ac6      	subs	r6, r0, r3
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	e65c      	b.n	800183e <__aeabi_dsub+0x7a>
 8001b84:	000e      	movs	r6, r1
 8001b86:	4667      	mov	r7, ip
 8001b88:	4306      	orrs	r6, r0
 8001b8a:	4317      	orrs	r7, r2
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d15e      	bne.n	8001c4e <__aeabi_dsub+0x48a>
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3d2>
 8001b94:	e0f3      	b.n	8001d7e <__aeabi_dsub+0x5ba>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x3d8>
 8001b9a:	e11e      	b.n	8001dda <__aeabi_dsub+0x616>
 8001b9c:	465c      	mov	r4, fp
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	e72c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ba4:	4fa9      	ldr	r7, [pc, #676]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ba6:	42be      	cmp	r6, r7
 8001ba8:	d07b      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001baa:	001e      	movs	r6, r3
 8001bac:	e6f1      	b.n	8001992 <__aeabi_dsub+0x1ce>
 8001bae:	0010      	movs	r0, r2
 8001bb0:	3d1f      	subs	r5, #31
 8001bb2:	40e8      	lsrs	r0, r5
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4316      	orrs	r6, r2
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	419e      	sbcs	r6, r3
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4032      	ands	r2, r6
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e783      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd0:	1a16      	subs	r6, r2, r0
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	42b2      	cmp	r2, r6
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	1a59      	subs	r1, r3, r1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1a0b      	subs	r3, r1, r0
 8001bde:	4698      	mov	r8, r3
 8001be0:	465c      	mov	r4, fp
 8001be2:	e632      	b.n	800184a <__aeabi_dsub+0x86>
 8001be4:	2e1f      	cmp	r6, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0ab      	b.n	8001d42 <__aeabi_dsub+0x57e>
 8001bea:	2720      	movs	r7, #32
 8001bec:	1bbb      	subs	r3, r7, r6
 8001bee:	469a      	mov	sl, r3
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	40bb      	lsls	r3, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	464f      	mov	r7, r9
 8001bfc:	40f3      	lsrs	r3, r6
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	4657      	mov	r7, sl
 8001c04:	40ba      	lsls	r2, r7
 8001c06:	1e57      	subs	r7, r2, #1
 8001c08:	41ba      	sbcs	r2, r7
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4662      	mov	r2, ip
 8001c0e:	40f2      	lsrs	r2, r6
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	e698      	b.n	8001946 <__aeabi_dsub+0x182>
 8001c14:	2720      	movs	r7, #32
 8001c16:	1bbb      	subs	r3, r7, r6
 8001c18:	469a      	mov	sl, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	40bb      	lsls	r3, r7
 8001c20:	4699      	mov	r9, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	464f      	mov	r7, r9
 8001c26:	40f3      	lsrs	r3, r6
 8001c28:	431f      	orrs	r7, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4657      	mov	r7, sl
 8001c2e:	40ba      	lsls	r2, r7
 8001c30:	1e57      	subs	r7, r2, #1
 8001c32:	41ba      	sbcs	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4662      	mov	r2, ip
 8001c38:	40f2      	lsrs	r2, r6
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	e79c      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d05f      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001c44:	2580      	movs	r5, #128	; 0x80
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	e720      	b.n	8001a90 <__aeabi_dsub+0x2cc>
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x494>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_dsub+0x636>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	4d7b      	ldr	r5, [pc, #492]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c60:	e6cd      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001c62:	4f7a      	ldr	r7, [pc, #488]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c64:	42be      	cmp	r6, r7
 8001c66:	d01c      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e665      	b.n	8001938 <__aeabi_dsub+0x174>
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d018      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	074e      	lsls	r6, r1, #29
 8001c74:	4306      	orrs	r6, r0
 8001c76:	2080      	movs	r0, #128	; 0x80
 8001c78:	08c9      	lsrs	r1, r1, #3
 8001c7a:	0300      	lsls	r0, r0, #12
 8001c7c:	4201      	tst	r1, r0
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c80:	4663      	mov	r3, ip
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	4204      	tst	r4, r0
 8001c86:	d104      	bne.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c88:	0021      	movs	r1, r4
 8001c8a:	46da      	mov	sl, fp
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	075e      	lsls	r6, r3, #29
 8001c90:	4316      	orrs	r6, r2
 8001c92:	00f3      	lsls	r3, r6, #3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2401      	movs	r4, #1
 8001c98:	4653      	mov	r3, sl
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	4d6a      	ldr	r5, [pc, #424]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ca4:	e6ab      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2700      	movs	r7, #0
 8001cac:	e6b4      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d159      	bne.n	8001d66 <__aeabi_dsub+0x5a2>
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x4f6>
 8001cb8:	e6d6      	b.n	8001a68 <__aeabi_dsub+0x2a4>
 8001cba:	1c73      	adds	r3, r6, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4fc>
 8001cbe:	e0b2      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <__aeabi_dsub+0x688>)
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	d01e      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001cc6:	43f3      	mvns	r3, r6
 8001cc8:	2b38      	cmp	r3, #56	; 0x38
 8001cca:	dc6f      	bgt.n	8001dac <__aeabi_dsub+0x5e8>
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e097      	b.n	8001e02 <__aeabi_dsub+0x63e>
 8001cd2:	2520      	movs	r5, #32
 8001cd4:	000e      	movs	r6, r1
 8001cd6:	1aed      	subs	r5, r5, r3
 8001cd8:	40ae      	lsls	r6, r5
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0006      	movs	r6, r0
 8001cde:	46aa      	mov	sl, r5
 8001ce0:	40de      	lsrs	r6, r3
 8001ce2:	4645      	mov	r5, r8
 8001ce4:	4335      	orrs	r5, r6
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	4655      	mov	r5, sl
 8001cea:	40a8      	lsls	r0, r5
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	1e45      	subs	r5, r0, #1
 8001cf0:	41a8      	sbcs	r0, r5
 8001cf2:	448c      	add	ip, r1
 8001cf4:	4306      	orrs	r6, r0
 8001cf6:	18b6      	adds	r6, r6, r2
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4251      	negs	r1, r2
 8001cfe:	4461      	add	r1, ip
 8001d00:	003d      	movs	r5, r7
 8001d02:	e625      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001d04:	003d      	movs	r5, r7
 8001d06:	4661      	mov	r1, ip
 8001d08:	4691      	mov	r9, r2
 8001d0a:	e678      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x552>
 8001d14:	e655      	b.n	80019c2 <__aeabi_dsub+0x1fe>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <__aeabi_dsub+0x542>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x55e>
 8001d20:	e66d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d22:	1886      	adds	r6, r0, r2
 8001d24:	4286      	cmp	r6, r0
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	4461      	add	r1, ip
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1809      	adds	r1, r1, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	020b      	lsls	r3, r1, #8
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dsub+0x572>
 8001d34:	e6d0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001d38:	3501      	adds	r5, #1
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	e5b2      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001d3e:	46b1      	mov	r9, r6
 8001d40:	e65d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d42:	0033      	movs	r3, r6
 8001d44:	4667      	mov	r7, ip
 8001d46:	3b20      	subs	r3, #32
 8001d48:	40df      	lsrs	r7, r3
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2e20      	cmp	r6, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dsub+0x598>
 8001d50:	2740      	movs	r7, #64	; 0x40
 8001d52:	1bbf      	subs	r7, r7, r6
 8001d54:	4666      	mov	r6, ip
 8001d56:	40be      	lsls	r6, r7
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4646      	mov	r6, r8
 8001d5e:	1e72      	subs	r2, r6, #1
 8001d60:	4196      	sbcs	r6, r2
 8001d62:	4333      	orrs	r3, r6
 8001d64:	e5ef      	b.n	8001946 <__aeabi_dsub+0x182>
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <__aeabi_dsub+0x688>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d0cb      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001d6c:	2580      	movs	r5, #128	; 0x80
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	4273      	negs	r3, r6
 8001d72:	4329      	orrs	r1, r5
 8001d74:	e7a8      	b.n	8001cc8 <__aeabi_dsub+0x504>
 8001d76:	4308      	orrs	r0, r1
 8001d78:	1e41      	subs	r1, r0, #1
 8001d7a:	4188      	sbcs	r0, r1
 8001d7c:	e6a2      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x5c0>
 8001d82:	e63c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d84:	4663      	mov	r3, ip
 8001d86:	1a86      	subs	r6, r0, r2
 8001d88:	1acf      	subs	r7, r1, r3
 8001d8a:	42b0      	cmp	r0, r6
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	425b      	negs	r3, r3
 8001d90:	1afb      	subs	r3, r7, r3
 8001d92:	4698      	mov	r8, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	d54e      	bpl.n	8001e36 <__aeabi_dsub+0x672>
 8001d98:	1a16      	subs	r6, r2, r0
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	1a59      	subs	r1, r3, r1
 8001da2:	4252      	negs	r2, r2
 8001da4:	1a89      	subs	r1, r1, r2
 8001da6:	465c      	mov	r4, fp
 8001da8:	2200      	movs	r2, #0
 8001daa:	e57b      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001dac:	4301      	orrs	r1, r0
 8001dae:	000e      	movs	r6, r1
 8001db0:	1e71      	subs	r1, r6, #1
 8001db2:	418e      	sbcs	r6, r1
 8001db4:	e79f      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001db6:	001d      	movs	r5, r3
 8001db8:	000e      	movs	r6, r1
 8001dba:	3d20      	subs	r5, #32
 8001dbc:	40ee      	lsrs	r6, r5
 8001dbe:	46b0      	mov	r8, r6
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d004      	beq.n	8001dce <__aeabi_dsub+0x60a>
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	4099      	lsls	r1, r3
 8001dca:	4308      	orrs	r0, r1
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4648      	mov	r0, r9
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	1e41      	subs	r1, r0, #1
 8001dd4:	4188      	sbcs	r0, r1
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	e674      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e617      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001de0:	1a16      	subs	r6, r2, r0
 8001de2:	4663      	mov	r3, ip
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	1a59      	subs	r1, r3, r1
 8001dea:	4252      	negs	r2, r2
 8001dec:	1a89      	subs	r1, r1, r2
 8001dee:	003d      	movs	r5, r7
 8001df0:	e525      	b.n	800183e <__aeabi_dsub+0x7a>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4691      	mov	r9, r2
 8001df6:	4d15      	ldr	r5, [pc, #84]	; (8001e4c <__aeabi_dsub+0x688>)
 8001df8:	e601      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	e679      	b.n	8001af6 <__aeabi_dsub+0x332>
 8001e02:	001d      	movs	r5, r3
 8001e04:	000e      	movs	r6, r1
 8001e06:	3d20      	subs	r5, #32
 8001e08:	40ee      	lsrs	r6, r5
 8001e0a:	46b0      	mov	r8, r6
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <__aeabi_dsub+0x656>
 8001e10:	2540      	movs	r5, #64	; 0x40
 8001e12:	1aeb      	subs	r3, r5, r3
 8001e14:	4099      	lsls	r1, r3
 8001e16:	4308      	orrs	r0, r1
 8001e18:	4681      	mov	r9, r0
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	1e71      	subs	r1, r6, #1
 8001e20:	418e      	sbcs	r6, r1
 8001e22:	431e      	orrs	r6, r3
 8001e24:	e767      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001e26:	1886      	adds	r6, r0, r2
 8001e28:	4296      	cmp	r6, r2
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18c9      	adds	r1, r1, r3
 8001e32:	003d      	movs	r5, r7
 8001e34:	e58c      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001e36:	4647      	mov	r7, r8
 8001e38:	4337      	orrs	r7, r6
 8001e3a:	d0ce      	beq.n	8001dda <__aeabi_dsub+0x616>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4641      	mov	r1, r8
 8001e40:	4032      	ands	r2, r6
 8001e42:	e649      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e44:	2700      	movs	r7, #0
 8001e46:	003a      	movs	r2, r7
 8001e48:	e5e6      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff

08001e54 <__aeabi_dcmpun>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0c      	ldr	r6, [pc, #48]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e58:	030d      	lsls	r5, r1, #12
 8001e5a:	031c      	lsls	r4, r3, #12
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	0b2d      	lsrs	r5, r5, #12
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	42b1      	cmp	r1, r6
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dcmpun+0x2a>
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d103      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0020      	movs	r0, r4
 8001e78:	1e44      	subs	r4, r0, #1
 8001e7a:	41a0      	sbcs	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	4305      	orrs	r5, r0
 8001e80:	2001      	movs	r0, #1
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1fa      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e86:	e7f1      	b.n	8001e6c <__aeabi_dcmpun+0x18>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f862 	bl	8001fd0 <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f82d 	bl	8001fd0 <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__clzsi2>:
 8001fd0:	211c      	movs	r1, #28
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d301      	bcc.n	8001fde <__clzsi2+0xe>
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	3910      	subs	r1, #16
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d301      	bcc.n	8001fe8 <__clzsi2+0x18>
 8001fe4:	0a00      	lsrs	r0, r0, #8
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d301      	bcc.n	8001ff2 <__clzsi2+0x22>
 8001fee:	0900      	lsrs	r0, r0, #4
 8001ff0:	3904      	subs	r1, #4
 8001ff2:	a202      	add	r2, pc, #8	; (adr r2, 8001ffc <__clzsi2+0x2c>)
 8001ff4:	5c10      	ldrb	r0, [r2, r0]
 8001ff6:	1840      	adds	r0, r0, r1
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	02020304 	.word	0x02020304
 8002000:	01010101 	.word	0x01010101
	...

0800200c <init>:

/**
 *    @brief  init function
 *    @return True if initialization was successful, otherwise false.
 */
bool init() {
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0

  if (read16(MCP9808_REG_MANUF_ID) != 0x0054)
 8002010:	2006      	movs	r0, #6
 8002012:	f000 f865 	bl	80020e0 <read16>
 8002016:	0003      	movs	r3, r0
 8002018:	2b54      	cmp	r3, #84	; 0x54
 800201a:	d001      	beq.n	8002020 <init+0x14>
    return false;
 800201c:	2300      	movs	r3, #0
 800201e:	e00f      	b.n	8002040 <init+0x34>
  if (read16(MCP9808_REG_DEVICE_ID) != 0x0400)
 8002020:	2007      	movs	r0, #7
 8002022:	f000 f85d 	bl	80020e0 <read16>
 8002026:	0003      	movs	r3, r0
 8002028:	001a      	movs	r2, r3
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <init+0x2a>
    return false;
 8002032:	2300      	movs	r3, #0
 8002034:	e004      	b.n	8002040 <init+0x34>
  write16(MCP9808_REG_CONFIG, 0x0);
 8002036:	2100      	movs	r1, #0
 8002038:	2001      	movs	r0, #1
 800203a:	f000 f835 	bl	80020a8 <write16>
  return true;
 800203e:	2301      	movs	r3, #1
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <setResolution>:

/**
 *   @brief  Set Resolution Value
 *   @param  value
 */
void setResolution(uint8_t value){
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	0002      	movs	r2, r0
 800204e:	1dfb      	adds	r3, r7, #7
 8002050:	701a      	strb	r2, [r3, #0]
  write8(MCP9808_REG_RESOLUTION, value & 0x03); //why & 0x03
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2203      	movs	r2, #3
 8002058:	4013      	ands	r3, r2
 800205a:	b2db      	uxtb	r3, r3
 800205c:	0019      	movs	r1, r3
 800205e:	2008      	movs	r0, #8
 8002060:	f000 f804 	bl	800206c <write8>
}
 8002064:	46c0      	nop			; (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}

0800206c <write8>:
/**
 *    @brief  Low level 8 bit write procedure
 *    @param  reg
 *    @param  value
 */
void write8(uint8_t reg, uint8_t value){
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af04      	add	r7, sp, #16
 8002072:	0002      	movs	r2, r0
 8002074:	1dfb      	adds	r3, r7, #7
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	1dbb      	adds	r3, r7, #6
 800207a:	1c0a      	adds	r2, r1, #0
 800207c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MCP9808_I2CADDR_DEFAULT, reg, 1, &value, 1, 10);
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b29a      	uxth	r2, r3
 8002084:	4807      	ldr	r0, [pc, #28]	; (80020a4 <write8+0x38>)
 8002086:	230a      	movs	r3, #10
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	2301      	movs	r3, #1
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	1dbb      	adds	r3, r7, #6
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2301      	movs	r3, #1
 8002094:	2130      	movs	r1, #48	; 0x30
 8002096:	f001 feb1 	bl	8003dfc <HAL_I2C_Mem_Write>
}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b002      	add	sp, #8
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	20000434 	.word	0x20000434

080020a8 <write16>:
/**
 *    @brief  Low level 16 bit write procedure
 *    @param  reg
 *    @param  data
 */
void write16(uint8_t reg, uint8_t *data){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af04      	add	r7, sp, #16
 80020ae:	0002      	movs	r2, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MCP9808_I2CADDR_DEFAULT, reg, 1, data, 2, 10);
 80020b6:	1dfb      	adds	r3, r7, #7
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	4807      	ldr	r0, [pc, #28]	; (80020dc <write16+0x34>)
 80020be:	230a      	movs	r3, #10
 80020c0:	9302      	str	r3, [sp, #8]
 80020c2:	2302      	movs	r3, #2
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2301      	movs	r3, #1
 80020cc:	2130      	movs	r1, #48	; 0x30
 80020ce:	f001 fe95 	bl	8003dfc <HAL_I2C_Mem_Write>
}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	20000434 	.word	0x20000434

080020e0 <read16>:
/**
 *    @brief  Low level 16 bit read procedure
 *    @param  reg
 *    @return result
 */
uint16_t read16(uint8_t reg){	
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af04      	add	r7, sp, #16
 80020e6:	0002      	movs	r2, r0
 80020e8:	1dfb      	adds	r3, r7, #7
 80020ea:	701a      	strb	r2, [r3, #0]
		uint16_t result;
		if(HAL_I2C_Mem_Read(&hi2c1, MCP9808_I2CADDR_DEFAULT, reg, 1, buff16, 2, 10) == HAL_OK){
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	4810      	ldr	r0, [pc, #64]	; (8002134 <read16+0x54>)
 80020f4:	230a      	movs	r3, #10
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	2302      	movs	r3, #2
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <read16+0x58>)
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	2130      	movs	r1, #48	; 0x30
 8002104:	f001 ffa8 	bl	8004058 <HAL_I2C_Mem_Read>
 8002108:	1e03      	subs	r3, r0, #0
 800210a:	d10e      	bne.n	800212a <read16+0x4a>
			result = (buff16[0]<<8) | buff16[1];
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <read16+0x58>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	b21a      	sxth	r2, r3
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <read16+0x58>)
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	b21b      	sxth	r3, r3
 800211a:	4313      	orrs	r3, r2
 800211c:	b21a      	sxth	r2, r3
 800211e:	210e      	movs	r1, #14
 8002120:	187b      	adds	r3, r7, r1
 8002122:	801a      	strh	r2, [r3, #0]
			return result;
 8002124:	187b      	adds	r3, r7, r1
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	e000      	b.n	800212c <read16+0x4c>
		}
		else{
			return 0;
 800212a:	2300      	movs	r3, #0
		}
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b004      	add	sp, #16
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000434 	.word	0x20000434
 8002138:	20000424 	.word	0x20000424

0800213c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002140:	f000 ffb0 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002144:	f000 f84c 	bl	80021e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002148:	f000 fa82 	bl	8002650 <MX_GPIO_Init>
  MX_ADC_Init();
 800214c:	f000 f8a2 	bl	8002294 <MX_ADC_Init>
  MX_I2C1_Init();
 8002150:	f000 f908 	bl	8002364 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002154:	f000 f946 	bl	80023e4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002158:	f000 fa1a 	bl	8002590 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800215c:	f000 fa48 	bl	80025f0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002160:	f000 f996 	bl	8002490 <MX_TIM3_Init>
	}
*/

		/* Inits ------------------------------------------------------------------*/

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <main+0x88>)
 8002166:	2100      	movs	r1, #0
 8002168:	0018      	movs	r0, r3
 800216a:	f003 f91b 	bl	80053a4 <HAL_TIM_PWM_Start>
	//HAL_ADC_Start(&hadc);
	HAL_ADC_Start_IT(&hadc);
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <main+0x8c>)
 8002170:	0018      	movs	r0, r3
 8002172:	f001 f95d 	bl	8003430 <HAL_ADC_Start_IT>
	init(); 				//MCP9808 initialization
 8002176:	f7ff ff49 	bl	800200c <init>
  ssd1306_Init(); //OLED1203 initialization
 800217a:	f000 fb61 	bl	8002840 <ssd1306_Init>



	setResolution(3); // sets the resolution mode of reading, the modes are defined in the table bellow:
 800217e:	2003      	movs	r0, #3
 8002180:	f7ff ff61 	bl	8002046 <setResolution>
  // Mode Resolution SampleTime
  //  0    0.5°C       30 ms
  //  1    0.25°C      65 ms
  //  2    0.125°C     130 ms
  //  3    0.0625°C    250 ms
	current = 30;
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <main+0x90>)
 8002186:	221e      	movs	r2, #30
 8002188:	601a      	str	r2, [r3, #0]
	ssd1306_Fill(Black);
 800218a:	2000      	movs	r0, #0
 800218c:	f000 fbc6 	bl	800291c <ssd1306_Fill>
	ssd1306_SetCursor(2, 7);
 8002190:	2107      	movs	r1, #7
 8002192:	2002      	movs	r0, #2
 8002194:	f000 fd46 	bl	8002c24 <ssd1306_SetCursor>
	ssd1306_WriteString("Hello", Font_11x18, White);
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <main+0x94>)
 800219a:	480e      	ldr	r0, [pc, #56]	; (80021d4 <main+0x98>)
 800219c:	2301      	movs	r3, #1
 800219e:	6811      	ldr	r1, [r2, #0]
 80021a0:	6852      	ldr	r2, [r2, #4]
 80021a2:	f000 fd15 	bl	8002bd0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80021a6:	f000 fbdd 	bl	8002964 <ssd1306_UpdateScreen>


	HAL_Delay(250);

*/
	  HAL_GPIO_WritePin(NEW_LED_GPIO_Port, NEW_LED_Pin,deneme);
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <main+0x9c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	480a      	ldr	r0, [pc, #40]	; (80021dc <main+0xa0>)
 80021b2:	001a      	movs	r2, r3
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	f001 fd6d 	bl	8003c94 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 80021ba:	20fa      	movs	r0, #250	; 0xfa
 80021bc:	f000 ffd6 	bl	800316c <HAL_Delay>
	  HAL_GPIO_WritePin(NEW_LED_GPIO_Port, NEW_LED_Pin,deneme);
 80021c0:	e7f3      	b.n	80021aa <main+0x6e>
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	20000480 	.word	0x20000480
 80021c8:	20000610 	.word	0x20000610
 80021cc:	20000200 	.word	0x20000200
 80021d0:	20000000 	.word	0x20000000
 80021d4:	080082b8 	.word	0x080082b8
 80021d8:	20000204 	.word	0x20000204
 80021dc:	48001400 	.word	0x48001400

080021e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b095      	sub	sp, #84	; 0x54
 80021e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021e6:	2420      	movs	r4, #32
 80021e8:	193b      	adds	r3, r7, r4
 80021ea:	0018      	movs	r0, r3
 80021ec:	2330      	movs	r3, #48	; 0x30
 80021ee:	001a      	movs	r2, r3
 80021f0:	2100      	movs	r1, #0
 80021f2:	f004 faeb 	bl	80067cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021f6:	2310      	movs	r3, #16
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	0018      	movs	r0, r3
 80021fc:	2310      	movs	r3, #16
 80021fe:	001a      	movs	r2, r3
 8002200:	2100      	movs	r1, #0
 8002202:	f004 fae3 	bl	80067cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002206:	003b      	movs	r3, r7
 8002208:	0018      	movs	r0, r3
 800220a:	2310      	movs	r3, #16
 800220c:	001a      	movs	r2, r3
 800220e:	2100      	movs	r1, #0
 8002210:	f004 fadc 	bl	80067cc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002214:	0021      	movs	r1, r4
 8002216:	187b      	adds	r3, r7, r1
 8002218:	2202      	movs	r2, #2
 800221a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800221c:	187b      	adds	r3, r7, r1
 800221e:	2201      	movs	r2, #1
 8002220:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002222:	187b      	adds	r3, r7, r1
 8002224:	2210      	movs	r2, #16
 8002226:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002228:	187b      	adds	r3, r7, r1
 800222a:	2200      	movs	r2, #0
 800222c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800222e:	187b      	adds	r3, r7, r1
 8002230:	0018      	movs	r0, r3
 8002232:	f002 fb1b 	bl	800486c <HAL_RCC_OscConfig>
 8002236:	1e03      	subs	r3, r0, #0
 8002238:	d001      	beq.n	800223e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800223a:	f000 fac3 	bl	80027c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223e:	2110      	movs	r1, #16
 8002240:	187b      	adds	r3, r7, r1
 8002242:	2207      	movs	r2, #7
 8002244:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002246:	187b      	adds	r3, r7, r1
 8002248:	2200      	movs	r2, #0
 800224a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224c:	187b      	adds	r3, r7, r1
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002252:	187b      	adds	r3, r7, r1
 8002254:	2200      	movs	r2, #0
 8002256:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002258:	187b      	adds	r3, r7, r1
 800225a:	2100      	movs	r1, #0
 800225c:	0018      	movs	r0, r3
 800225e:	f002 fe21 	bl	8004ea4 <HAL_RCC_ClockConfig>
 8002262:	1e03      	subs	r3, r0, #0
 8002264:	d001      	beq.n	800226a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002266:	f000 faad 	bl	80027c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800226a:	003b      	movs	r3, r7
 800226c:	2221      	movs	r2, #33	; 0x21
 800226e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002270:	003b      	movs	r3, r7
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002276:	003b      	movs	r3, r7
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800227c:	003b      	movs	r3, r7
 800227e:	0018      	movs	r0, r3
 8002280:	f002 ff62 	bl	8005148 <HAL_RCCEx_PeriphCLKConfig>
 8002284:	1e03      	subs	r3, r0, #0
 8002286:	d001      	beq.n	800228c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002288:	f000 fa9c 	bl	80027c4 <Error_Handler>
  }
}
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b015      	add	sp, #84	; 0x54
 8002292:	bd90      	pop	{r4, r7, pc}

08002294 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	0018      	movs	r0, r3
 800229e:	230c      	movs	r3, #12
 80022a0:	001a      	movs	r2, r3
 80022a2:	2100      	movs	r1, #0
 80022a4:	f004 fa92 	bl	80067cc <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80022a8:	4b2c      	ldr	r3, [pc, #176]	; (800235c <MX_ADC_Init+0xc8>)
 80022aa:	4a2d      	ldr	r2, [pc, #180]	; (8002360 <MX_ADC_Init+0xcc>)
 80022ac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022ae:	4b2b      	ldr	r3, [pc, #172]	; (800235c <MX_ADC_Init+0xc8>)
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	0612      	lsls	r2, r2, #24
 80022b4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 80022b6:	4b29      	ldr	r3, [pc, #164]	; (800235c <MX_ADC_Init+0xc8>)
 80022b8:	2210      	movs	r2, #16
 80022ba:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <MX_ADC_Init+0xc8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80022c2:	4b26      	ldr	r3, [pc, #152]	; (800235c <MX_ADC_Init+0xc8>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022c8:	4b24      	ldr	r3, [pc, #144]	; (800235c <MX_ADC_Init+0xc8>)
 80022ca:	2204      	movs	r2, #4
 80022cc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80022ce:	4b23      	ldr	r3, [pc, #140]	; (800235c <MX_ADC_Init+0xc8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <MX_ADC_Init+0xc8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <MX_ADC_Init+0xc8>)
 80022dc:	2201      	movs	r2, #1
 80022de:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <MX_ADC_Init+0xc8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <MX_ADC_Init+0xc8>)
 80022e8:	22c2      	movs	r2, #194	; 0xc2
 80022ea:	32ff      	adds	r2, #255	; 0xff
 80022ec:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <MX_ADC_Init+0xc8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <MX_ADC_Init+0xc8>)
 80022f6:	2224      	movs	r2, #36	; 0x24
 80022f8:	2100      	movs	r1, #0
 80022fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <MX_ADC_Init+0xc8>)
 80022fe:	2201      	movs	r2, #1
 8002300:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <MX_ADC_Init+0xc8>)
 8002304:	0018      	movs	r0, r3
 8002306:	f000 ff53 	bl	80031b0 <HAL_ADC_Init>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 800230e:	f000 fa59 	bl	80027c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	0152      	lsls	r2, r2, #5
 800231e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	2207      	movs	r2, #7
 8002324:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002326:	1d3a      	adds	r2, r7, #4
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <MX_ADC_Init+0xc8>)
 800232a:	0011      	movs	r1, r2
 800232c:	0018      	movs	r0, r3
 800232e:	f001 f8f1 	bl	8003514 <HAL_ADC_ConfigChannel>
 8002332:	1e03      	subs	r3, r0, #0
 8002334:	d001      	beq.n	800233a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002336:	f000 fa45 	bl	80027c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2204      	movs	r2, #4
 800233e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002340:	1d3a      	adds	r2, r7, #4
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <MX_ADC_Init+0xc8>)
 8002344:	0011      	movs	r1, r2
 8002346:	0018      	movs	r0, r3
 8002348:	f001 f8e4 	bl	8003514 <HAL_ADC_ConfigChannel>
 800234c:	1e03      	subs	r3, r0, #0
 800234e:	d001      	beq.n	8002354 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002350:	f000 fa38 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b004      	add	sp, #16
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000610 	.word	0x20000610
 8002360:	40012400 	.word	0x40012400

08002364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <MX_I2C1_Init+0x74>)
 800236a:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <MX_I2C1_Init+0x78>)
 800236c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800236e:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <MX_I2C1_Init+0x74>)
 8002370:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <MX_I2C1_Init+0x7c>)
 8002372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002374:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <MX_I2C1_Init+0x74>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <MX_I2C1_Init+0x74>)
 800237c:	2201      	movs	r2, #1
 800237e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <MX_I2C1_Init+0x74>)
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <MX_I2C1_Init+0x74>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <MX_I2C1_Init+0x74>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_I2C1_Init+0x74>)
 8002394:	2200      	movs	r2, #0
 8002396:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <MX_I2C1_Init+0x74>)
 800239a:	2200      	movs	r2, #0
 800239c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_I2C1_Init+0x74>)
 80023a0:	0018      	movs	r0, r3
 80023a2:	f001 fc95 	bl	8003cd0 <HAL_I2C_Init>
 80023a6:	1e03      	subs	r3, r0, #0
 80023a8:	d001      	beq.n	80023ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023aa:	f000 fa0b 	bl	80027c4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <MX_I2C1_Init+0x74>)
 80023b0:	2100      	movs	r1, #0
 80023b2:	0018      	movs	r0, r3
 80023b4:	f002 f9c2 	bl	800473c <HAL_I2CEx_ConfigAnalogFilter>
 80023b8:	1e03      	subs	r3, r0, #0
 80023ba:	d001      	beq.n	80023c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80023bc:	f000 fa02 	bl	80027c4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <MX_I2C1_Init+0x74>)
 80023c2:	2100      	movs	r1, #0
 80023c4:	0018      	movs	r0, r3
 80023c6:	f002 fa05 	bl	80047d4 <HAL_I2CEx_ConfigDigitalFilter>
 80023ca:	1e03      	subs	r3, r0, #0
 80023cc:	d001      	beq.n	80023d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80023ce:	f000 f9f9 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000434 	.word	0x20000434
 80023dc:	40005400 	.word	0x40005400
 80023e0:	2000090e 	.word	0x2000090e

080023e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ea:	2308      	movs	r3, #8
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	0018      	movs	r0, r3
 80023f0:	2310      	movs	r3, #16
 80023f2:	001a      	movs	r2, r3
 80023f4:	2100      	movs	r1, #0
 80023f6:	f004 f9e9 	bl	80067cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fa:	003b      	movs	r3, r7
 80023fc:	0018      	movs	r0, r3
 80023fe:	2308      	movs	r3, #8
 8002400:	001a      	movs	r2, r3
 8002402:	2100      	movs	r1, #0
 8002404:	f004 f9e2 	bl	80067cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002408:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <MX_TIM1_Init+0xa4>)
 800240a:	4a20      	ldr	r2, [pc, #128]	; (800248c <MX_TIM1_Init+0xa8>)
 800240c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <MX_TIM1_Init+0xa4>)
 8002410:	2200      	movs	r2, #0
 8002412:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002414:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <MX_TIM1_Init+0xa4>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <MX_TIM1_Init+0xa4>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <MX_TIM1_Init+0xa4>)
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <MX_TIM1_Init+0xa4>)
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <MX_TIM1_Init+0xa4>)
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <MX_TIM1_Init+0xa4>)
 8002434:	0018      	movs	r0, r3
 8002436:	f002 ff55 	bl	80052e4 <HAL_TIM_Base_Init>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800243e:	f000 f9c1 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002442:	2108      	movs	r1, #8
 8002444:	187b      	adds	r3, r7, r1
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	0152      	lsls	r2, r2, #5
 800244a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800244c:	187a      	adds	r2, r7, r1
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <MX_TIM1_Init+0xa4>)
 8002450:	0011      	movs	r1, r2
 8002452:	0018      	movs	r0, r3
 8002454:	f003 f9c0 	bl	80057d8 <HAL_TIM_ConfigClockSource>
 8002458:	1e03      	subs	r3, r0, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800245c:	f000 f9b2 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002460:	003b      	movs	r3, r7
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002466:	003b      	movs	r3, r7
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800246c:	003a      	movs	r2, r7
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <MX_TIM1_Init+0xa4>)
 8002470:	0011      	movs	r1, r2
 8002472:	0018      	movs	r0, r3
 8002474:	f003 fdc6 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 8002478:	1e03      	subs	r3, r0, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800247c:	f000 f9a2 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b006      	add	sp, #24
 8002486:	bd80      	pop	{r7, pc}
 8002488:	2000054c 	.word	0x2000054c
 800248c:	40012c00 	.word	0x40012c00

08002490 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08e      	sub	sp, #56	; 0x38
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	2328      	movs	r3, #40	; 0x28
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	0018      	movs	r0, r3
 800249c:	2310      	movs	r3, #16
 800249e:	001a      	movs	r2, r3
 80024a0:	2100      	movs	r1, #0
 80024a2:	f004 f993 	bl	80067cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a6:	2320      	movs	r3, #32
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	0018      	movs	r0, r3
 80024ac:	2308      	movs	r3, #8
 80024ae:	001a      	movs	r2, r3
 80024b0:	2100      	movs	r1, #0
 80024b2:	f004 f98b 	bl	80067cc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	0018      	movs	r0, r3
 80024ba:	231c      	movs	r3, #28
 80024bc:	001a      	movs	r2, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	f004 f984 	bl	80067cc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024c4:	4b30      	ldr	r3, [pc, #192]	; (8002588 <MX_TIM3_Init+0xf8>)
 80024c6:	4a31      	ldr	r2, [pc, #196]	; (800258c <MX_TIM3_Init+0xfc>)
 80024c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 80024ca:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <MX_TIM3_Init+0xf8>)
 80024cc:	2208      	movs	r2, #8
 80024ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d0:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <MX_TIM3_Init+0xf8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <MX_TIM3_Init+0xf8>)
 80024d8:	22fa      	movs	r2, #250	; 0xfa
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024de:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <MX_TIM3_Init+0xf8>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <MX_TIM3_Init+0xf8>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024ea:	4b27      	ldr	r3, [pc, #156]	; (8002588 <MX_TIM3_Init+0xf8>)
 80024ec:	0018      	movs	r0, r3
 80024ee:	f002 fef9 	bl	80052e4 <HAL_TIM_Base_Init>
 80024f2:	1e03      	subs	r3, r0, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80024f6:	f000 f965 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024fa:	2128      	movs	r1, #40	; 0x28
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0152      	lsls	r2, r2, #5
 8002502:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002504:	187a      	adds	r2, r7, r1
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <MX_TIM3_Init+0xf8>)
 8002508:	0011      	movs	r1, r2
 800250a:	0018      	movs	r0, r3
 800250c:	f003 f964 	bl	80057d8 <HAL_TIM_ConfigClockSource>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002514:	f000 f956 	bl	80027c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <MX_TIM3_Init+0xf8>)
 800251a:	0018      	movs	r0, r3
 800251c:	f002 ff0e 	bl	800533c <HAL_TIM_PWM_Init>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002524:	f000 f94e 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002528:	2120      	movs	r1, #32
 800252a:	187b      	adds	r3, r7, r1
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002530:	187b      	adds	r3, r7, r1
 8002532:	2200      	movs	r2, #0
 8002534:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002536:	187a      	adds	r2, r7, r1
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <MX_TIM3_Init+0xf8>)
 800253a:	0011      	movs	r1, r2
 800253c:	0018      	movs	r0, r3
 800253e:	f003 fd61 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 8002542:	1e03      	subs	r3, r0, #0
 8002544:	d001      	beq.n	800254a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002546:	f000 f93d 	bl	80027c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	2260      	movs	r2, #96	; 0x60
 800254e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2200      	movs	r2, #0
 8002554:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002562:	1d39      	adds	r1, r7, #4
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <MX_TIM3_Init+0xf8>)
 8002566:	2200      	movs	r2, #0
 8002568:	0018      	movs	r0, r3
 800256a:	f003 f87d 	bl	8005668 <HAL_TIM_PWM_ConfigChannel>
 800256e:	1e03      	subs	r3, r0, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002572:	f000 f927 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <MX_TIM3_Init+0xf8>)
 8002578:	0018      	movs	r0, r3
 800257a:	f000 fc4b 	bl	8002e14 <HAL_TIM_MspPostInit>

}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b00e      	add	sp, #56	; 0x38
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	20000480 	.word	0x20000480
 800258c:	40000400 	.word	0x40000400

08002590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <MX_USART1_UART_Init+0x58>)
 8002596:	4a15      	ldr	r2, [pc, #84]	; (80025ec <MX_USART1_UART_Init+0x5c>)
 8002598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <MX_USART1_UART_Init+0x58>)
 800259c:	2296      	movs	r2, #150	; 0x96
 800259e:	0212      	lsls	r2, r2, #8
 80025a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <MX_USART1_UART_Init+0x58>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <MX_USART1_UART_Init+0x58>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <MX_USART1_UART_Init+0x58>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <MX_USART1_UART_Init+0x58>)
 80025b6:	220c      	movs	r2, #12
 80025b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <MX_USART1_UART_Init+0x58>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <MX_USART1_UART_Init+0x58>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <MX_USART1_UART_Init+0x58>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <MX_USART1_UART_Init+0x58>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <MX_USART1_UART_Init+0x58>)
 80025d4:	0018      	movs	r0, r3
 80025d6:	f003 fd7d 	bl	80060d4 <HAL_UART_Init>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d001      	beq.n	80025e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025de:	f000 f8f1 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200004c4 	.word	0x200004c4
 80025ec:	40013800 	.word	0x40013800

080025f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <MX_USART2_UART_Init+0x58>)
 80025f6:	4a15      	ldr	r2, [pc, #84]	; (800264c <MX_USART2_UART_Init+0x5c>)
 80025f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <MX_USART2_UART_Init+0x58>)
 80025fc:	2296      	movs	r2, #150	; 0x96
 80025fe:	0212      	lsls	r2, r2, #8
 8002600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <MX_USART2_UART_Init+0x58>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <MX_USART2_UART_Init+0x58>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <MX_USART2_UART_Init+0x58>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_USART2_UART_Init+0x58>)
 8002616:	220c      	movs	r2, #12
 8002618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <MX_USART2_UART_Init+0x58>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MX_USART2_UART_Init+0x58>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <MX_USART2_UART_Init+0x58>)
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <MX_USART2_UART_Init+0x58>)
 800262e:	2200      	movs	r2, #0
 8002630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <MX_USART2_UART_Init+0x58>)
 8002634:	0018      	movs	r0, r3
 8002636:	f003 fd4d 	bl	80060d4 <HAL_UART_Init>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d001      	beq.n	8002642 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800263e:	f000 f8c1 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	2000058c 	.word	0x2000058c
 800264c:	40004400 	.word	0x40004400

08002650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b08b      	sub	sp, #44	; 0x2c
 8002654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002656:	2414      	movs	r4, #20
 8002658:	193b      	adds	r3, r7, r4
 800265a:	0018      	movs	r0, r3
 800265c:	2314      	movs	r3, #20
 800265e:	001a      	movs	r2, r3
 8002660:	2100      	movs	r1, #0
 8002662:	f004 f8b3 	bl	80067cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <MX_GPIO_Init+0x164>)
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	4b52      	ldr	r3, [pc, #328]	; (80027b4 <MX_GPIO_Init+0x164>)
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	0309      	lsls	r1, r1, #12
 8002670:	430a      	orrs	r2, r1
 8002672:	615a      	str	r2, [r3, #20]
 8002674:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <MX_GPIO_Init+0x164>)
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	031b      	lsls	r3, r3, #12
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <MX_GPIO_Init+0x164>)
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <MX_GPIO_Init+0x164>)
 8002688:	2180      	movs	r1, #128	; 0x80
 800268a:	0289      	lsls	r1, r1, #10
 800268c:	430a      	orrs	r2, r1
 800268e:	615a      	str	r2, [r3, #20]
 8002690:	4b48      	ldr	r3, [pc, #288]	; (80027b4 <MX_GPIO_Init+0x164>)
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	029b      	lsls	r3, r3, #10
 8002698:	4013      	ands	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800269e:	4b45      	ldr	r3, [pc, #276]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	03c9      	lsls	r1, r1, #15
 80026a8:	430a      	orrs	r2, r1
 80026aa:	615a      	str	r2, [r3, #20]
 80026ac:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	03db      	lsls	r3, r3, #15
 80026b4:	4013      	ands	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ba:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	02c9      	lsls	r1, r1, #11
 80026c4:	430a      	orrs	r2, r1
 80026c6:	615a      	str	r2, [r3, #20]
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	02db      	lsls	r3, r3, #11
 80026d0:	4013      	ands	r3, r2
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GFCI_TEST_Pin|LED_Pin, GPIO_PIN_RESET);
 80026d6:	2390      	movs	r3, #144	; 0x90
 80026d8:	05db      	lsls	r3, r3, #23
 80026da:	2200      	movs	r2, #0
 80026dc:	2122      	movs	r1, #34	; 0x22
 80026de:	0018      	movs	r0, r3
 80026e0:	f001 fad8 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RLY1_GPIO_Port, RLY1_Pin, GPIO_PIN_RESET);
 80026e4:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <MX_GPIO_Init+0x168>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	2140      	movs	r1, #64	; 0x40
 80026ea:	0018      	movs	r0, r3
 80026ec:	f001 fad2 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NEW_LED_GPIO_Port, NEW_LED_Pin, GPIO_PIN_RESET);
 80026f0:	4b32      	ldr	r3, [pc, #200]	; (80027bc <MX_GPIO_Init+0x16c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	0018      	movs	r0, r3
 80026f8:	f001 facc 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TEMP_ALERT_Pin CAP_ALERT_Pin Sense_Out_Pin */
  GPIO_InitStruct.Pin = TEMP_ALERT_Pin|CAP_ALERT_Pin|Sense_Out_Pin;
 80026fc:	193b      	adds	r3, r7, r4
 80026fe:	2207      	movs	r2, #7
 8002700:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002702:	193b      	adds	r3, r7, r4
 8002704:	2200      	movs	r2, #0
 8002706:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	193b      	adds	r3, r7, r4
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270e:	193b      	adds	r3, r7, r4
 8002710:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <MX_GPIO_Init+0x168>)
 8002712:	0019      	movs	r1, r3
 8002714:	0010      	movs	r0, r2
 8002716:	f001 f94d 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GFCI_INT_Pin */
  GPIO_InitStruct.Pin = GFCI_INT_Pin;
 800271a:	193b      	adds	r3, r7, r4
 800271c:	2208      	movs	r2, #8
 800271e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002720:	193b      	adds	r3, r7, r4
 8002722:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <MX_GPIO_Init+0x170>)
 8002724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	193b      	adds	r3, r7, r4
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GFCI_INT_GPIO_Port, &GPIO_InitStruct);
 800272c:	193b      	adds	r3, r7, r4
 800272e:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <MX_GPIO_Init+0x168>)
 8002730:	0019      	movs	r1, r3
 8002732:	0010      	movs	r0, r2
 8002734:	f001 f93e 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GFCI_TEST_Pin LED_Pin */
  GPIO_InitStruct.Pin = GFCI_TEST_Pin|LED_Pin;
 8002738:	193b      	adds	r3, r7, r4
 800273a:	2222      	movs	r2, #34	; 0x22
 800273c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273e:	193b      	adds	r3, r7, r4
 8002740:	2201      	movs	r2, #1
 8002742:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	193b      	adds	r3, r7, r4
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	193b      	adds	r3, r7, r4
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	193a      	adds	r2, r7, r4
 8002752:	2390      	movs	r3, #144	; 0x90
 8002754:	05db      	lsls	r3, r3, #23
 8002756:	0011      	movs	r1, r2
 8002758:	0018      	movs	r0, r3
 800275a:	f001 f92b 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RLY1_Pin */
  GPIO_InitStruct.Pin = RLY1_Pin;
 800275e:	0021      	movs	r1, r4
 8002760:	187b      	adds	r3, r7, r1
 8002762:	2240      	movs	r2, #64	; 0x40
 8002764:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002766:	187b      	adds	r3, r7, r1
 8002768:	2201      	movs	r2, #1
 800276a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	187b      	adds	r3, r7, r1
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	187b      	adds	r3, r7, r1
 8002774:	2200      	movs	r2, #0
 8002776:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RLY1_GPIO_Port, &GPIO_InitStruct);
 8002778:	000c      	movs	r4, r1
 800277a:	187b      	adds	r3, r7, r1
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <MX_GPIO_Init+0x168>)
 800277e:	0019      	movs	r1, r3
 8002780:	0010      	movs	r0, r2
 8002782:	f001 f917 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NEW_LED_Pin */
  GPIO_InitStruct.Pin = NEW_LED_Pin;
 8002786:	0021      	movs	r1, r4
 8002788:	187b      	adds	r3, r7, r1
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278e:	187b      	adds	r3, r7, r1
 8002790:	2201      	movs	r2, #1
 8002792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2200      	movs	r2, #0
 800279e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NEW_LED_GPIO_Port, &GPIO_InitStruct);
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	4a06      	ldr	r2, [pc, #24]	; (80027bc <MX_GPIO_Init+0x16c>)
 80027a4:	0019      	movs	r1, r3
 80027a6:	0010      	movs	r0, r2
 80027a8:	f001 f904 	bl	80039b4 <HAL_GPIO_Init>

}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b00b      	add	sp, #44	; 0x2c
 80027b2:	bd90      	pop	{r4, r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	48000800 	.word	0x48000800
 80027bc:	48001400 	.word	0x48001400
 80027c0:	10110000 	.word	0x10110000

080027c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <ssd1306_Reset>:
#include "ssd1306.h"
#include "gfx.h"


void ssd1306_Reset(void) {
 80027ce:	b580      	push	{r7, lr}
 80027d0:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af04      	add	r7, sp, #16
 80027de:	0002      	movs	r2, r0
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80027e4:	4808      	ldr	r0, [pc, #32]	; (8002808 <ssd1306_WriteCommand+0x30>)
 80027e6:	2301      	movs	r3, #1
 80027e8:	425b      	negs	r3, r3
 80027ea:	9302      	str	r3, [sp, #8]
 80027ec:	2301      	movs	r3, #1
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2301      	movs	r3, #1
 80027f6:	2200      	movs	r2, #0
 80027f8:	2178      	movs	r1, #120	; 0x78
 80027fa:	f001 faff 	bl	8003dfc <HAL_I2C_Mem_Write>
}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b002      	add	sp, #8
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	20000434 	.word	0x20000434

0800280c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af04      	add	r7, sp, #16
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	4808      	ldr	r0, [pc, #32]	; (800283c <ssd1306_WriteData+0x30>)
 800281c:	2201      	movs	r2, #1
 800281e:	4252      	negs	r2, r2
 8002820:	9202      	str	r2, [sp, #8]
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2301      	movs	r3, #1
 800282a:	2240      	movs	r2, #64	; 0x40
 800282c:	2178      	movs	r1, #120	; 0x78
 800282e:	f001 fae5 	bl	8003dfc <HAL_I2C_Mem_Write>
}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	46bd      	mov	sp, r7
 8002836:	b002      	add	sp, #8
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	20000434 	.word	0x20000434

08002840 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8002844:	f7ff ffc3 	bl	80027ce <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002848:	2064      	movs	r0, #100	; 0x64
 800284a:	f000 fc8f 	bl	800316c <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 800284e:	20ae      	movs	r0, #174	; 0xae
 8002850:	f7ff ffc2 	bl	80027d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8002854:	2020      	movs	r0, #32
 8002856:	f7ff ffbf 	bl	80027d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800285a:	2000      	movs	r0, #0
 800285c:	f7ff ffbc 	bl	80027d8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002860:	20b0      	movs	r0, #176	; 0xb0
 8002862:	f7ff ffb9 	bl	80027d8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002866:	20c8      	movs	r0, #200	; 0xc8
 8002868:	f7ff ffb6 	bl	80027d8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff ffb3 	bl	80027d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002872:	2010      	movs	r0, #16
 8002874:	f7ff ffb0 	bl	80027d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002878:	2040      	movs	r0, #64	; 0x40
 800287a:	f7ff ffad 	bl	80027d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800287e:	2081      	movs	r0, #129	; 0x81
 8002880:	f7ff ffaa 	bl	80027d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8002884:	20ff      	movs	r0, #255	; 0xff
 8002886:	f7ff ffa7 	bl	80027d8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800288a:	20a1      	movs	r0, #161	; 0xa1
 800288c:	f7ff ffa4 	bl	80027d8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002890:	20a6      	movs	r0, #166	; 0xa6
 8002892:	f7ff ffa1 	bl	80027d8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002896:	20a8      	movs	r0, #168	; 0xa8
 8002898:	f7ff ff9e 	bl	80027d8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800289c:	201f      	movs	r0, #31
 800289e:	f7ff ff9b 	bl	80027d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80028a2:	20a4      	movs	r0, #164	; 0xa4
 80028a4:	f7ff ff98 	bl	80027d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80028a8:	20d3      	movs	r0, #211	; 0xd3
 80028aa:	f7ff ff95 	bl	80027d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7ff ff92 	bl	80027d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80028b4:	20d5      	movs	r0, #213	; 0xd5
 80028b6:	f7ff ff8f 	bl	80027d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80028ba:	20f0      	movs	r0, #240	; 0xf0
 80028bc:	f7ff ff8c 	bl	80027d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80028c0:	20d9      	movs	r0, #217	; 0xd9
 80028c2:	f7ff ff89 	bl	80027d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80028c6:	2022      	movs	r0, #34	; 0x22
 80028c8:	f7ff ff86 	bl	80027d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80028cc:	20da      	movs	r0, #218	; 0xda
 80028ce:	f7ff ff83 	bl	80027d8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80028d2:	2002      	movs	r0, #2
 80028d4:	f7ff ff80 	bl	80027d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80028d8:	20db      	movs	r0, #219	; 0xdb
 80028da:	f7ff ff7d 	bl	80027d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80028de:	2020      	movs	r0, #32
 80028e0:	f7ff ff7a 	bl	80027d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80028e4:	208d      	movs	r0, #141	; 0x8d
 80028e6:	f7ff ff77 	bl	80027d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80028ea:	2014      	movs	r0, #20
 80028ec:	f7ff ff74 	bl	80027d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80028f0:	20af      	movs	r0, #175	; 0xaf
 80028f2:	f7ff ff71 	bl	80027d8 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f810 	bl	800291c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80028fc:	f000 f832 	bl	8002964 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <ssd1306_Init+0xd8>)
 8002902:	2200      	movs	r2, #0
 8002904:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <ssd1306_Init+0xd8>)
 8002908:	2200      	movs	r2, #0
 800290a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800290c:	4b02      	ldr	r3, [pc, #8]	; (8002918 <ssd1306_Init+0xd8>)
 800290e:	2201      	movs	r2, #1
 8002910:	715a      	strb	r2, [r3, #5]
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000408 	.word	0x20000408

0800291c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	0002      	movs	r2, r0
 8002924:	1dfb      	adds	r3, r7, #7
 8002926:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e00e      	b.n	800294c <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800292e:	1dfb      	adds	r3, r7, #7
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <ssd1306_Fill+0x1e>
 8002936:	2100      	movs	r1, #0
 8002938:	e000      	b.n	800293c <ssd1306_Fill+0x20>
 800293a:	21ff      	movs	r1, #255	; 0xff
 800293c:	4a07      	ldr	r2, [pc, #28]	; (800295c <ssd1306_Fill+0x40>)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	18d3      	adds	r3, r2, r3
 8002942:	1c0a      	adds	r2, r1, #0
 8002944:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3301      	adds	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <ssd1306_Fill+0x44>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d9ec      	bls.n	800292e <ssd1306_Fill+0x12>
    }
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b004      	add	sp, #16
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000208 	.word	0x20000208
 8002960:	000001ff 	.word	0x000001ff

08002964 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800296a:	1dfb      	adds	r3, r7, #7
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e01a      	b.n	80029a8 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002972:	1dfb      	adds	r3, r7, #7
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	3b50      	subs	r3, #80	; 0x50
 8002978:	b2db      	uxtb	r3, r3
 800297a:	0018      	movs	r0, r3
 800297c:	f7ff ff2c 	bl	80027d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002980:	2000      	movs	r0, #0
 8002982:	f7ff ff29 	bl	80027d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002986:	2010      	movs	r0, #16
 8002988:	f7ff ff26 	bl	80027d8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800298c:	1dfb      	adds	r3, r7, #7
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	01da      	lsls	r2, r3, #7
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <ssd1306_UpdateScreen+0x54>)
 8002994:	18d3      	adds	r3, r2, r3
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	0018      	movs	r0, r3
 800299a:	f7ff ff37 	bl	800280c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800299e:	1dfb      	adds	r3, r7, #7
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	1dfb      	adds	r3, r7, #7
 80029a4:	3201      	adds	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	1dfb      	adds	r3, r7, #7
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d9e0      	bls.n	8002972 <ssd1306_UpdateScreen+0xe>
    }
}
 80029b0:	46c0      	nop			; (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000208 	.word	0x20000208

080029bc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	0004      	movs	r4, r0
 80029c4:	0008      	movs	r0, r1
 80029c6:	0011      	movs	r1, r2
 80029c8:	1dfb      	adds	r3, r7, #7
 80029ca:	1c22      	adds	r2, r4, #0
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	1dbb      	adds	r3, r7, #6
 80029d0:	1c02      	adds	r2, r0, #0
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	1d7b      	adds	r3, r7, #5
 80029d6:	1c0a      	adds	r2, r1, #0
 80029d8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	db52      	blt.n	8002a8a <ssd1306_DrawPixel+0xce>
 80029e4:	1dbb      	adds	r3, r7, #6
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b1f      	cmp	r3, #31
 80029ea:	d84e      	bhi.n	8002a8a <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80029ec:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <ssd1306_DrawPixel+0xd8>)
 80029ee:	791b      	ldrb	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d006      	beq.n	8002a02 <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 80029f4:	1d7b      	adds	r3, r7, #5
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	425a      	negs	r2, r3
 80029fa:	4153      	adcs	r3, r2
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	1d7b      	adds	r3, r7, #5
 8002a00:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8002a02:	1d7b      	adds	r3, r7, #5
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d11e      	bne.n	8002a48 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002a0a:	1dfb      	adds	r3, r7, #7
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	1dbb      	adds	r3, r7, #6
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	08db      	lsrs	r3, r3, #3
 8002a14:	b2d8      	uxtb	r0, r3
 8002a16:	0003      	movs	r3, r0
 8002a18:	01db      	lsls	r3, r3, #7
 8002a1a:	18d3      	adds	r3, r2, r3
 8002a1c:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <ssd1306_DrawPixel+0xdc>)
 8002a1e:	5cd3      	ldrb	r3, [r2, r3]
 8002a20:	b25a      	sxtb	r2, r3
 8002a22:	1dbb      	adds	r3, r7, #6
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2107      	movs	r1, #7
 8002a28:	400b      	ands	r3, r1
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	4099      	lsls	r1, r3
 8002a2e:	000b      	movs	r3, r1
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	b259      	sxtb	r1, r3
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	01db      	lsls	r3, r3, #7
 8002a3e:	18d3      	adds	r3, r2, r3
 8002a40:	b2c9      	uxtb	r1, r1
 8002a42:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <ssd1306_DrawPixel+0xdc>)
 8002a44:	54d1      	strb	r1, [r2, r3]
 8002a46:	e021      	b.n	8002a8c <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002a48:	1dfb      	adds	r3, r7, #7
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	1dbb      	adds	r3, r7, #6
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	08db      	lsrs	r3, r3, #3
 8002a52:	b2d8      	uxtb	r0, r3
 8002a54:	0003      	movs	r3, r0
 8002a56:	01db      	lsls	r3, r3, #7
 8002a58:	18d3      	adds	r3, r2, r3
 8002a5a:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <ssd1306_DrawPixel+0xdc>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	b25b      	sxtb	r3, r3
 8002a60:	1dba      	adds	r2, r7, #6
 8002a62:	7812      	ldrb	r2, [r2, #0]
 8002a64:	2107      	movs	r1, #7
 8002a66:	400a      	ands	r2, r1
 8002a68:	2101      	movs	r1, #1
 8002a6a:	4091      	lsls	r1, r2
 8002a6c:	000a      	movs	r2, r1
 8002a6e:	b252      	sxtb	r2, r2
 8002a70:	43d2      	mvns	r2, r2
 8002a72:	b252      	sxtb	r2, r2
 8002a74:	4013      	ands	r3, r2
 8002a76:	b259      	sxtb	r1, r3
 8002a78:	1dfb      	adds	r3, r7, #7
 8002a7a:	781a      	ldrb	r2, [r3, #0]
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	01db      	lsls	r3, r3, #7
 8002a80:	18d3      	adds	r3, r2, r3
 8002a82:	b2c9      	uxtb	r1, r1
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <ssd1306_DrawPixel+0xdc>)
 8002a86:	54d1      	strb	r1, [r2, r3]
 8002a88:	e000      	b.n	8002a8c <ssd1306_DrawPixel+0xd0>
        return;
 8002a8a:	46c0      	nop			; (mov r8, r8)
    }
}
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b003      	add	sp, #12
 8002a90:	bd90      	pop	{r4, r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	20000408 	.word	0x20000408
 8002a98:	20000208 	.word	0x20000208

08002a9c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b089      	sub	sp, #36	; 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	0004      	movs	r4, r0
 8002aa4:	1d38      	adds	r0, r7, #4
 8002aa6:	6001      	str	r1, [r0, #0]
 8002aa8:	6042      	str	r2, [r0, #4]
 8002aaa:	0019      	movs	r1, r3
 8002aac:	200f      	movs	r0, #15
 8002aae:	183b      	adds	r3, r7, r0
 8002ab0:	1c22      	adds	r2, r4, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	230e      	movs	r3, #14
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	1c0a      	adds	r2, r1, #0
 8002aba:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002abc:	183b      	adds	r3, r7, r0
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b1f      	cmp	r3, #31
 8002ac2:	d904      	bls.n	8002ace <ssd1306_WriteChar+0x32>
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b7e      	cmp	r3, #126	; 0x7e
 8002acc:	d901      	bls.n	8002ad2 <ssd1306_WriteChar+0x36>
        return 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e078      	b.n	8002bc4 <ssd1306_WriteChar+0x128>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <ssd1306_WriteChar+0x130>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	18d3      	adds	r3, r2, r3
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	dc07      	bgt.n	8002af2 <ssd1306_WriteChar+0x56>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <ssd1306_WriteChar+0x130>)
 8002ae4:	885b      	ldrh	r3, [r3, #2]
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	785b      	ldrb	r3, [r3, #1]
 8002aec:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	dd01      	ble.n	8002af6 <ssd1306_WriteChar+0x5a>
    {
        // Not enough space on current line
        return 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e066      	b.n	8002bc4 <ssd1306_WriteChar+0x128>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	e051      	b.n	8002ba0 <ssd1306_WriteChar+0x104>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	230f      	movs	r3, #15
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	3b20      	subs	r3, #32
 8002b08:	1d39      	adds	r1, r7, #4
 8002b0a:	7849      	ldrb	r1, [r1, #1]
 8002b0c:	434b      	muls	r3, r1
 8002b0e:	0019      	movs	r1, r3
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	18cb      	adds	r3, r1, r3
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	18d3      	adds	r3, r2, r3
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	e035      	b.n	8002b8e <ssd1306_WriteChar+0xf2>
            if((b << j) & 0x8000)  {
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	409a      	lsls	r2, r3
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d014      	beq.n	8002b5a <ssd1306_WriteChar+0xbe>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <ssd1306_WriteChar+0x130>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	18d3      	adds	r3, r2, r3
 8002b3c:	b2d8      	uxtb	r0, r3
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <ssd1306_WriteChar+0x130>)
 8002b40:	885b      	ldrh	r3, [r3, #2]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	18d3      	adds	r3, r2, r3
 8002b4a:	b2d9      	uxtb	r1, r3
 8002b4c:	230e      	movs	r3, #14
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	001a      	movs	r2, r3
 8002b54:	f7ff ff32 	bl	80029bc <ssd1306_DrawPixel>
 8002b58:	e016      	b.n	8002b88 <ssd1306_WriteChar+0xec>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <ssd1306_WriteChar+0x130>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	18d3      	adds	r3, r2, r3
 8002b66:	b2d8      	uxtb	r0, r3
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <ssd1306_WriteChar+0x130>)
 8002b6a:	885b      	ldrh	r3, [r3, #2]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	18d3      	adds	r3, r2, r3
 8002b74:	b2d9      	uxtb	r1, r3
 8002b76:	230e      	movs	r3, #14
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	425a      	negs	r2, r3
 8002b7e:	4153      	adcs	r3, r2
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	001a      	movs	r2, r3
 8002b84:	f7ff ff1a 	bl	80029bc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	001a      	movs	r2, r3
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d3c3      	bcc.n	8002b22 <ssd1306_WriteChar+0x86>
    for(i = 0; i < Font.FontHeight; i++) {
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d3a7      	bcc.n	8002afc <ssd1306_WriteChar+0x60>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <ssd1306_WriteChar+0x130>)
 8002bae:	881a      	ldrh	r2, [r3, #0]
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	18d3      	adds	r3, r2, r3
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <ssd1306_WriteChar+0x130>)
 8002bbc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002bbe:	230f      	movs	r3, #15
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	781b      	ldrb	r3, [r3, #0]
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b009      	add	sp, #36	; 0x24
 8002bca:	bd90      	pop	{r4, r7, pc}
 8002bcc:	20000408 	.word	0x20000408

08002bd0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	1d38      	adds	r0, r7, #4
 8002bda:	6001      	str	r1, [r0, #0]
 8002bdc:	6042      	str	r2, [r0, #4]
 8002bde:	001a      	movs	r2, r3
 8002be0:	1cfb      	adds	r3, r7, #3
 8002be2:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8002be4:	e014      	b.n	8002c10 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	7818      	ldrb	r0, [r3, #0]
 8002bea:	1cfb      	adds	r3, r7, #3
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	1d3a      	adds	r2, r7, #4
 8002bf0:	6811      	ldr	r1, [r2, #0]
 8002bf2:	6852      	ldr	r2, [r2, #4]
 8002bf4:	f7ff ff52 	bl	8002a9c <ssd1306_WriteChar>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d002      	beq.n	8002c0a <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	e008      	b.n	8002c1c <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e6      	bne.n	8002be6 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b004      	add	sp, #16
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	1dbb      	adds	r3, r7, #6
 8002c32:	1c0a      	adds	r2, r1, #0
 8002c34:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8002c36:	1dfb      	adds	r3, r7, #7
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <ssd1306_SetCursor+0x30>)
 8002c3e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002c40:	1dbb      	adds	r3, r7, #6
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <ssd1306_SetCursor+0x30>)
 8002c48:	805a      	strh	r2, [r3, #2]
}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b002      	add	sp, #8
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	20000408 	.word	0x20000408

08002c58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_MspInit+0x44>)
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <HAL_MspInit+0x44>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	430a      	orrs	r2, r1
 8002c68:	619a      	str	r2, [r3, #24]
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_MspInit+0x44>)
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4013      	ands	r3, r2
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_MspInit+0x44>)
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_MspInit+0x44>)
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0549      	lsls	r1, r1, #21
 8002c80:	430a      	orrs	r2, r1
 8002c82:	61da      	str	r2, [r3, #28]
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_MspInit+0x44>)
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	055b      	lsls	r3, r3, #21
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b002      	add	sp, #8
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	2314      	movs	r3, #20
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	0018      	movs	r0, r3
 8002cae:	2314      	movs	r3, #20
 8002cb0:	001a      	movs	r2, r3
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	f003 fd8a 	bl	80067cc <memset>
  if(hadc->Instance==ADC1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_ADC_MspInit+0x84>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d12c      	bne.n	8002d1c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_ADC_MspInit+0x88>)
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_ADC_MspInit+0x88>)
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	0089      	lsls	r1, r1, #2
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	619a      	str	r2, [r3, #24]
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_ADC_MspInit+0x88>)
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_ADC_MspInit+0x88>)
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_ADC_MspInit+0x88>)
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	0289      	lsls	r1, r1, #10
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_ADC_MspInit+0x88>)
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	029b      	lsls	r3, r3, #10
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = FEEDBACK_Pin|ACS_VOUT_Pin;
 8002cfa:	2114      	movs	r1, #20
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	2211      	movs	r2, #17
 8002d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	2203      	movs	r2, #3
 8002d06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	187a      	adds	r2, r7, r1
 8002d10:	2390      	movs	r3, #144	; 0x90
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	0011      	movs	r1, r2
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 fe4c 	bl	80039b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b00a      	add	sp, #40	; 0x28
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40012400 	.word	0x40012400
 8002d28:	40021000 	.word	0x40021000

08002d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	2314      	movs	r3, #20
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	0018      	movs	r0, r3
 8002d3a:	2314      	movs	r3, #20
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	2100      	movs	r1, #0
 8002d40:	f003 fd44 	bl	80067cc <memset>
  if(hi2c->Instance==I2C1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <HAL_I2C_MspInit+0x90>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d131      	bne.n	8002db2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <HAL_I2C_MspInit+0x94>)
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_I2C_MspInit+0x94>)
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	02c9      	lsls	r1, r1, #11
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	615a      	str	r2, [r3, #20]
 8002d5c:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <HAL_I2C_MspInit+0x94>)
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	02db      	lsls	r3, r3, #11
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d6a:	2114      	movs	r1, #20
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	22c0      	movs	r2, #192	; 0xc0
 8002d70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	2212      	movs	r2, #18
 8002d76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2203      	movs	r2, #3
 8002d82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	2201      	movs	r2, #1
 8002d88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <HAL_I2C_MspInit+0x98>)
 8002d8e:	0019      	movs	r1, r3
 8002d90:	0010      	movs	r0, r2
 8002d92:	f000 fe0f 	bl	80039b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_I2C_MspInit+0x94>)
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_I2C_MspInit+0x94>)
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	0389      	lsls	r1, r1, #14
 8002da0:	430a      	orrs	r2, r1
 8002da2:	61da      	str	r2, [r3, #28]
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_I2C_MspInit+0x94>)
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	039b      	lsls	r3, r3, #14
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b00a      	add	sp, #40	; 0x28
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	40005400 	.word	0x40005400
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	48000400 	.word	0x48000400

08002dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <HAL_TIM_Base_MspInit+0x44>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d113      	bne.n	8002e02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dda:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_TIM_Base_MspInit+0x48>)
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <HAL_TIM_Base_MspInit+0x48>)
 8002de0:	2102      	movs	r1, #2
 8002de2:	430a      	orrs	r2, r1
 8002de4:	61da      	str	r2, [r3, #28]
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_TIM_Base_MspInit+0x48>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	2202      	movs	r2, #2
 8002dec:	4013      	ands	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	2010      	movs	r0, #16
 8002df8:	f000 fdaa 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dfc:	2010      	movs	r0, #16
 8002dfe:	f000 fdbc 	bl	800397a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b004      	add	sp, #16
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40021000 	.word	0x40021000

08002e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	0018      	movs	r0, r3
 8002e22:	2314      	movs	r3, #20
 8002e24:	001a      	movs	r2, r3
 8002e26:	2100      	movs	r1, #0
 8002e28:	f003 fcd0 	bl	80067cc <memset>
  if(htim->Instance==TIM3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <HAL_TIM_MspPostInit+0x74>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d124      	bne.n	8002e80 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_TIM_MspPostInit+0x78>)
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_TIM_MspPostInit+0x78>)
 8002e3c:	2180      	movs	r1, #128	; 0x80
 8002e3e:	0289      	lsls	r1, r1, #10
 8002e40:	430a      	orrs	r2, r1
 8002e42:	615a      	str	r2, [r3, #20]
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_TIM_MspPostInit+0x78>)
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	029b      	lsls	r3, r3, #10
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = CONTROL_PIN_Pin;
 8002e52:	210c      	movs	r1, #12
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	2240      	movs	r2, #64	; 0x40
 8002e58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	187b      	adds	r3, r7, r1
 8002e68:	2200      	movs	r2, #0
 8002e6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002e6c:	187b      	adds	r3, r7, r1
 8002e6e:	2201      	movs	r2, #1
 8002e70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CONTROL_PIN_GPIO_Port, &GPIO_InitStruct);
 8002e72:	187a      	adds	r2, r7, r1
 8002e74:	2390      	movs	r3, #144	; 0x90
 8002e76:	05db      	lsls	r3, r3, #23
 8002e78:	0011      	movs	r1, r2
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 fd9a 	bl	80039b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b008      	add	sp, #32
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40021000 	.word	0x40021000

08002e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08c      	sub	sp, #48	; 0x30
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	231c      	movs	r3, #28
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	2314      	movs	r3, #20
 8002ea0:	001a      	movs	r2, r3
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	f003 fc92 	bl	80067cc <memset>
  if(huart->Instance==USART1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a39      	ldr	r2, [pc, #228]	; (8002f94 <HAL_UART_MspInit+0x104>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d134      	bne.n	8002f1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eb2:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	4b38      	ldr	r3, [pc, #224]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	01c9      	lsls	r1, r1, #7
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	619a      	str	r2, [r3, #24]
 8002ec0:	4b35      	ldr	r3, [pc, #212]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	01db      	lsls	r3, r3, #7
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	0289      	lsls	r1, r1, #10
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	615a      	str	r2, [r3, #20]
 8002edc:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	029b      	lsls	r3, r3, #10
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002eea:	211c      	movs	r1, #28
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	22c0      	movs	r2, #192	; 0xc0
 8002ef0:	00d2      	lsls	r2, r2, #3
 8002ef2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2203      	movs	r2, #3
 8002f04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2201      	movs	r2, #1
 8002f0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	187a      	adds	r2, r7, r1
 8002f0e:	2390      	movs	r3, #144	; 0x90
 8002f10:	05db      	lsls	r3, r3, #23
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 fd4d 	bl	80039b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f1a:	e037      	b.n	8002f8c <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <HAL_UART_MspInit+0x10c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d132      	bne.n	8002f8c <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f26:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002f2c:	2180      	movs	r1, #128	; 0x80
 8002f2e:	0289      	lsls	r1, r1, #10
 8002f30:	430a      	orrs	r2, r1
 8002f32:	61da      	str	r2, [r3, #28]
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	029b      	lsls	r3, r3, #10
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	0289      	lsls	r1, r1, #10
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	615a      	str	r2, [r3, #20]
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <HAL_UART_MspInit+0x108>)
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	029b      	lsls	r3, r3, #10
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f5e:	211c      	movs	r1, #28
 8002f60:	187b      	adds	r3, r7, r1
 8002f62:	220c      	movs	r2, #12
 8002f64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	2202      	movs	r2, #2
 8002f6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f72:	187b      	adds	r3, r7, r1
 8002f74:	2203      	movs	r2, #3
 8002f76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002f78:	187b      	adds	r3, r7, r1
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7e:	187a      	adds	r2, r7, r1
 8002f80:	2390      	movs	r3, #144	; 0x90
 8002f82:	05db      	lsls	r3, r3, #23
 8002f84:	0011      	movs	r1, r2
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 fd14 	bl	80039b4 <HAL_GPIO_Init>
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b00c      	add	sp, #48	; 0x30
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40013800 	.word	0x40013800
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40004400 	.word	0x40004400

08002fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fae:	e7fe      	b.n	8002fae <HardFault_Handler+0x4>

08002fb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fc8:	f000 f8b4 	bl	8003134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <TIM3_IRQHandler+0x14>)
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f002 fa2e 	bl	800543c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	20000480 	.word	0x20000480

08002fec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <_sbrk+0x50>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <_sbrk+0x16>
		heap_end = &end;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <_sbrk+0x50>)
 8002ffe:	4a10      	ldr	r2, [pc, #64]	; (8003040 <_sbrk+0x54>)
 8003000:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <_sbrk+0x50>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <_sbrk+0x50>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	18d3      	adds	r3, r2, r3
 8003010:	466a      	mov	r2, sp
 8003012:	4293      	cmp	r3, r2
 8003014:	d907      	bls.n	8003026 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003016:	f003 fbaf 	bl	8006778 <__errno>
 800301a:	0003      	movs	r3, r0
 800301c:	220c      	movs	r2, #12
 800301e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003020:	2301      	movs	r3, #1
 8003022:	425b      	negs	r3, r3
 8003024:	e006      	b.n	8003034 <_sbrk+0x48>
	}

	heap_end += incr;
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <_sbrk+0x50>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	18d2      	adds	r2, r2, r3
 800302e:	4b03      	ldr	r3, [pc, #12]	; (800303c <_sbrk+0x50>)
 8003030:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b004      	add	sp, #16
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000410 	.word	0x20000410
 8003040:	20000690 	.word	0x20000690

08003044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003050:	480d      	ldr	r0, [pc, #52]	; (8003088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003052:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003054:	480d      	ldr	r0, [pc, #52]	; (800308c <LoopForever+0x6>)
  ldr r1, =_edata
 8003056:	490e      	ldr	r1, [pc, #56]	; (8003090 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <LoopForever+0xe>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800305c:	e002      	b.n	8003064 <LoopCopyDataInit>

0800305e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003062:	3304      	adds	r3, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003068:	d3f9      	bcc.n	800305e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306a:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <LoopForever+0x12>)
  ldr r4, =_ebss
 800306c:	4c0b      	ldr	r4, [pc, #44]	; (800309c <LoopForever+0x16>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003070:	e001      	b.n	8003076 <LoopFillZerobss>

08003072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003074:	3204      	adds	r2, #4

08003076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003078:	d3fb      	bcc.n	8003072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800307a:	f7ff ffe3 	bl	8003044 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800307e:	f003 fb81 	bl	8006784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003082:	f7ff f85b 	bl	800213c <main>

08003086 <LoopForever>:

LoopForever:
    b LoopForever
 8003086:	e7fe      	b.n	8003086 <LoopForever>
  ldr   r0, =_estack
 8003088:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003094:	08009308 	.word	0x08009308
  ldr r2, =_sbss
 8003098:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800309c:	2000068c 	.word	0x2000068c

080030a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC1_IRQHandler>
	...

080030a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a8:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <HAL_Init+0x24>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_Init+0x24>)
 80030ae:	2110      	movs	r1, #16
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f000 f809 	bl	80030cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ba:	f7ff fdcd 	bl	8002c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	40022000 	.word	0x40022000

080030cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <HAL_InitTick+0x5c>)
 80030d6:	681c      	ldr	r4, [r3, #0]
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_InitTick+0x60>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	0019      	movs	r1, r3
 80030de:	23fa      	movs	r3, #250	; 0xfa
 80030e0:	0098      	lsls	r0, r3, #2
 80030e2:	f7fd f823 	bl	800012c <__udivsi3>
 80030e6:	0003      	movs	r3, r0
 80030e8:	0019      	movs	r1, r3
 80030ea:	0020      	movs	r0, r4
 80030ec:	f7fd f81e 	bl	800012c <__udivsi3>
 80030f0:	0003      	movs	r3, r0
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 fc51 	bl	800399a <HAL_SYSTICK_Config>
 80030f8:	1e03      	subs	r3, r0, #0
 80030fa:	d001      	beq.n	8003100 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e00f      	b.n	8003120 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d80b      	bhi.n	800311e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	2301      	movs	r3, #1
 800310a:	425b      	negs	r3, r3
 800310c:	2200      	movs	r2, #0
 800310e:	0018      	movs	r0, r3
 8003110:	f000 fc1e 	bl	8003950 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_InitTick+0x64>)
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b003      	add	sp, #12
 8003126:	bd90      	pop	{r4, r7, pc}
 8003128:	20000008 	.word	0x20000008
 800312c:	20000010 	.word	0x20000010
 8003130:	2000000c 	.word	0x2000000c

08003134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_IncTick+0x1c>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	001a      	movs	r2, r3
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_IncTick+0x20>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	18d2      	adds	r2, r2, r3
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_IncTick+0x20>)
 8003146:	601a      	str	r2, [r3, #0]
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	20000010 	.word	0x20000010
 8003154:	20000684 	.word	0x20000684

08003158 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  return uwTick;
 800315c:	4b02      	ldr	r3, [pc, #8]	; (8003168 <HAL_GetTick+0x10>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	20000684 	.word	0x20000684

0800316c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff fff0 	bl	8003158 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3301      	adds	r3, #1
 8003184:	d005      	beq.n	8003192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_Delay+0x40>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	001a      	movs	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	189b      	adds	r3, r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	f7ff ffe0 	bl	8003158 <HAL_GetTick>
 8003198:	0002      	movs	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d8f7      	bhi.n	8003194 <HAL_Delay+0x28>
  {
  }
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b004      	add	sp, #16
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000010 	.word	0x20000010

080031b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b8:	230f      	movs	r3, #15
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e125      	b.n	800341a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2234      	movs	r2, #52	; 0x34
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7ff fd5a 	bl	8002ca0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	2210      	movs	r2, #16
 80031f2:	4013      	ands	r3, r2
 80031f4:	d000      	beq.n	80031f8 <HAL_ADC_Init+0x48>
 80031f6:	e103      	b.n	8003400 <HAL_ADC_Init+0x250>
 80031f8:	230f      	movs	r3, #15
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d000      	beq.n	8003204 <HAL_ADC_Init+0x54>
 8003202:	e0fd      	b.n	8003400 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2204      	movs	r2, #4
 800320c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800320e:	d000      	beq.n	8003212 <HAL_ADC_Init+0x62>
 8003210:	e0f6      	b.n	8003400 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	4a83      	ldr	r2, [pc, #524]	; (8003424 <HAL_ADC_Init+0x274>)
 8003218:	4013      	ands	r3, r2
 800321a:	2202      	movs	r2, #2
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2203      	movs	r2, #3
 800322a:	4013      	ands	r3, r2
 800322c:	2b01      	cmp	r3, #1
 800322e:	d112      	bne.n	8003256 <HAL_ADC_Init+0xa6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2201      	movs	r2, #1
 8003238:	4013      	ands	r3, r2
 800323a:	2b01      	cmp	r3, #1
 800323c:	d009      	beq.n	8003252 <HAL_ADC_Init+0xa2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	401a      	ands	r2, r3
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	429a      	cmp	r2, r3
 8003250:	d101      	bne.n	8003256 <HAL_ADC_Init+0xa6>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_ADC_Init+0xa8>
 8003256:	2300      	movs	r3, #0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d116      	bne.n	800328a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2218      	movs	r2, #24
 8003264:	4393      	bics	r3, r2
 8003266:	0019      	movs	r1, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	0899      	lsrs	r1, r3, #2
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4964      	ldr	r1, [pc, #400]	; (8003428 <HAL_ADC_Init+0x278>)
 8003296:	400a      	ands	r2, r1
 8003298:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7e1b      	ldrb	r3, [r3, #24]
 800329e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7e5b      	ldrb	r3, [r3, #25]
 80032a4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7e9b      	ldrb	r3, [r3, #26]
 80032ac:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80032ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d002      	beq.n	80032be <HAL_ADC_Init+0x10e>
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	015b      	lsls	r3, r3, #5
 80032bc:	e000      	b.n	80032c0 <HAL_ADC_Init+0x110>
 80032be:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032c0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80032c6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_Init+0x124>
 80032d0:	2304      	movs	r3, #4
 80032d2:	e000      	b.n	80032d6 <HAL_ADC_Init+0x126>
 80032d4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80032d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2124      	movs	r1, #36	; 0x24
 80032dc:	5c5b      	ldrb	r3, [r3, r1]
 80032de:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80032e0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7edb      	ldrb	r3, [r3, #27]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d115      	bne.n	800331c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7e9b      	ldrb	r3, [r3, #26]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	0252      	lsls	r2, r2, #9
 80032fe:	4313      	orrs	r3, r2
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	e00b      	b.n	800331c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	2220      	movs	r2, #32
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	2201      	movs	r2, #1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	23c2      	movs	r3, #194	; 0xc2
 8003322:	33ff      	adds	r3, #255	; 0xff
 8003324:	429a      	cmp	r2, r3
 8003326:	d007      	beq.n	8003338 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003330:	4313      	orrs	r3, r2
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4313      	orrs	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68d9      	ldr	r1, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	430a      	orrs	r2, r1
 8003346:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	055b      	lsls	r3, r3, #21
 8003350:	429a      	cmp	r2, r3
 8003352:	d01b      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d017      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	2b02      	cmp	r3, #2
 8003362:	d013      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	2b03      	cmp	r3, #3
 800336a:	d00f      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	2b04      	cmp	r3, #4
 8003372:	d00b      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	2b05      	cmp	r3, #5
 800337a:	d007      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	2b06      	cmp	r3, #6
 8003382:	d003      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	2b07      	cmp	r3, #7
 800338a:	d112      	bne.n	80033b2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2107      	movs	r1, #7
 8003398:	438a      	bics	r2, r1
 800339a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6959      	ldr	r1, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	2207      	movs	r2, #7
 80033a8:	401a      	ands	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_ADC_Init+0x27c>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d10b      	bne.n	80033da <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	2203      	movs	r2, #3
 80033ce:	4393      	bics	r3, r2
 80033d0:	2201      	movs	r2, #1
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80033d8:	e01c      	b.n	8003414 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	2212      	movs	r2, #18
 80033e0:	4393      	bics	r3, r2
 80033e2:	2210      	movs	r2, #16
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	2201      	movs	r2, #1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80033f6:	230f      	movs	r3, #15
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80033fe:	e009      	b.n	8003414 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	2210      	movs	r2, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800340c:	230f      	movs	r3, #15
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003414:	230f      	movs	r3, #15
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	781b      	ldrb	r3, [r3, #0]
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	b004      	add	sp, #16
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	fffffefd 	.word	0xfffffefd
 8003428:	fffe0219 	.word	0xfffe0219
 800342c:	833fffe7 	.word	0x833fffe7

08003430 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003438:	230f      	movs	r3, #15
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2204      	movs	r2, #4
 8003448:	4013      	ands	r3, r2
 800344a:	d156      	bne.n	80034fa <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2234      	movs	r2, #52	; 0x34
 8003450:	5c9b      	ldrb	r3, [r3, r2]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_ADC_Start_IT+0x2a>
 8003456:	2302      	movs	r3, #2
 8003458:	e056      	b.n	8003508 <HAL_ADC_Start_IT+0xd8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2234      	movs	r2, #52	; 0x34
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7e5b      	ldrb	r3, [r3, #25]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d007      	beq.n	800347a <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800346a:	230f      	movs	r3, #15
 800346c:	18fc      	adds	r4, r7, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 f945 	bl	8003700 <ADC_Enable>
 8003476:	0003      	movs	r3, r0
 8003478:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800347a:	230f      	movs	r3, #15
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d13e      	bne.n	8003502 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_ADC_Start_IT+0xe0>)
 800348a:	4013      	ands	r3, r2
 800348c:	2280      	movs	r2, #128	; 0x80
 800348e:	0052      	lsls	r2, r2, #1
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2234      	movs	r2, #52	; 0x34
 80034a0:	2100      	movs	r1, #0
 80034a2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	221c      	movs	r2, #28
 80034aa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d110      	bne.n	80034d6 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2104      	movs	r1, #4
 80034c0:	438a      	bics	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2118      	movs	r1, #24
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
          break;
 80034d4:	e008      	b.n	80034e8 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	211c      	movs	r1, #28
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
          break;
 80034e6:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2104      	movs	r1, #4
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	e003      	b.n	8003502 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034fa:	230f      	movs	r3, #15
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	2202      	movs	r2, #2
 8003500:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8003502:	230f      	movs	r3, #15
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	781b      	ldrb	r3, [r3, #0]
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b005      	add	sp, #20
 800350e:	bd90      	pop	{r4, r7, pc}
 8003510:	fffff0fe 	.word	0xfffff0fe

08003514 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351e:	230f      	movs	r3, #15
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	055b      	lsls	r3, r3, #21
 8003532:	429a      	cmp	r2, r3
 8003534:	d011      	beq.n	800355a <HAL_ADC_ConfigChannel+0x46>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	2b01      	cmp	r3, #1
 800353c:	d00d      	beq.n	800355a <HAL_ADC_ConfigChannel+0x46>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	2b02      	cmp	r3, #2
 8003544:	d009      	beq.n	800355a <HAL_ADC_ConfigChannel+0x46>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	2b03      	cmp	r3, #3
 800354c:	d005      	beq.n	800355a <HAL_ADC_ConfigChannel+0x46>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	2b04      	cmp	r3, #4
 8003554:	d001      	beq.n	800355a <HAL_ADC_ConfigChannel+0x46>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2234      	movs	r2, #52	; 0x34
 800355e:	5c9b      	ldrb	r3, [r3, r2]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x54>
 8003564:	2302      	movs	r3, #2
 8003566:	e0bb      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x1cc>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2234      	movs	r2, #52	; 0x34
 800356c:	2101      	movs	r1, #1
 800356e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2204      	movs	r2, #4
 8003578:	4013      	ands	r3, r2
 800357a:	d000      	beq.n	800357e <HAL_ADC_ConfigChannel+0x6a>
 800357c:	e09f      	b.n	80036be <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4a59      	ldr	r2, [pc, #356]	; (80036e8 <HAL_ADC_ConfigChannel+0x1d4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d100      	bne.n	800358a <HAL_ADC_ConfigChannel+0x76>
 8003588:	e077      	b.n	800367a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	055b      	lsls	r3, r3, #21
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d037      	beq.n	800361c <HAL_ADC_ConfigChannel+0x108>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d033      	beq.n	800361c <HAL_ADC_ConfigChannel+0x108>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d02f      	beq.n	800361c <HAL_ADC_ConfigChannel+0x108>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d02b      	beq.n	800361c <HAL_ADC_ConfigChannel+0x108>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d027      	beq.n	800361c <HAL_ADC_ConfigChannel+0x108>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	d023      	beq.n	800361c <HAL_ADC_ConfigChannel+0x108>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	2b06      	cmp	r3, #6
 80035da:	d01f      	beq.n	800361c <HAL_ADC_ConfigChannel+0x108>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	2b07      	cmp	r3, #7
 80035e2:	d01b      	beq.n	800361c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	2107      	movs	r1, #7
 80035f0:	400b      	ands	r3, r1
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d012      	beq.n	800361c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2107      	movs	r1, #7
 8003602:	438a      	bics	r2, r1
 8003604:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6959      	ldr	r1, [r3, #20]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2207      	movs	r2, #7
 8003612:	401a      	ands	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b10      	cmp	r3, #16
 8003622:	d003      	beq.n	800362c <HAL_ADC_ConfigChannel+0x118>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b11      	cmp	r3, #17
 800362a:	d152      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800362c:	4b2f      	ldr	r3, [pc, #188]	; (80036ec <HAL_ADC_ConfigChannel+0x1d8>)
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b10      	cmp	r3, #16
 8003636:	d102      	bne.n	800363e <HAL_ADC_ConfigChannel+0x12a>
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	041b      	lsls	r3, r3, #16
 800363c:	e001      	b.n	8003642 <HAL_ADC_ConfigChannel+0x12e>
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	03db      	lsls	r3, r3, #15
 8003642:	4a2a      	ldr	r2, [pc, #168]	; (80036ec <HAL_ADC_ConfigChannel+0x1d8>)
 8003644:	430b      	orrs	r3, r1
 8003646:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b10      	cmp	r3, #16
 800364e:	d140      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003650:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <HAL_ADC_ConfigChannel+0x1dc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4927      	ldr	r1, [pc, #156]	; (80036f4 <HAL_ADC_ConfigChannel+0x1e0>)
 8003656:	0018      	movs	r0, r3
 8003658:	f7fc fd68 	bl	800012c <__udivsi3>
 800365c:	0003      	movs	r3, r0
 800365e:	001a      	movs	r2, r3
 8003660:	0013      	movs	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	189b      	adds	r3, r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800366a:	e002      	b.n	8003672 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	3b01      	subs	r3, #1
 8003670:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f9      	bne.n	800366c <HAL_ADC_ConfigChannel+0x158>
 8003678:	e02b      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2101      	movs	r1, #1
 8003686:	4099      	lsls	r1, r3
 8003688:	000b      	movs	r3, r1
 800368a:	43d9      	mvns	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	400a      	ands	r2, r1
 8003692:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b10      	cmp	r3, #16
 800369a:	d003      	beq.n	80036a4 <HAL_ADC_ConfigChannel+0x190>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b11      	cmp	r3, #17
 80036a2:	d116      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_ADC_ConfigChannel+0x1d8>)
 80036a6:	6819      	ldr	r1, [r3, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x1a0>
 80036b0:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <HAL_ADC_ConfigChannel+0x1e4>)
 80036b2:	e000      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x1a2>
 80036b4:	4a11      	ldr	r2, [pc, #68]	; (80036fc <HAL_ADC_ConfigChannel+0x1e8>)
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <HAL_ADC_ConfigChannel+0x1d8>)
 80036b8:	400a      	ands	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e009      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	2220      	movs	r2, #32
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80036ca:	230f      	movs	r3, #15
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2234      	movs	r2, #52	; 0x34
 80036d6:	2100      	movs	r1, #0
 80036d8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80036da:	230f      	movs	r3, #15
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	781b      	ldrb	r3, [r3, #0]
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b004      	add	sp, #16
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	00001001 	.word	0x00001001
 80036ec:	40012708 	.word	0x40012708
 80036f0:	20000008 	.word	0x20000008
 80036f4:	000f4240 	.word	0x000f4240
 80036f8:	ff7fffff 	.word	0xff7fffff
 80036fc:	ffbfffff 	.word	0xffbfffff

08003700 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2203      	movs	r2, #3
 8003718:	4013      	ands	r3, r2
 800371a:	2b01      	cmp	r3, #1
 800371c:	d112      	bne.n	8003744 <ADC_Enable+0x44>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2201      	movs	r2, #1
 8003726:	4013      	ands	r3, r2
 8003728:	2b01      	cmp	r3, #1
 800372a:	d009      	beq.n	8003740 <ADC_Enable+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	401a      	ands	r2, r3
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	429a      	cmp	r2, r3
 800373e:	d101      	bne.n	8003744 <ADC_Enable+0x44>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <ADC_Enable+0x46>
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d14b      	bne.n	80037e2 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a26      	ldr	r2, [pc, #152]	; (80037ec <ADC_Enable+0xec>)
 8003752:	4013      	ands	r3, r2
 8003754:	d00d      	beq.n	8003772 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	2210      	movs	r2, #16
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	2201      	movs	r2, #1
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e038      	b.n	80037e4 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2101      	movs	r1, #1
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003782:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <ADC_Enable+0xf0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	491b      	ldr	r1, [pc, #108]	; (80037f4 <ADC_Enable+0xf4>)
 8003788:	0018      	movs	r0, r3
 800378a:	f7fc fccf 	bl	800012c <__udivsi3>
 800378e:	0003      	movs	r3, r0
 8003790:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003792:	e002      	b.n	800379a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	3b01      	subs	r3, #1
 8003798:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f9      	bne.n	8003794 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80037a0:	f7ff fcda 	bl	8003158 <HAL_GetTick>
 80037a4:	0003      	movs	r3, r0
 80037a6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037a8:	e014      	b.n	80037d4 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037aa:	f7ff fcd5 	bl	8003158 <HAL_GetTick>
 80037ae:	0002      	movs	r2, r0
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d90d      	bls.n	80037d4 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	2210      	movs	r2, #16
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	2201      	movs	r2, #1
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e007      	b.n	80037e4 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2201      	movs	r2, #1
 80037dc:	4013      	ands	r3, r2
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d1e3      	bne.n	80037aa <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	80000017 	.word	0x80000017
 80037f0:	20000008 	.word	0x20000008
 80037f4:	000f4240 	.word	0x000f4240

080037f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	0002      	movs	r2, r0
 8003800:	1dfb      	adds	r3, r7, #7
 8003802:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003804:	1dfb      	adds	r3, r7, #7
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b7f      	cmp	r3, #127	; 0x7f
 800380a:	d809      	bhi.n	8003820 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380c:	1dfb      	adds	r3, r7, #7
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	001a      	movs	r2, r3
 8003812:	231f      	movs	r3, #31
 8003814:	401a      	ands	r2, r3
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <__NVIC_EnableIRQ+0x30>)
 8003818:	2101      	movs	r1, #1
 800381a:	4091      	lsls	r1, r2
 800381c:	000a      	movs	r2, r1
 800381e:	601a      	str	r2, [r3, #0]
  }
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}
 8003828:	e000e100 	.word	0xe000e100

0800382c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	0002      	movs	r2, r0
 8003834:	6039      	str	r1, [r7, #0]
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800383a:	1dfb      	adds	r3, r7, #7
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b7f      	cmp	r3, #127	; 0x7f
 8003840:	d828      	bhi.n	8003894 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003842:	4a2f      	ldr	r2, [pc, #188]	; (8003900 <__NVIC_SetPriority+0xd4>)
 8003844:	1dfb      	adds	r3, r7, #7
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b25b      	sxtb	r3, r3
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	33c0      	adds	r3, #192	; 0xc0
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	589b      	ldr	r3, [r3, r2]
 8003852:	1dfa      	adds	r2, r7, #7
 8003854:	7812      	ldrb	r2, [r2, #0]
 8003856:	0011      	movs	r1, r2
 8003858:	2203      	movs	r2, #3
 800385a:	400a      	ands	r2, r1
 800385c:	00d2      	lsls	r2, r2, #3
 800385e:	21ff      	movs	r1, #255	; 0xff
 8003860:	4091      	lsls	r1, r2
 8003862:	000a      	movs	r2, r1
 8003864:	43d2      	mvns	r2, r2
 8003866:	401a      	ands	r2, r3
 8003868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	019b      	lsls	r3, r3, #6
 800386e:	22ff      	movs	r2, #255	; 0xff
 8003870:	401a      	ands	r2, r3
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	0018      	movs	r0, r3
 8003878:	2303      	movs	r3, #3
 800387a:	4003      	ands	r3, r0
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003880:	481f      	ldr	r0, [pc, #124]	; (8003900 <__NVIC_SetPriority+0xd4>)
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	b25b      	sxtb	r3, r3
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	430a      	orrs	r2, r1
 800388c:	33c0      	adds	r3, #192	; 0xc0
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003892:	e031      	b.n	80038f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003894:	4a1b      	ldr	r2, [pc, #108]	; (8003904 <__NVIC_SetPriority+0xd8>)
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	0019      	movs	r1, r3
 800389c:	230f      	movs	r3, #15
 800389e:	400b      	ands	r3, r1
 80038a0:	3b08      	subs	r3, #8
 80038a2:	089b      	lsrs	r3, r3, #2
 80038a4:	3306      	adds	r3, #6
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	18d3      	adds	r3, r2, r3
 80038aa:	3304      	adds	r3, #4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	1dfa      	adds	r2, r7, #7
 80038b0:	7812      	ldrb	r2, [r2, #0]
 80038b2:	0011      	movs	r1, r2
 80038b4:	2203      	movs	r2, #3
 80038b6:	400a      	ands	r2, r1
 80038b8:	00d2      	lsls	r2, r2, #3
 80038ba:	21ff      	movs	r1, #255	; 0xff
 80038bc:	4091      	lsls	r1, r2
 80038be:	000a      	movs	r2, r1
 80038c0:	43d2      	mvns	r2, r2
 80038c2:	401a      	ands	r2, r3
 80038c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	401a      	ands	r2, r3
 80038ce:	1dfb      	adds	r3, r7, #7
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	0018      	movs	r0, r3
 80038d4:	2303      	movs	r3, #3
 80038d6:	4003      	ands	r3, r0
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038dc:	4809      	ldr	r0, [pc, #36]	; (8003904 <__NVIC_SetPriority+0xd8>)
 80038de:	1dfb      	adds	r3, r7, #7
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	001c      	movs	r4, r3
 80038e4:	230f      	movs	r3, #15
 80038e6:	4023      	ands	r3, r4
 80038e8:	3b08      	subs	r3, #8
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	430a      	orrs	r2, r1
 80038ee:	3306      	adds	r3, #6
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	18c3      	adds	r3, r0, r3
 80038f4:	3304      	adds	r3, #4
 80038f6:	601a      	str	r2, [r3, #0]
}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b003      	add	sp, #12
 80038fe:	bd90      	pop	{r4, r7, pc}
 8003900:	e000e100 	.word	0xe000e100
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	4a0c      	ldr	r2, [pc, #48]	; (8003948 <SysTick_Config+0x40>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800391a:	2301      	movs	r3, #1
 800391c:	e010      	b.n	8003940 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <SysTick_Config+0x44>)
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	3a01      	subs	r2, #1
 8003924:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003926:	2301      	movs	r3, #1
 8003928:	425b      	negs	r3, r3
 800392a:	2103      	movs	r1, #3
 800392c:	0018      	movs	r0, r3
 800392e:	f7ff ff7d 	bl	800382c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <SysTick_Config+0x44>)
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <SysTick_Config+0x44>)
 800393a:	2207      	movs	r2, #7
 800393c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800393e:	2300      	movs	r3, #0
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}
 8003948:	00ffffff 	.word	0x00ffffff
 800394c:	e000e010 	.word	0xe000e010

08003950 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	210f      	movs	r1, #15
 800395c:	187b      	adds	r3, r7, r1
 800395e:	1c02      	adds	r2, r0, #0
 8003960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	187b      	adds	r3, r7, r1
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	b25b      	sxtb	r3, r3
 800396a:	0011      	movs	r1, r2
 800396c:	0018      	movs	r0, r3
 800396e:	f7ff ff5d 	bl	800382c <__NVIC_SetPriority>
}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b004      	add	sp, #16
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	0002      	movs	r2, r0
 8003982:	1dfb      	adds	r3, r7, #7
 8003984:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003986:	1dfb      	adds	r3, r7, #7
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	b25b      	sxtb	r3, r3
 800398c:	0018      	movs	r0, r3
 800398e:	f7ff ff33 	bl	80037f8 <__NVIC_EnableIRQ>
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b002      	add	sp, #8
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff ffaf 	bl	8003908 <SysTick_Config>
 80039aa:	0003      	movs	r3, r0
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c2:	e14f      	b.n	8003c64 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4091      	lsls	r1, r2
 80039ce:	000a      	movs	r2, r1
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d100      	bne.n	80039dc <HAL_GPIO_Init+0x28>
 80039da:	e140      	b.n	8003c5e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x38>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b12      	cmp	r3, #18
 80039ea:	d123      	bne.n	8003a34 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	08da      	lsrs	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3208      	adds	r2, #8
 80039f4:	0092      	lsls	r2, r2, #2
 80039f6:	58d3      	ldr	r3, [r2, r3]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2207      	movs	r2, #7
 80039fe:	4013      	ands	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	220f      	movs	r2, #15
 8003a04:	409a      	lsls	r2, r3
 8003a06:	0013      	movs	r3, r2
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2107      	movs	r1, #7
 8003a18:	400b      	ands	r3, r1
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	0013      	movs	r3, r2
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	08da      	lsrs	r2, r3, #3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3208      	adds	r2, #8
 8003a2e:	0092      	lsls	r2, r2, #2
 8003a30:	6939      	ldr	r1, [r7, #16]
 8003a32:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	409a      	lsls	r2, r3
 8003a42:	0013      	movs	r3, r2
 8003a44:	43da      	mvns	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2203      	movs	r2, #3
 8003a52:	401a      	ands	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	0013      	movs	r3, r2
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d00b      	beq.n	8003a88 <HAL_GPIO_Init+0xd4>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d007      	beq.n	8003a88 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a7c:	2b11      	cmp	r3, #17
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b12      	cmp	r3, #18
 8003a86:	d130      	bne.n	8003aea <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	2203      	movs	r2, #3
 8003a94:	409a      	lsls	r2, r3
 8003a96:	0013      	movs	r3, r2
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	0013      	movs	r3, r2
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003abe:	2201      	movs	r2, #1
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	0013      	movs	r3, r2
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	409a      	lsls	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	2203      	movs	r2, #3
 8003af6:	409a      	lsls	r2, r3
 8003af8:	0013      	movs	r3, r2
 8003afa:	43da      	mvns	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	0013      	movs	r3, r2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	055b      	lsls	r3, r3, #21
 8003b22:	4013      	ands	r3, r2
 8003b24:	d100      	bne.n	8003b28 <HAL_GPIO_Init+0x174>
 8003b26:	e09a      	b.n	8003c5e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b28:	4b54      	ldr	r3, [pc, #336]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	4b53      	ldr	r3, [pc, #332]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003b2e:	2101      	movs	r1, #1
 8003b30:	430a      	orrs	r2, r1
 8003b32:	619a      	str	r2, [r3, #24]
 8003b34:	4b51      	ldr	r3, [pc, #324]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b40:	4a4f      	ldr	r2, [pc, #316]	; (8003c80 <HAL_GPIO_Init+0x2cc>)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	3302      	adds	r3, #2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	589b      	ldr	r3, [r3, r2]
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2203      	movs	r2, #3
 8003b52:	4013      	ands	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	220f      	movs	r2, #15
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	0013      	movs	r3, r2
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	2390      	movs	r3, #144	; 0x90
 8003b68:	05db      	lsls	r3, r3, #23
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d013      	beq.n	8003b96 <HAL_GPIO_Init+0x1e2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a44      	ldr	r2, [pc, #272]	; (8003c84 <HAL_GPIO_Init+0x2d0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00d      	beq.n	8003b92 <HAL_GPIO_Init+0x1de>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a43      	ldr	r2, [pc, #268]	; (8003c88 <HAL_GPIO_Init+0x2d4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <HAL_GPIO_Init+0x1da>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a42      	ldr	r2, [pc, #264]	; (8003c8c <HAL_GPIO_Init+0x2d8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_GPIO_Init+0x1d6>
 8003b86:	2303      	movs	r3, #3
 8003b88:	e006      	b.n	8003b98 <HAL_GPIO_Init+0x1e4>
 8003b8a:	2305      	movs	r3, #5
 8003b8c:	e004      	b.n	8003b98 <HAL_GPIO_Init+0x1e4>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e002      	b.n	8003b98 <HAL_GPIO_Init+0x1e4>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_GPIO_Init+0x1e4>
 8003b96:	2300      	movs	r3, #0
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	2103      	movs	r1, #3
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	0092      	lsls	r2, r2, #2
 8003ba0:	4093      	lsls	r3, r2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ba8:	4935      	ldr	r1, [pc, #212]	; (8003c80 <HAL_GPIO_Init+0x2cc>)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	089b      	lsrs	r3, r3, #2
 8003bae:	3302      	adds	r3, #2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bb6:	4b36      	ldr	r3, [pc, #216]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	025b      	lsls	r3, r3, #9
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003bda:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003be0:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	43da      	mvns	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4013      	ands	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	029b      	lsls	r3, r3, #10
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c0a:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	43da      	mvns	r2, r3
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	035b      	lsls	r3, r3, #13
 8003c22:	4013      	ands	r3, r2
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c2e:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c34:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	43da      	mvns	r2, r3
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	039b      	lsls	r3, r3, #14
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c58:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <HAL_GPIO_Init+0x2dc>)
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	40da      	lsrs	r2, r3
 8003c6c:	1e13      	subs	r3, r2, #0
 8003c6e:	d000      	beq.n	8003c72 <HAL_GPIO_Init+0x2be>
 8003c70:	e6a8      	b.n	80039c4 <HAL_GPIO_Init+0x10>
  } 
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b006      	add	sp, #24
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40010000 	.word	0x40010000
 8003c84:	48000400 	.word	0x48000400
 8003c88:	48000800 	.word	0x48000800
 8003c8c:	48000c00 	.word	0x48000c00
 8003c90:	40010400 	.word	0x40010400

08003c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	0008      	movs	r0, r1
 8003c9e:	0011      	movs	r1, r2
 8003ca0:	1cbb      	adds	r3, r7, #2
 8003ca2:	1c02      	adds	r2, r0, #0
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	1c7b      	adds	r3, r7, #1
 8003ca8:	1c0a      	adds	r2, r1, #0
 8003caa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cac:	1c7b      	adds	r3, r7, #1
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d004      	beq.n	8003cbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cb4:	1cbb      	adds	r3, r7, #2
 8003cb6:	881a      	ldrh	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cbc:	e003      	b.n	8003cc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cbe:	1cbb      	adds	r3, r7, #2
 8003cc0:	881a      	ldrh	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e082      	b.n	8003de8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2241      	movs	r2, #65	; 0x41
 8003ce6:	5c9b      	ldrb	r3, [r3, r2]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d107      	bne.n	8003cfe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2240      	movs	r2, #64	; 0x40
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f7ff f817 	bl	8002d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2241      	movs	r2, #65	; 0x41
 8003d02:	2124      	movs	r1, #36	; 0x24
 8003d04:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	438a      	bics	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4934      	ldr	r1, [pc, #208]	; (8003df0 <HAL_I2C_Init+0x120>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4931      	ldr	r1, [pc, #196]	; (8003df4 <HAL_I2C_Init+0x124>)
 8003d30:	400a      	ands	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d108      	bne.n	8003d4e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	0209      	lsls	r1, r1, #8
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	e007      	b.n	8003d5e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2184      	movs	r1, #132	; 0x84
 8003d58:	0209      	lsls	r1, r1, #8
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d104      	bne.n	8003d70 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2280      	movs	r2, #128	; 0x80
 8003d6c:	0112      	lsls	r2, r2, #4
 8003d6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	491f      	ldr	r1, [pc, #124]	; (8003df8 <HAL_I2C_Init+0x128>)
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	491a      	ldr	r1, [pc, #104]	; (8003df4 <HAL_I2C_Init+0x124>)
 8003d8c:	400a      	ands	r2, r1
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	0011      	movs	r1, r2
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	021a      	lsls	r2, r3, #8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69d9      	ldr	r1, [r3, #28]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2241      	movs	r2, #65	; 0x41
 8003dd4:	2120      	movs	r1, #32
 8003dd6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2242      	movs	r2, #66	; 0x42
 8003de2:	2100      	movs	r1, #0
 8003de4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	0018      	movs	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b002      	add	sp, #8
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	f0ffffff 	.word	0xf0ffffff
 8003df4:	ffff7fff 	.word	0xffff7fff
 8003df8:	02008000 	.word	0x02008000

08003dfc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b089      	sub	sp, #36	; 0x24
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	000c      	movs	r4, r1
 8003e06:	0010      	movs	r0, r2
 8003e08:	0019      	movs	r1, r3
 8003e0a:	230a      	movs	r3, #10
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	1c22      	adds	r2, r4, #0
 8003e10:	801a      	strh	r2, [r3, #0]
 8003e12:	2308      	movs	r3, #8
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	1c02      	adds	r2, r0, #0
 8003e18:	801a      	strh	r2, [r3, #0]
 8003e1a:	1dbb      	adds	r3, r7, #6
 8003e1c:	1c0a      	adds	r2, r1, #0
 8003e1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2241      	movs	r2, #65	; 0x41
 8003e24:	5c9b      	ldrb	r3, [r3, r2]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d000      	beq.n	8003e2e <HAL_I2C_Mem_Write+0x32>
 8003e2c:	e10c      	b.n	8004048 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d004      	beq.n	8003e3e <HAL_I2C_Mem_Write+0x42>
 8003e34:	232c      	movs	r3, #44	; 0x2c
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2280      	movs	r2, #128	; 0x80
 8003e42:	0092      	lsls	r2, r2, #2
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0ff      	b.n	800404a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2240      	movs	r2, #64	; 0x40
 8003e4e:	5c9b      	ldrb	r3, [r3, r2]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_I2C_Mem_Write+0x5c>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e0f8      	b.n	800404a <HAL_I2C_Mem_Write+0x24e>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e60:	f7ff f97a 	bl	8003158 <HAL_GetTick>
 8003e64:	0003      	movs	r3, r0
 8003e66:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	0219      	lsls	r1, r3, #8
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	2319      	movs	r3, #25
 8003e74:	2201      	movs	r2, #1
 8003e76:	f000 fb0b 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0e3      	b.n	800404a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2241      	movs	r2, #65	; 0x41
 8003e86:	2121      	movs	r1, #33	; 0x21
 8003e88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2242      	movs	r2, #66	; 0x42
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	222c      	movs	r2, #44	; 0x2c
 8003ea2:	18ba      	adds	r2, r7, r2
 8003ea4:	8812      	ldrh	r2, [r2, #0]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eae:	1dbb      	adds	r3, r7, #6
 8003eb0:	881c      	ldrh	r4, [r3, #0]
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	230a      	movs	r3, #10
 8003eba:	18fb      	adds	r3, r7, r3
 8003ebc:	8819      	ldrh	r1, [r3, #0]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	0023      	movs	r3, r4
 8003eca:	f000 f9f9 	bl	80042c0 <I2C_RequestMemoryWrite>
 8003ece:	1e03      	subs	r3, r0, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2240      	movs	r2, #64	; 0x40
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0b5      	b.n	800404a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2bff      	cmp	r3, #255	; 0xff
 8003ee6:	d911      	bls.n	8003f0c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	22ff      	movs	r2, #255	; 0xff
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	045c      	lsls	r4, r3, #17
 8003ef8:	230a      	movs	r3, #10
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	8819      	ldrh	r1, [r3, #0]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	2300      	movs	r3, #0
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	0023      	movs	r3, r4
 8003f06:	f000 fbe3 	bl	80046d0 <I2C_TransferConfig>
 8003f0a:	e012      	b.n	8003f32 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	049c      	lsls	r4, r3, #18
 8003f20:	230a      	movs	r3, #10
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	8819      	ldrh	r1, [r3, #0]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	0023      	movs	r3, r4
 8003f2e:	f000 fbcf 	bl	80046d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f000 fae8 	bl	800450e <I2C_WaitOnTXISFlagUntilTimeout>
 8003f3e:	1e03      	subs	r3, r0, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e081      	b.n	800404a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d03a      	beq.n	8003ff6 <HAL_I2C_Mem_Write+0x1fa>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d136      	bne.n	8003ff6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	0013      	movs	r3, r2
 8003f92:	2200      	movs	r2, #0
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	f000 fa7b 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	1e03      	subs	r3, r0, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e053      	b.n	800404a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2bff      	cmp	r3, #255	; 0xff
 8003faa:	d911      	bls.n	8003fd0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	22ff      	movs	r2, #255	; 0xff
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	045c      	lsls	r4, r3, #17
 8003fbc:	230a      	movs	r3, #10
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	8819      	ldrh	r1, [r3, #0]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	0023      	movs	r3, r4
 8003fca:	f000 fb81 	bl	80046d0 <I2C_TransferConfig>
 8003fce:	e012      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	049c      	lsls	r4, r3, #18
 8003fe4:	230a      	movs	r3, #10
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	8819      	ldrh	r1, [r3, #0]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	2300      	movs	r3, #0
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	0023      	movs	r3, r4
 8003ff2:	f000 fb6d 	bl	80046d0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d198      	bne.n	8003f32 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	0018      	movs	r0, r3
 8004008:	f000 fac0 	bl	800458c <I2C_WaitOnSTOPFlagUntilTimeout>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d001      	beq.n	8004014 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e01a      	b.n	800404a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2220      	movs	r2, #32
 800401a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	490b      	ldr	r1, [pc, #44]	; (8004054 <HAL_I2C_Mem_Write+0x258>)
 8004028:	400a      	ands	r2, r1
 800402a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2241      	movs	r2, #65	; 0x41
 8004030:	2120      	movs	r1, #32
 8004032:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2242      	movs	r2, #66	; 0x42
 8004038:	2100      	movs	r1, #0
 800403a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2240      	movs	r2, #64	; 0x40
 8004040:	2100      	movs	r1, #0
 8004042:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b007      	add	sp, #28
 8004050:	bd90      	pop	{r4, r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	fe00e800 	.word	0xfe00e800

08004058 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b089      	sub	sp, #36	; 0x24
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	000c      	movs	r4, r1
 8004062:	0010      	movs	r0, r2
 8004064:	0019      	movs	r1, r3
 8004066:	230a      	movs	r3, #10
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	1c22      	adds	r2, r4, #0
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	2308      	movs	r3, #8
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	1c02      	adds	r2, r0, #0
 8004074:	801a      	strh	r2, [r3, #0]
 8004076:	1dbb      	adds	r3, r7, #6
 8004078:	1c0a      	adds	r2, r1, #0
 800407a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2241      	movs	r2, #65	; 0x41
 8004080:	5c9b      	ldrb	r3, [r3, r2]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b20      	cmp	r3, #32
 8004086:	d000      	beq.n	800408a <HAL_I2C_Mem_Read+0x32>
 8004088:	e110      	b.n	80042ac <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	2b00      	cmp	r3, #0
 800408e:	d004      	beq.n	800409a <HAL_I2C_Mem_Read+0x42>
 8004090:	232c      	movs	r3, #44	; 0x2c
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d105      	bne.n	80040a6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2280      	movs	r2, #128	; 0x80
 800409e:	0092      	lsls	r2, r2, #2
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e103      	b.n	80042ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2240      	movs	r2, #64	; 0x40
 80040aa:	5c9b      	ldrb	r3, [r3, r2]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_I2C_Mem_Read+0x5c>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e0fc      	b.n	80042ae <HAL_I2C_Mem_Read+0x256>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2240      	movs	r2, #64	; 0x40
 80040b8:	2101      	movs	r1, #1
 80040ba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040bc:	f7ff f84c 	bl	8003158 <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	0219      	lsls	r1, r3, #8
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	2319      	movs	r3, #25
 80040d0:	2201      	movs	r2, #1
 80040d2:	f000 f9dd 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e0e7      	b.n	80042ae <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2241      	movs	r2, #65	; 0x41
 80040e2:	2122      	movs	r1, #34	; 0x22
 80040e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2242      	movs	r2, #66	; 0x42
 80040ea:	2140      	movs	r1, #64	; 0x40
 80040ec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	222c      	movs	r2, #44	; 0x2c
 80040fe:	18ba      	adds	r2, r7, r2
 8004100:	8812      	ldrh	r2, [r2, #0]
 8004102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800410a:	1dbb      	adds	r3, r7, #6
 800410c:	881c      	ldrh	r4, [r3, #0]
 800410e:	2308      	movs	r3, #8
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	881a      	ldrh	r2, [r3, #0]
 8004114:	230a      	movs	r3, #10
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	8819      	ldrh	r1, [r3, #0]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	0023      	movs	r3, r4
 8004126:	f000 f92f 	bl	8004388 <I2C_RequestMemoryRead>
 800412a:	1e03      	subs	r3, r0, #0
 800412c:	d005      	beq.n	800413a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2240      	movs	r2, #64	; 0x40
 8004132:	2100      	movs	r1, #0
 8004134:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e0b9      	b.n	80042ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	2bff      	cmp	r3, #255	; 0xff
 8004142:	d911      	bls.n	8004168 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	22ff      	movs	r2, #255	; 0xff
 8004148:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414e:	b2da      	uxtb	r2, r3
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	045c      	lsls	r4, r3, #17
 8004154:	230a      	movs	r3, #10
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	8819      	ldrh	r1, [r3, #0]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	4b56      	ldr	r3, [pc, #344]	; (80042b8 <HAL_I2C_Mem_Read+0x260>)
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	0023      	movs	r3, r4
 8004162:	f000 fab5 	bl	80046d0 <I2C_TransferConfig>
 8004166:	e012      	b.n	800418e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	b2da      	uxtb	r2, r3
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	049c      	lsls	r4, r3, #18
 800417c:	230a      	movs	r3, #10
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	8819      	ldrh	r1, [r3, #0]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	4b4c      	ldr	r3, [pc, #304]	; (80042b8 <HAL_I2C_Mem_Read+0x260>)
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	0023      	movs	r3, r4
 800418a:	f000 faa1 	bl	80046d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800418e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	0013      	movs	r3, r2
 8004198:	2200      	movs	r2, #0
 800419a:	2104      	movs	r1, #4
 800419c:	f000 f978 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 80041a0:	1e03      	subs	r3, r0, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e082      	b.n	80042ae <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d03a      	beq.n	800425a <HAL_I2C_Mem_Read+0x202>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d136      	bne.n	800425a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	0013      	movs	r3, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	f000 f949 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 80041fe:	1e03      	subs	r3, r0, #0
 8004200:	d001      	beq.n	8004206 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e053      	b.n	80042ae <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	2bff      	cmp	r3, #255	; 0xff
 800420e:	d911      	bls.n	8004234 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	22ff      	movs	r2, #255	; 0xff
 8004214:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	b2da      	uxtb	r2, r3
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	045c      	lsls	r4, r3, #17
 8004220:	230a      	movs	r3, #10
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	8819      	ldrh	r1, [r3, #0]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	2300      	movs	r3, #0
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	0023      	movs	r3, r4
 800422e:	f000 fa4f 	bl	80046d0 <I2C_TransferConfig>
 8004232:	e012      	b.n	800425a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004242:	b2da      	uxtb	r2, r3
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	049c      	lsls	r4, r3, #18
 8004248:	230a      	movs	r3, #10
 800424a:	18fb      	adds	r3, r7, r3
 800424c:	8819      	ldrh	r1, [r3, #0]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	2300      	movs	r3, #0
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	0023      	movs	r3, r4
 8004256:	f000 fa3b 	bl	80046d0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d194      	bne.n	800418e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	0018      	movs	r0, r3
 800426c:	f000 f98e 	bl	800458c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004270:	1e03      	subs	r3, r0, #0
 8004272:	d001      	beq.n	8004278 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e01a      	b.n	80042ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2220      	movs	r2, #32
 800427e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	490c      	ldr	r1, [pc, #48]	; (80042bc <HAL_I2C_Mem_Read+0x264>)
 800428c:	400a      	ands	r2, r1
 800428e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2241      	movs	r2, #65	; 0x41
 8004294:	2120      	movs	r1, #32
 8004296:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2242      	movs	r2, #66	; 0x42
 800429c:	2100      	movs	r1, #0
 800429e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2240      	movs	r2, #64	; 0x40
 80042a4:	2100      	movs	r1, #0
 80042a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b007      	add	sp, #28
 80042b4:	bd90      	pop	{r4, r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	80002400 	.word	0x80002400
 80042bc:	fe00e800 	.word	0xfe00e800

080042c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b5b0      	push	{r4, r5, r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	000c      	movs	r4, r1
 80042ca:	0010      	movs	r0, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	250a      	movs	r5, #10
 80042d0:	197b      	adds	r3, r7, r5
 80042d2:	1c22      	adds	r2, r4, #0
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	2308      	movs	r3, #8
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	1c02      	adds	r2, r0, #0
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	1dbb      	adds	r3, r7, #6
 80042e0:	1c0a      	adds	r2, r1, #0
 80042e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042e4:	1dbb      	adds	r3, r7, #6
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	045c      	lsls	r4, r3, #17
 80042ee:	197b      	adds	r3, r7, r5
 80042f0:	8819      	ldrh	r1, [r3, #0]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	4b23      	ldr	r3, [pc, #140]	; (8004384 <I2C_RequestMemoryWrite+0xc4>)
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	0023      	movs	r3, r4
 80042fa:	f000 f9e9 	bl	80046d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004300:	6a39      	ldr	r1, [r7, #32]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	0018      	movs	r0, r3
 8004306:	f000 f902 	bl	800450e <I2C_WaitOnTXISFlagUntilTimeout>
 800430a:	1e03      	subs	r3, r0, #0
 800430c:	d001      	beq.n	8004312 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e033      	b.n	800437a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004312:	1dbb      	adds	r3, r7, #6
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d107      	bne.n	800432a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800431a:	2308      	movs	r3, #8
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
 8004328:	e019      	b.n	800435e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800432a:	2308      	movs	r3, #8
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	b29b      	uxth	r3, r3
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433e:	6a39      	ldr	r1, [r7, #32]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	0018      	movs	r0, r3
 8004344:	f000 f8e3 	bl	800450e <I2C_WaitOnTXISFlagUntilTimeout>
 8004348:	1e03      	subs	r3, r0, #0
 800434a:	d001      	beq.n	8004350 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e014      	b.n	800437a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004350:	2308      	movs	r3, #8
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b2da      	uxtb	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	0013      	movs	r3, r2
 8004368:	2200      	movs	r2, #0
 800436a:	2180      	movs	r1, #128	; 0x80
 800436c:	f000 f890 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 8004370:	1e03      	subs	r3, r0, #0
 8004372:	d001      	beq.n	8004378 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bdb0      	pop	{r4, r5, r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	80002000 	.word	0x80002000

08004388 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b5b0      	push	{r4, r5, r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	000c      	movs	r4, r1
 8004392:	0010      	movs	r0, r2
 8004394:	0019      	movs	r1, r3
 8004396:	250a      	movs	r5, #10
 8004398:	197b      	adds	r3, r7, r5
 800439a:	1c22      	adds	r2, r4, #0
 800439c:	801a      	strh	r2, [r3, #0]
 800439e:	2308      	movs	r3, #8
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	1c02      	adds	r2, r0, #0
 80043a4:	801a      	strh	r2, [r3, #0]
 80043a6:	1dbb      	adds	r3, r7, #6
 80043a8:	1c0a      	adds	r2, r1, #0
 80043aa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043ac:	1dbb      	adds	r3, r7, #6
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	197b      	adds	r3, r7, r5
 80043b4:	8819      	ldrh	r1, [r3, #0]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <I2C_RequestMemoryRead+0xc0>)
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	2300      	movs	r3, #0
 80043be:	f000 f987 	bl	80046d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	6a39      	ldr	r1, [r7, #32]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f000 f8a0 	bl	800450e <I2C_WaitOnTXISFlagUntilTimeout>
 80043ce:	1e03      	subs	r3, r0, #0
 80043d0:	d001      	beq.n	80043d6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e033      	b.n	800443e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043d6:	1dbb      	adds	r3, r7, #6
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043de:	2308      	movs	r3, #8
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
 80043ec:	e019      	b.n	8004422 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043ee:	2308      	movs	r3, #8
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004402:	6a39      	ldr	r1, [r7, #32]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	0018      	movs	r0, r3
 8004408:	f000 f881 	bl	800450e <I2C_WaitOnTXISFlagUntilTimeout>
 800440c:	1e03      	subs	r3, r0, #0
 800440e:	d001      	beq.n	8004414 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e014      	b.n	800443e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004414:	2308      	movs	r3, #8
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	0013      	movs	r3, r2
 800442c:	2200      	movs	r2, #0
 800442e:	2140      	movs	r1, #64	; 0x40
 8004430:	f000 f82e 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 8004434:	1e03      	subs	r3, r0, #0
 8004436:	d001      	beq.n	800443c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	0018      	movs	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	b004      	add	sp, #16
 8004444:	bdb0      	pop	{r4, r5, r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	80002000 	.word	0x80002000

0800444c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2202      	movs	r2, #2
 800445c:	4013      	ands	r3, r2
 800445e:	2b02      	cmp	r3, #2
 8004460:	d103      	bne.n	800446a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2200      	movs	r2, #0
 8004468:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2201      	movs	r2, #1
 8004472:	4013      	ands	r3, r2
 8004474:	2b01      	cmp	r3, #1
 8004476:	d007      	beq.n	8004488 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2101      	movs	r1, #1
 8004484:	430a      	orrs	r2, r1
 8004486:	619a      	str	r2, [r3, #24]
  }
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	b002      	add	sp, #8
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	1dfb      	adds	r3, r7, #7
 800449e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a0:	e021      	b.n	80044e6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	d01e      	beq.n	80044e6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a8:	f7fe fe56 	bl	8003158 <HAL_GetTick>
 80044ac:	0002      	movs	r2, r0
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d302      	bcc.n	80044be <I2C_WaitOnFlagUntilTimeout+0x2e>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d113      	bne.n	80044e6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	2220      	movs	r2, #32
 80044c4:	431a      	orrs	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2241      	movs	r2, #65	; 0x41
 80044ce:	2120      	movs	r1, #32
 80044d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2242      	movs	r2, #66	; 0x42
 80044d6:	2100      	movs	r1, #0
 80044d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2240      	movs	r2, #64	; 0x40
 80044de:	2100      	movs	r1, #0
 80044e0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00f      	b.n	8004506 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	425a      	negs	r2, r3
 80044f6:	4153      	adcs	r3, r2
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	001a      	movs	r2, r3
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d0ce      	beq.n	80044a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	0018      	movs	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	b004      	add	sp, #16
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800451a:	e02b      	b.n	8004574 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	0018      	movs	r0, r3
 8004524:	f000 f86e 	bl	8004604 <I2C_IsAcknowledgeFailed>
 8004528:	1e03      	subs	r3, r0, #0
 800452a:	d001      	beq.n	8004530 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e029      	b.n	8004584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	3301      	adds	r3, #1
 8004534:	d01e      	beq.n	8004574 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004536:	f7fe fe0f 	bl	8003158 <HAL_GetTick>
 800453a:	0002      	movs	r2, r0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	429a      	cmp	r2, r3
 8004544:	d302      	bcc.n	800454c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d113      	bne.n	8004574 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004550:	2220      	movs	r2, #32
 8004552:	431a      	orrs	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2241      	movs	r2, #65	; 0x41
 800455c:	2120      	movs	r1, #32
 800455e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2242      	movs	r2, #66	; 0x42
 8004564:	2100      	movs	r1, #0
 8004566:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2240      	movs	r2, #64	; 0x40
 800456c:	2100      	movs	r1, #0
 800456e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e007      	b.n	8004584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2202      	movs	r2, #2
 800457c:	4013      	ands	r3, r2
 800457e:	2b02      	cmp	r3, #2
 8004580:	d1cc      	bne.n	800451c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b004      	add	sp, #16
 800458a:	bd80      	pop	{r7, pc}

0800458c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004598:	e028      	b.n	80045ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f000 f82f 	bl	8004604 <I2C_IsAcknowledgeFailed>
 80045a6:	1e03      	subs	r3, r0, #0
 80045a8:	d001      	beq.n	80045ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e026      	b.n	80045fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ae:	f7fe fdd3 	bl	8003158 <HAL_GetTick>
 80045b2:	0002      	movs	r2, r0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d113      	bne.n	80045ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	2220      	movs	r2, #32
 80045ca:	431a      	orrs	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2241      	movs	r2, #65	; 0x41
 80045d4:	2120      	movs	r1, #32
 80045d6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2242      	movs	r2, #66	; 0x42
 80045dc:	2100      	movs	r1, #0
 80045de:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2240      	movs	r2, #64	; 0x40
 80045e4:	2100      	movs	r1, #0
 80045e6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e007      	b.n	80045fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2220      	movs	r2, #32
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d1cf      	bne.n	800459a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	0018      	movs	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	b004      	add	sp, #16
 8004602:	bd80      	pop	{r7, pc}

08004604 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	2210      	movs	r2, #16
 8004618:	4013      	ands	r3, r2
 800461a:	2b10      	cmp	r3, #16
 800461c:	d151      	bne.n	80046c2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800461e:	e021      	b.n	8004664 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	3301      	adds	r3, #1
 8004624:	d01e      	beq.n	8004664 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004626:	f7fe fd97 	bl	8003158 <HAL_GetTick>
 800462a:	0002      	movs	r2, r0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	429a      	cmp	r2, r3
 8004634:	d302      	bcc.n	800463c <I2C_IsAcknowledgeFailed+0x38>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d113      	bne.n	8004664 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	2220      	movs	r2, #32
 8004642:	431a      	orrs	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2241      	movs	r2, #65	; 0x41
 800464c:	2120      	movs	r1, #32
 800464e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2242      	movs	r2, #66	; 0x42
 8004654:	2100      	movs	r1, #0
 8004656:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2240      	movs	r2, #64	; 0x40
 800465c:	2100      	movs	r1, #0
 800465e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e02f      	b.n	80046c4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2220      	movs	r2, #32
 800466c:	4013      	ands	r3, r2
 800466e:	2b20      	cmp	r3, #32
 8004670:	d1d6      	bne.n	8004620 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2210      	movs	r2, #16
 8004678:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2220      	movs	r2, #32
 8004680:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	0018      	movs	r0, r3
 8004686:	f7ff fee1 	bl	800444c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	490d      	ldr	r1, [pc, #52]	; (80046cc <I2C_IsAcknowledgeFailed+0xc8>)
 8004696:	400a      	ands	r2, r1
 8004698:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	2204      	movs	r2, #4
 80046a0:	431a      	orrs	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2241      	movs	r2, #65	; 0x41
 80046aa:	2120      	movs	r1, #32
 80046ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2242      	movs	r2, #66	; 0x42
 80046b2:	2100      	movs	r1, #0
 80046b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2240      	movs	r2, #64	; 0x40
 80046ba:	2100      	movs	r1, #0
 80046bc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	0018      	movs	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b004      	add	sp, #16
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	fe00e800 	.word	0xfe00e800

080046d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	0008      	movs	r0, r1
 80046da:	0011      	movs	r1, r2
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	240a      	movs	r4, #10
 80046e0:	193b      	adds	r3, r7, r4
 80046e2:	1c02      	adds	r2, r0, #0
 80046e4:	801a      	strh	r2, [r3, #0]
 80046e6:	2009      	movs	r0, #9
 80046e8:	183b      	adds	r3, r7, r0
 80046ea:	1c0a      	adds	r2, r1, #0
 80046ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	0d51      	lsrs	r1, r2, #21
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	00d2      	lsls	r2, r2, #3
 80046fc:	400a      	ands	r2, r1
 80046fe:	490e      	ldr	r1, [pc, #56]	; (8004738 <I2C_TransferConfig+0x68>)
 8004700:	430a      	orrs	r2, r1
 8004702:	43d2      	mvns	r2, r2
 8004704:	401a      	ands	r2, r3
 8004706:	0011      	movs	r1, r2
 8004708:	193b      	adds	r3, r7, r4
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	059b      	lsls	r3, r3, #22
 800470e:	0d9a      	lsrs	r2, r3, #22
 8004710:	183b      	adds	r3, r7, r0
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	0418      	lsls	r0, r3, #16
 8004716:	23ff      	movs	r3, #255	; 0xff
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	4003      	ands	r3, r0
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	431a      	orrs	r2, r3
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	431a      	orrs	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b005      	add	sp, #20
 8004734:	bd90      	pop	{r4, r7, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	03ff63ff 	.word	0x03ff63ff

0800473c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2241      	movs	r2, #65	; 0x41
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b20      	cmp	r3, #32
 8004750:	d138      	bne.n	80047c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2240      	movs	r2, #64	; 0x40
 8004756:	5c9b      	ldrb	r3, [r3, r2]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800475c:	2302      	movs	r3, #2
 800475e:	e032      	b.n	80047c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2240      	movs	r2, #64	; 0x40
 8004764:	2101      	movs	r1, #1
 8004766:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2241      	movs	r2, #65	; 0x41
 800476c:	2124      	movs	r1, #36	; 0x24
 800476e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2101      	movs	r1, #1
 800477c:	438a      	bics	r2, r1
 800477e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4911      	ldr	r1, [pc, #68]	; (80047d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800478c:	400a      	ands	r2, r1
 800478e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2101      	movs	r1, #1
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2241      	movs	r2, #65	; 0x41
 80047b4:	2120      	movs	r1, #32
 80047b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2240      	movs	r2, #64	; 0x40
 80047bc:	2100      	movs	r1, #0
 80047be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e000      	b.n	80047c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
  }
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b002      	add	sp, #8
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	ffffefff 	.word	0xffffefff

080047d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2241      	movs	r2, #65	; 0x41
 80047e2:	5c9b      	ldrb	r3, [r3, r2]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d139      	bne.n	800485e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2240      	movs	r2, #64	; 0x40
 80047ee:	5c9b      	ldrb	r3, [r3, r2]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e033      	b.n	8004860 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2240      	movs	r2, #64	; 0x40
 80047fc:	2101      	movs	r1, #1
 80047fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2241      	movs	r2, #65	; 0x41
 8004804:	2124      	movs	r1, #36	; 0x24
 8004806:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2101      	movs	r1, #1
 8004814:	438a      	bics	r2, r1
 8004816:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a11      	ldr	r2, [pc, #68]	; (8004868 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2101      	movs	r1, #1
 8004846:	430a      	orrs	r2, r1
 8004848:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2241      	movs	r2, #65	; 0x41
 800484e:	2120      	movs	r1, #32
 8004850:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2240      	movs	r2, #64	; 0x40
 8004856:	2100      	movs	r1, #0
 8004858:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	0018      	movs	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	b004      	add	sp, #16
 8004866:	bd80      	pop	{r7, pc}
 8004868:	fffff0ff 	.word	0xfffff0ff

0800486c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e303      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2201      	movs	r2, #1
 8004884:	4013      	ands	r3, r2
 8004886:	d100      	bne.n	800488a <HAL_RCC_OscConfig+0x1e>
 8004888:	e08d      	b.n	80049a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800488a:	4bc4      	ldr	r3, [pc, #784]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	220c      	movs	r2, #12
 8004890:	4013      	ands	r3, r2
 8004892:	2b04      	cmp	r3, #4
 8004894:	d00e      	beq.n	80048b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004896:	4bc1      	ldr	r3, [pc, #772]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	220c      	movs	r2, #12
 800489c:	4013      	ands	r3, r2
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d116      	bne.n	80048d0 <HAL_RCC_OscConfig+0x64>
 80048a2:	4bbe      	ldr	r3, [pc, #760]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	025b      	lsls	r3, r3, #9
 80048aa:	401a      	ands	r2, r3
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	025b      	lsls	r3, r3, #9
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d10d      	bne.n	80048d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	4bb9      	ldr	r3, [pc, #740]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	029b      	lsls	r3, r3, #10
 80048bc:	4013      	ands	r3, r2
 80048be:	d100      	bne.n	80048c2 <HAL_RCC_OscConfig+0x56>
 80048c0:	e070      	b.n	80049a4 <HAL_RCC_OscConfig+0x138>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d000      	beq.n	80048cc <HAL_RCC_OscConfig+0x60>
 80048ca:	e06b      	b.n	80049a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e2da      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x7c>
 80048d8:	4bb0      	ldr	r3, [pc, #704]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4baf      	ldr	r3, [pc, #700]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80048de:	2180      	movs	r1, #128	; 0x80
 80048e0:	0249      	lsls	r1, r1, #9
 80048e2:	430a      	orrs	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e02f      	b.n	8004948 <HAL_RCC_OscConfig+0xdc>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10c      	bne.n	800490a <HAL_RCC_OscConfig+0x9e>
 80048f0:	4baa      	ldr	r3, [pc, #680]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4ba9      	ldr	r3, [pc, #676]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80048f6:	49aa      	ldr	r1, [pc, #680]	; (8004ba0 <HAL_RCC_OscConfig+0x334>)
 80048f8:	400a      	ands	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	4ba7      	ldr	r3, [pc, #668]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4ba6      	ldr	r3, [pc, #664]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004902:	49a8      	ldr	r1, [pc, #672]	; (8004ba4 <HAL_RCC_OscConfig+0x338>)
 8004904:	400a      	ands	r2, r1
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	e01e      	b.n	8004948 <HAL_RCC_OscConfig+0xdc>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b05      	cmp	r3, #5
 8004910:	d10e      	bne.n	8004930 <HAL_RCC_OscConfig+0xc4>
 8004912:	4ba2      	ldr	r3, [pc, #648]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4ba1      	ldr	r3, [pc, #644]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	02c9      	lsls	r1, r1, #11
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	4b9e      	ldr	r3, [pc, #632]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b9d      	ldr	r3, [pc, #628]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	0249      	lsls	r1, r1, #9
 800492a:	430a      	orrs	r2, r1
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0xdc>
 8004930:	4b9a      	ldr	r3, [pc, #616]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	4b99      	ldr	r3, [pc, #612]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004936:	499a      	ldr	r1, [pc, #616]	; (8004ba0 <HAL_RCC_OscConfig+0x334>)
 8004938:	400a      	ands	r2, r1
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	4b97      	ldr	r3, [pc, #604]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b96      	ldr	r3, [pc, #600]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004942:	4998      	ldr	r1, [pc, #608]	; (8004ba4 <HAL_RCC_OscConfig+0x338>)
 8004944:	400a      	ands	r2, r1
 8004946:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d014      	beq.n	800497a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fe fc02 	bl	8003158 <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800495a:	f7fe fbfd 	bl	8003158 <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b64      	cmp	r3, #100	; 0x64
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e28c      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496c:	4b8b      	ldr	r3, [pc, #556]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	029b      	lsls	r3, r3, #10
 8004974:	4013      	ands	r3, r2
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0xee>
 8004978:	e015      	b.n	80049a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497a:	f7fe fbed 	bl	8003158 <HAL_GetTick>
 800497e:	0003      	movs	r3, r0
 8004980:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004984:	f7fe fbe8 	bl	8003158 <HAL_GetTick>
 8004988:	0002      	movs	r2, r0
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e277      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	4b81      	ldr	r3, [pc, #516]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	029b      	lsls	r3, r3, #10
 800499e:	4013      	ands	r3, r2
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x118>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2202      	movs	r2, #2
 80049ac:	4013      	ands	r3, r2
 80049ae:	d100      	bne.n	80049b2 <HAL_RCC_OscConfig+0x146>
 80049b0:	e069      	b.n	8004a86 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80049b2:	4b7a      	ldr	r3, [pc, #488]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	220c      	movs	r2, #12
 80049b8:	4013      	ands	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80049bc:	4b77      	ldr	r3, [pc, #476]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	220c      	movs	r2, #12
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d11c      	bne.n	8004a02 <HAL_RCC_OscConfig+0x196>
 80049c8:	4b74      	ldr	r3, [pc, #464]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	025b      	lsls	r3, r3, #9
 80049d0:	4013      	ands	r3, r2
 80049d2:	d116      	bne.n	8004a02 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d4:	4b71      	ldr	r3, [pc, #452]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2202      	movs	r2, #2
 80049da:	4013      	ands	r3, r2
 80049dc:	d005      	beq.n	80049ea <HAL_RCC_OscConfig+0x17e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e24d      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ea:	4b6c      	ldr	r3, [pc, #432]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	22f8      	movs	r2, #248	; 0xf8
 80049f0:	4393      	bics	r3, r2
 80049f2:	0019      	movs	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	00da      	lsls	r2, r3, #3
 80049fa:	4b68      	ldr	r3, [pc, #416]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 80049fc:	430a      	orrs	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a00:	e041      	b.n	8004a86 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d024      	beq.n	8004a54 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a0a:	4b64      	ldr	r3, [pc, #400]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b63      	ldr	r3, [pc, #396]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004a10:	2101      	movs	r1, #1
 8004a12:	430a      	orrs	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7fe fb9f 	bl	8003158 <HAL_GetTick>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a20:	f7fe fb9a 	bl	8003158 <HAL_GetTick>
 8004a24:	0002      	movs	r2, r0
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e229      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a32:	4b5a      	ldr	r3, [pc, #360]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2202      	movs	r2, #2
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d0f1      	beq.n	8004a20 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3c:	4b57      	ldr	r3, [pc, #348]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	22f8      	movs	r2, #248	; 0xf8
 8004a42:	4393      	bics	r3, r2
 8004a44:	0019      	movs	r1, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	00da      	lsls	r2, r3, #3
 8004a4c:	4b53      	ldr	r3, [pc, #332]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e018      	b.n	8004a86 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a54:	4b51      	ldr	r3, [pc, #324]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4b50      	ldr	r3, [pc, #320]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	438a      	bics	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fe fb7a 	bl	8003158 <HAL_GetTick>
 8004a64:	0003      	movs	r3, r0
 8004a66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a6a:	f7fe fb75 	bl	8003158 <HAL_GetTick>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e204      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7c:	4b47      	ldr	r3, [pc, #284]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2202      	movs	r2, #2
 8004a82:	4013      	ands	r3, r2
 8004a84:	d1f1      	bne.n	8004a6a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d036      	beq.n	8004afe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d019      	beq.n	8004acc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a98:	4b40      	ldr	r3, [pc, #256]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9c:	4b3f      	ldr	r3, [pc, #252]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa4:	f7fe fb58 	bl	8003158 <HAL_GetTick>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aae:	f7fe fb53 	bl	8003158 <HAL_GetTick>
 8004ab2:	0002      	movs	r2, r0
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e1e2      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac0:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d0f1      	beq.n	8004aae <HAL_RCC_OscConfig+0x242>
 8004aca:	e018      	b.n	8004afe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004acc:	4b33      	ldr	r3, [pc, #204]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad0:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	438a      	bics	r2, r1
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad8:	f7fe fb3e 	bl	8003158 <HAL_GetTick>
 8004adc:	0003      	movs	r3, r0
 8004ade:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae2:	f7fe fb39 	bl	8003158 <HAL_GetTick>
 8004ae6:	0002      	movs	r2, r0
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e1c8      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af4:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	2202      	movs	r2, #2
 8004afa:	4013      	ands	r3, r2
 8004afc:	d1f1      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2204      	movs	r2, #4
 8004b04:	4013      	ands	r3, r2
 8004b06:	d100      	bne.n	8004b0a <HAL_RCC_OscConfig+0x29e>
 8004b08:	e0b6      	b.n	8004c78 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0a:	231f      	movs	r3, #31
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b12:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004b14:	69da      	ldr	r2, [r3, #28]
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	055b      	lsls	r3, r3, #21
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d111      	bne.n	8004b42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	4b1f      	ldr	r3, [pc, #124]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004b20:	69da      	ldr	r2, [r3, #28]
 8004b22:	4b1e      	ldr	r3, [pc, #120]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004b24:	2180      	movs	r1, #128	; 0x80
 8004b26:	0549      	lsls	r1, r1, #21
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	61da      	str	r2, [r3, #28]
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	055b      	lsls	r3, r3, #21
 8004b34:	4013      	ands	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b3a:	231f      	movs	r3, #31
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	2201      	movs	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b42:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <HAL_RCC_OscConfig+0x33c>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d11a      	bne.n	8004b84 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4e:	4b16      	ldr	r3, [pc, #88]	; (8004ba8 <HAL_RCC_OscConfig+0x33c>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <HAL_RCC_OscConfig+0x33c>)
 8004b54:	2180      	movs	r1, #128	; 0x80
 8004b56:	0049      	lsls	r1, r1, #1
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5c:	f7fe fafc 	bl	8003158 <HAL_GetTick>
 8004b60:	0003      	movs	r3, r0
 8004b62:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b66:	f7fe faf7 	bl	8003158 <HAL_GetTick>
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b64      	cmp	r3, #100	; 0x64
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e186      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_RCC_OscConfig+0x33c>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	4013      	ands	r3, r2
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d10f      	bne.n	8004bac <HAL_RCC_OscConfig+0x340>
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004b8e:	6a1a      	ldr	r2, [r3, #32]
 8004b90:	4b02      	ldr	r3, [pc, #8]	; (8004b9c <HAL_RCC_OscConfig+0x330>)
 8004b92:	2101      	movs	r1, #1
 8004b94:	430a      	orrs	r2, r1
 8004b96:	621a      	str	r2, [r3, #32]
 8004b98:	e036      	b.n	8004c08 <HAL_RCC_OscConfig+0x39c>
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	fffeffff 	.word	0xfffeffff
 8004ba4:	fffbffff 	.word	0xfffbffff
 8004ba8:	40007000 	.word	0x40007000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10c      	bne.n	8004bce <HAL_RCC_OscConfig+0x362>
 8004bb4:	4bb6      	ldr	r3, [pc, #728]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004bb6:	6a1a      	ldr	r2, [r3, #32]
 8004bb8:	4bb5      	ldr	r3, [pc, #724]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004bba:	2101      	movs	r1, #1
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	621a      	str	r2, [r3, #32]
 8004bc0:	4bb3      	ldr	r3, [pc, #716]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004bc2:	6a1a      	ldr	r2, [r3, #32]
 8004bc4:	4bb2      	ldr	r3, [pc, #712]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004bc6:	2104      	movs	r1, #4
 8004bc8:	438a      	bics	r2, r1
 8004bca:	621a      	str	r2, [r3, #32]
 8004bcc:	e01c      	b.n	8004c08 <HAL_RCC_OscConfig+0x39c>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x384>
 8004bd6:	4bae      	ldr	r3, [pc, #696]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004bd8:	6a1a      	ldr	r2, [r3, #32]
 8004bda:	4bad      	ldr	r3, [pc, #692]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004bdc:	2104      	movs	r1, #4
 8004bde:	430a      	orrs	r2, r1
 8004be0:	621a      	str	r2, [r3, #32]
 8004be2:	4bab      	ldr	r3, [pc, #684]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004be4:	6a1a      	ldr	r2, [r3, #32]
 8004be6:	4baa      	ldr	r3, [pc, #680]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004be8:	2101      	movs	r1, #1
 8004bea:	430a      	orrs	r2, r1
 8004bec:	621a      	str	r2, [r3, #32]
 8004bee:	e00b      	b.n	8004c08 <HAL_RCC_OscConfig+0x39c>
 8004bf0:	4ba7      	ldr	r3, [pc, #668]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004bf2:	6a1a      	ldr	r2, [r3, #32]
 8004bf4:	4ba6      	ldr	r3, [pc, #664]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	621a      	str	r2, [r3, #32]
 8004bfc:	4ba4      	ldr	r3, [pc, #656]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004bfe:	6a1a      	ldr	r2, [r3, #32]
 8004c00:	4ba3      	ldr	r3, [pc, #652]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004c02:	2104      	movs	r1, #4
 8004c04:	438a      	bics	r2, r1
 8004c06:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d014      	beq.n	8004c3a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c10:	f7fe faa2 	bl	8003158 <HAL_GetTick>
 8004c14:	0003      	movs	r3, r0
 8004c16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c18:	e009      	b.n	8004c2e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7fe fa9d 	bl	8003158 <HAL_GetTick>
 8004c1e:	0002      	movs	r2, r0
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	4a9b      	ldr	r2, [pc, #620]	; (8004e94 <HAL_RCC_OscConfig+0x628>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e12b      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2e:	4b98      	ldr	r3, [pc, #608]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	2202      	movs	r2, #2
 8004c34:	4013      	ands	r3, r2
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x3ae>
 8004c38:	e013      	b.n	8004c62 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3a:	f7fe fa8d 	bl	8003158 <HAL_GetTick>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c42:	e009      	b.n	8004c58 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c44:	f7fe fa88 	bl	8003158 <HAL_GetTick>
 8004c48:	0002      	movs	r2, r0
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	4a91      	ldr	r2, [pc, #580]	; (8004e94 <HAL_RCC_OscConfig+0x628>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e116      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c58:	4b8d      	ldr	r3, [pc, #564]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c62:	231f      	movs	r3, #31
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d105      	bne.n	8004c78 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6c:	4b88      	ldr	r3, [pc, #544]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	4b87      	ldr	r3, [pc, #540]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004c72:	4989      	ldr	r1, [pc, #548]	; (8004e98 <HAL_RCC_OscConfig+0x62c>)
 8004c74:	400a      	ands	r2, r1
 8004c76:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2210      	movs	r2, #16
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d063      	beq.n	8004d4a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d12a      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c8a:	4b81      	ldr	r3, [pc, #516]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c8e:	4b80      	ldr	r3, [pc, #512]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004c90:	2104      	movs	r1, #4
 8004c92:	430a      	orrs	r2, r1
 8004c94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004c96:	4b7e      	ldr	r3, [pc, #504]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c9a:	4b7d      	ldr	r3, [pc, #500]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca2:	f7fe fa59 	bl	8003158 <HAL_GetTick>
 8004ca6:	0003      	movs	r3, r0
 8004ca8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004cac:	f7fe fa54 	bl	8003158 <HAL_GetTick>
 8004cb0:	0002      	movs	r2, r0
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0e3      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004cbe:	4b74      	ldr	r3, [pc, #464]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d0f1      	beq.n	8004cac <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004cc8:	4b71      	ldr	r3, [pc, #452]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	22f8      	movs	r2, #248	; 0xf8
 8004cce:	4393      	bics	r3, r2
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	00da      	lsls	r2, r3, #3
 8004cd8:	4b6d      	ldr	r3, [pc, #436]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8004cde:	e034      	b.n	8004d4a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	3305      	adds	r3, #5
 8004ce6:	d111      	bne.n	8004d0c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004ce8:	4b69      	ldr	r3, [pc, #420]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cec:	4b68      	ldr	r3, [pc, #416]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004cee:	2104      	movs	r1, #4
 8004cf0:	438a      	bics	r2, r1
 8004cf2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004cf4:	4b66      	ldr	r3, [pc, #408]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	22f8      	movs	r2, #248	; 0xf8
 8004cfa:	4393      	bics	r3, r2
 8004cfc:	0019      	movs	r1, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	00da      	lsls	r2, r3, #3
 8004d04:	4b62      	ldr	r3, [pc, #392]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004d06:	430a      	orrs	r2, r1
 8004d08:	635a      	str	r2, [r3, #52]	; 0x34
 8004d0a:	e01e      	b.n	8004d4a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d0c:	4b60      	ldr	r3, [pc, #384]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d10:	4b5f      	ldr	r3, [pc, #380]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004d12:	2104      	movs	r1, #4
 8004d14:	430a      	orrs	r2, r1
 8004d16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004d18:	4b5d      	ldr	r3, [pc, #372]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1c:	4b5c      	ldr	r3, [pc, #368]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004d1e:	2101      	movs	r1, #1
 8004d20:	438a      	bics	r2, r1
 8004d22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d24:	f7fe fa18 	bl	8003158 <HAL_GetTick>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d2e:	f7fe fa13 	bl	8003158 <HAL_GetTick>
 8004d32:	0002      	movs	r2, r0
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e0a2      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d40:	4b53      	ldr	r3, [pc, #332]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d44:	2202      	movs	r2, #2
 8004d46:	4013      	ands	r3, r2
 8004d48:	d1f1      	bne.n	8004d2e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d100      	bne.n	8004d54 <HAL_RCC_OscConfig+0x4e8>
 8004d52:	e097      	b.n	8004e84 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d54:	4b4e      	ldr	r3, [pc, #312]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	220c      	movs	r2, #12
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d100      	bne.n	8004d62 <HAL_RCC_OscConfig+0x4f6>
 8004d60:	e06b      	b.n	8004e3a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d14c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6a:	4b49      	ldr	r3, [pc, #292]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b48      	ldr	r3, [pc, #288]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004d70:	494a      	ldr	r1, [pc, #296]	; (8004e9c <HAL_RCC_OscConfig+0x630>)
 8004d72:	400a      	ands	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d76:	f7fe f9ef 	bl	8003158 <HAL_GetTick>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fe f9ea 	bl	8003158 <HAL_GetTick>
 8004d84:	0002      	movs	r2, r0
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e079      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d92:	4b3f      	ldr	r3, [pc, #252]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	049b      	lsls	r3, r3, #18
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d9e:	4b3c      	ldr	r3, [pc, #240]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	220f      	movs	r2, #15
 8004da4:	4393      	bics	r3, r2
 8004da6:	0019      	movs	r1, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dac:	4b38      	ldr	r3, [pc, #224]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004dae:	430a      	orrs	r2, r1
 8004db0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004db2:	4b37      	ldr	r3, [pc, #220]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	4a3a      	ldr	r2, [pc, #232]	; (8004ea0 <HAL_RCC_OscConfig+0x634>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	0019      	movs	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	4b32      	ldr	r3, [pc, #200]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dcc:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4b2f      	ldr	r3, [pc, #188]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004dd2:	2180      	movs	r1, #128	; 0x80
 8004dd4:	0449      	lsls	r1, r1, #17
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dda:	f7fe f9bd 	bl	8003158 <HAL_GetTick>
 8004dde:	0003      	movs	r3, r0
 8004de0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de4:	f7fe f9b8 	bl	8003158 <HAL_GetTick>
 8004de8:	0002      	movs	r2, r0
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e047      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004df6:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	049b      	lsls	r3, r3, #18
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x578>
 8004e02:	e03f      	b.n	8004e84 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e04:	4b22      	ldr	r3, [pc, #136]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b21      	ldr	r3, [pc, #132]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004e0a:	4924      	ldr	r1, [pc, #144]	; (8004e9c <HAL_RCC_OscConfig+0x630>)
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e10:	f7fe f9a2 	bl	8003158 <HAL_GetTick>
 8004e14:	0003      	movs	r3, r0
 8004e16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fe f99d 	bl	8003158 <HAL_GetTick>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e02c      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e2c:	4b18      	ldr	r3, [pc, #96]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	049b      	lsls	r3, r3, #18
 8004e34:	4013      	ands	r3, r2
 8004e36:	d1f0      	bne.n	8004e1a <HAL_RCC_OscConfig+0x5ae>
 8004e38:	e024      	b.n	8004e84 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e01f      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <HAL_RCC_OscConfig+0x624>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	025b      	lsls	r3, r3, #9
 8004e58:	401a      	ands	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d10e      	bne.n	8004e80 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	220f      	movs	r2, #15
 8004e66:	401a      	ands	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	23f0      	movs	r3, #240	; 0xf0
 8004e74:	039b      	lsls	r3, r3, #14
 8004e76:	401a      	ands	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b008      	add	sp, #32
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	40021000 	.word	0x40021000
 8004e94:	00001388 	.word	0x00001388
 8004e98:	efffffff 	.word	0xefffffff
 8004e9c:	feffffff 	.word	0xfeffffff
 8004ea0:	ffc2ffff 	.word	0xffc2ffff

08004ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0b3      	b.n	8005020 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b5b      	ldr	r3, [pc, #364]	; (8005028 <HAL_RCC_ClockConfig+0x184>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d911      	bls.n	8004eea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b58      	ldr	r3, [pc, #352]	; (8005028 <HAL_RCC_ClockConfig+0x184>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	4393      	bics	r3, r2
 8004ece:	0019      	movs	r1, r3
 8004ed0:	4b55      	ldr	r3, [pc, #340]	; (8005028 <HAL_RCC_ClockConfig+0x184>)
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed8:	4b53      	ldr	r3, [pc, #332]	; (8005028 <HAL_RCC_ClockConfig+0x184>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2201      	movs	r2, #1
 8004ede:	4013      	ands	r3, r2
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e09a      	b.n	8005020 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d015      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	4013      	ands	r3, r2
 8004efc:	d006      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004efe:	4b4b      	ldr	r3, [pc, #300]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	4b4a      	ldr	r3, [pc, #296]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004f04:	21e0      	movs	r1, #224	; 0xe0
 8004f06:	00c9      	lsls	r1, r1, #3
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f0c:	4b47      	ldr	r3, [pc, #284]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	22f0      	movs	r2, #240	; 0xf0
 8004f12:	4393      	bics	r3, r2
 8004f14:	0019      	movs	r1, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	4b44      	ldr	r3, [pc, #272]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2201      	movs	r2, #1
 8004f26:	4013      	ands	r3, r2
 8004f28:	d040      	beq.n	8004fac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d107      	bne.n	8004f42 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f32:	4b3e      	ldr	r3, [pc, #248]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	2380      	movs	r3, #128	; 0x80
 8004f38:	029b      	lsls	r3, r3, #10
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d114      	bne.n	8004f68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e06e      	b.n	8005020 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d107      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4a:	4b38      	ldr	r3, [pc, #224]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	049b      	lsls	r3, r3, #18
 8004f52:	4013      	ands	r3, r2
 8004f54:	d108      	bne.n	8004f68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e062      	b.n	8005020 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5a:	4b34      	ldr	r3, [pc, #208]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	4013      	ands	r3, r2
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e05b      	b.n	8005020 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f68:	4b30      	ldr	r3, [pc, #192]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	4393      	bics	r3, r2
 8004f70:	0019      	movs	r1, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4b2d      	ldr	r3, [pc, #180]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f7c:	f7fe f8ec 	bl	8003158 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f84:	e009      	b.n	8004f9a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f86:	f7fe f8e7 	bl	8003158 <HAL_GetTick>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	4a27      	ldr	r2, [pc, #156]	; (8005030 <HAL_RCC_ClockConfig+0x18c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e042      	b.n	8005020 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	4b24      	ldr	r3, [pc, #144]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	220c      	movs	r2, #12
 8004fa0:	401a      	ands	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d1ec      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fac:	4b1e      	ldr	r3, [pc, #120]	; (8005028 <HAL_RCC_ClockConfig+0x184>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d211      	bcs.n	8004fde <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <HAL_RCC_ClockConfig+0x184>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4393      	bics	r3, r2
 8004fc2:	0019      	movs	r1, r3
 8004fc4:	4b18      	ldr	r3, [pc, #96]	; (8005028 <HAL_RCC_ClockConfig+0x184>)
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fcc:	4b16      	ldr	r3, [pc, #88]	; (8005028 <HAL_RCC_ClockConfig+0x184>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d001      	beq.n	8004fde <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e020      	b.n	8005020 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe8:	4b10      	ldr	r3, [pc, #64]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	4a11      	ldr	r2, [pc, #68]	; (8005034 <HAL_RCC_ClockConfig+0x190>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ffc:	f000 f820 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8005000:	0001      	movs	r1, r0
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <HAL_RCC_ClockConfig+0x188>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	220f      	movs	r2, #15
 800500a:	4013      	ands	r3, r2
 800500c:	4a0a      	ldr	r2, [pc, #40]	; (8005038 <HAL_RCC_ClockConfig+0x194>)
 800500e:	5cd3      	ldrb	r3, [r2, r3]
 8005010:	000a      	movs	r2, r1
 8005012:	40da      	lsrs	r2, r3
 8005014:	4b09      	ldr	r3, [pc, #36]	; (800503c <HAL_RCC_ClockConfig+0x198>)
 8005016:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005018:	2000      	movs	r0, #0
 800501a:	f7fe f857 	bl	80030cc <HAL_InitTick>
  
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	0018      	movs	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	b004      	add	sp, #16
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40022000 	.word	0x40022000
 800502c:	40021000 	.word	0x40021000
 8005030:	00001388 	.word	0x00001388
 8005034:	fffff8ff 	.word	0xfffff8ff
 8005038:	080090bc 	.word	0x080090bc
 800503c:	20000008 	.word	0x20000008

08005040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b08f      	sub	sp, #60	; 0x3c
 8005044:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005046:	2314      	movs	r3, #20
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	4a2b      	ldr	r2, [pc, #172]	; (80050f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800504c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800504e:	c313      	stmia	r3!, {r0, r1, r4}
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005054:	1d3b      	adds	r3, r7, #4
 8005056:	4a29      	ldr	r2, [pc, #164]	; (80050fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005058:	ca13      	ldmia	r2!, {r0, r1, r4}
 800505a:	c313      	stmia	r3!, {r0, r1, r4}
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005064:	2300      	movs	r3, #0
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
 8005068:	2300      	movs	r3, #0
 800506a:	637b      	str	r3, [r7, #52]	; 0x34
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005074:	4b22      	ldr	r3, [pc, #136]	; (8005100 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	220c      	movs	r2, #12
 800507e:	4013      	ands	r3, r2
 8005080:	2b04      	cmp	r3, #4
 8005082:	d002      	beq.n	800508a <HAL_RCC_GetSysClockFreq+0x4a>
 8005084:	2b08      	cmp	r3, #8
 8005086:	d003      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0x50>
 8005088:	e02d      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800508a:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <HAL_RCC_GetSysClockFreq+0xc4>)
 800508c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800508e:	e02d      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	0c9b      	lsrs	r3, r3, #18
 8005094:	220f      	movs	r2, #15
 8005096:	4013      	ands	r3, r2
 8005098:	2214      	movs	r2, #20
 800509a:	18ba      	adds	r2, r7, r2
 800509c:	5cd3      	ldrb	r3, [r2, r3]
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80050a0:	4b17      	ldr	r3, [pc, #92]	; (8005100 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	220f      	movs	r2, #15
 80050a6:	4013      	ands	r3, r2
 80050a8:	1d3a      	adds	r2, r7, #4
 80050aa:	5cd3      	ldrb	r3, [r2, r3]
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	025b      	lsls	r3, r3, #9
 80050b4:	4013      	ands	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ba:	4812      	ldr	r0, [pc, #72]	; (8005104 <HAL_RCC_GetSysClockFreq+0xc4>)
 80050bc:	f7fb f836 	bl	800012c <__udivsi3>
 80050c0:	0003      	movs	r3, r0
 80050c2:	001a      	movs	r2, r3
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	4353      	muls	r3, r2
 80050c8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ca:	e009      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80050cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ce:	000a      	movs	r2, r1
 80050d0:	0152      	lsls	r2, r2, #5
 80050d2:	1a52      	subs	r2, r2, r1
 80050d4:	0193      	lsls	r3, r2, #6
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	185b      	adds	r3, r3, r1
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80050e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050e4:	e002      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050e6:	4b07      	ldr	r3, [pc, #28]	; (8005104 <HAL_RCC_GetSysClockFreq+0xc4>)
 80050e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80050ee:	0018      	movs	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b00f      	add	sp, #60	; 0x3c
 80050f4:	bd90      	pop	{r4, r7, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	080082c0 	.word	0x080082c0
 80050fc:	080082d0 	.word	0x080082d0
 8005100:	40021000 	.word	0x40021000
 8005104:	007a1200 	.word	0x007a1200

08005108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800510c:	4b02      	ldr	r3, [pc, #8]	; (8005118 <HAL_RCC_GetHCLKFreq+0x10>)
 800510e:	681b      	ldr	r3, [r3, #0]
}
 8005110:	0018      	movs	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	20000008 	.word	0x20000008

0800511c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005120:	f7ff fff2 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 8005124:	0001      	movs	r1, r0
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	0a1b      	lsrs	r3, r3, #8
 800512c:	2207      	movs	r2, #7
 800512e:	4013      	ands	r3, r2
 8005130:	4a04      	ldr	r2, [pc, #16]	; (8005144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005132:	5cd3      	ldrb	r3, [r2, r3]
 8005134:	40d9      	lsrs	r1, r3
 8005136:	000b      	movs	r3, r1
}    
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	40021000 	.word	0x40021000
 8005144:	080090cc 	.word	0x080090cc

08005148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	2380      	movs	r3, #128	; 0x80
 800515e:	025b      	lsls	r3, r3, #9
 8005160:	4013      	ands	r3, r2
 8005162:	d100      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005164:	e08f      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005166:	2317      	movs	r3, #23
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800516e:	4b57      	ldr	r3, [pc, #348]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005170:	69da      	ldr	r2, [r3, #28]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	055b      	lsls	r3, r3, #21
 8005176:	4013      	ands	r3, r2
 8005178:	d111      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800517a:	4b54      	ldr	r3, [pc, #336]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800517c:	69da      	ldr	r2, [r3, #28]
 800517e:	4b53      	ldr	r3, [pc, #332]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005180:	2180      	movs	r1, #128	; 0x80
 8005182:	0549      	lsls	r1, r1, #21
 8005184:	430a      	orrs	r2, r1
 8005186:	61da      	str	r2, [r3, #28]
 8005188:	4b50      	ldr	r3, [pc, #320]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	055b      	lsls	r3, r3, #21
 8005190:	4013      	ands	r3, r2
 8005192:	60bb      	str	r3, [r7, #8]
 8005194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005196:	2317      	movs	r3, #23
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	2201      	movs	r2, #1
 800519c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519e:	4b4c      	ldr	r3, [pc, #304]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4013      	ands	r3, r2
 80051a8:	d11a      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051aa:	4b49      	ldr	r3, [pc, #292]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b48      	ldr	r3, [pc, #288]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80051b0:	2180      	movs	r1, #128	; 0x80
 80051b2:	0049      	lsls	r1, r1, #1
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051b8:	f7fd ffce 	bl	8003158 <HAL_GetTick>
 80051bc:	0003      	movs	r3, r0
 80051be:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c0:	e008      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c2:	f7fd ffc9 	bl	8003158 <HAL_GetTick>
 80051c6:	0002      	movs	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b64      	cmp	r3, #100	; 0x64
 80051ce:	d901      	bls.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e077      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d4:	4b3e      	ldr	r3, [pc, #248]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	4013      	ands	r3, r2
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051e0:	4b3a      	ldr	r3, [pc, #232]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051e2:	6a1a      	ldr	r2, [r3, #32]
 80051e4:	23c0      	movs	r3, #192	; 0xc0
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d034      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	23c0      	movs	r3, #192	; 0xc0
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4013      	ands	r3, r2
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d02c      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005202:	4b32      	ldr	r3, [pc, #200]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	4a33      	ldr	r2, [pc, #204]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005208:	4013      	ands	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800520c:	4b2f      	ldr	r3, [pc, #188]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800520e:	6a1a      	ldr	r2, [r3, #32]
 8005210:	4b2e      	ldr	r3, [pc, #184]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005212:	2180      	movs	r1, #128	; 0x80
 8005214:	0249      	lsls	r1, r1, #9
 8005216:	430a      	orrs	r2, r1
 8005218:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800521a:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	4b2b      	ldr	r3, [pc, #172]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005220:	492d      	ldr	r1, [pc, #180]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005222:	400a      	ands	r2, r1
 8005224:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005226:	4b29      	ldr	r3, [pc, #164]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	4013      	ands	r3, r2
 8005232:	d013      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005234:	f7fd ff90 	bl	8003158 <HAL_GetTick>
 8005238:	0003      	movs	r3, r0
 800523a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523c:	e009      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523e:	f7fd ff8b 	bl	8003158 <HAL_GetTick>
 8005242:	0002      	movs	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	4a24      	ldr	r2, [pc, #144]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e038      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005252:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	2202      	movs	r2, #2
 8005258:	4013      	ands	r3, r2
 800525a:	d0f0      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005262:	4013      	ands	r3, r2
 8005264:	0019      	movs	r1, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	4b18      	ldr	r3, [pc, #96]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800526c:	430a      	orrs	r2, r1
 800526e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005270:	2317      	movs	r3, #23
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d105      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800527a:	4b14      	ldr	r3, [pc, #80]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800527c:	69da      	ldr	r2, [r3, #28]
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005280:	4917      	ldr	r1, [pc, #92]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005282:	400a      	ands	r2, r1
 8005284:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2201      	movs	r2, #1
 800528c:	4013      	ands	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005290:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	2203      	movs	r2, #3
 8005296:	4393      	bics	r3, r2
 8005298:	0019      	movs	r1, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052a0:	430a      	orrs	r2, r1
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2220      	movs	r2, #32
 80052aa:	4013      	ands	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ae:	4b07      	ldr	r3, [pc, #28]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	2210      	movs	r2, #16
 80052b4:	4393      	bics	r3, r2
 80052b6:	0019      	movs	r1, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052be:	430a      	orrs	r2, r1
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b006      	add	sp, #24
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40007000 	.word	0x40007000
 80052d4:	fffffcff 	.word	0xfffffcff
 80052d8:	fffeffff 	.word	0xfffeffff
 80052dc:	00001388 	.word	0x00001388
 80052e0:	efffffff 	.word	0xefffffff

080052e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e01e      	b.n	8005334 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	223d      	movs	r2, #61	; 0x3d
 80052fa:	5c9b      	ldrb	r3, [r3, r2]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	223c      	movs	r2, #60	; 0x3c
 8005306:	2100      	movs	r1, #0
 8005308:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	0018      	movs	r0, r3
 800530e:	f7fd fd5b 	bl	8002dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	223d      	movs	r2, #61	; 0x3d
 8005316:	2102      	movs	r1, #2
 8005318:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3304      	adds	r3, #4
 8005322:	0019      	movs	r1, r3
 8005324:	0010      	movs	r0, r2
 8005326:	f000 fb3d 	bl	80059a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	223d      	movs	r2, #61	; 0x3d
 800532e:	2101      	movs	r1, #1
 8005330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b002      	add	sp, #8
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e01e      	b.n	800538c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	223d      	movs	r2, #61	; 0x3d
 8005352:	5c9b      	ldrb	r3, [r3, r2]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d107      	bne.n	800536a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	223c      	movs	r2, #60	; 0x3c
 800535e:	2100      	movs	r1, #0
 8005360:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	0018      	movs	r0, r3
 8005366:	f000 f815 	bl	8005394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	223d      	movs	r2, #61	; 0x3d
 800536e:	2102      	movs	r1, #2
 8005370:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3304      	adds	r3, #4
 800537a:	0019      	movs	r1, r3
 800537c:	0010      	movs	r0, r2
 800537e:	f000 fb11 	bl	80059a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	223d      	movs	r2, #61	; 0x3d
 8005386:	2101      	movs	r1, #1
 8005388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	b002      	add	sp, #8
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b002      	add	sp, #8
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	2201      	movs	r2, #1
 80053b6:	0018      	movs	r0, r3
 80053b8:	f000 fe00 	bl	8005fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1a      	ldr	r2, [pc, #104]	; (800542c <HAL_TIM_PWM_Start+0x88>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00e      	beq.n	80053e4 <HAL_TIM_PWM_Start+0x40>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a19      	ldr	r2, [pc, #100]	; (8005430 <HAL_TIM_PWM_Start+0x8c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d009      	beq.n	80053e4 <HAL_TIM_PWM_Start+0x40>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a17      	ldr	r2, [pc, #92]	; (8005434 <HAL_TIM_PWM_Start+0x90>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_TIM_PWM_Start+0x40>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a16      	ldr	r2, [pc, #88]	; (8005438 <HAL_TIM_PWM_Start+0x94>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d101      	bne.n	80053e8 <HAL_TIM_PWM_Start+0x44>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <HAL_TIM_PWM_Start+0x46>
 80053e8:	2300      	movs	r3, #0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d008      	beq.n	8005400 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2180      	movs	r1, #128	; 0x80
 80053fa:	0209      	lsls	r1, r1, #8
 80053fc:	430a      	orrs	r2, r1
 80053fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2207      	movs	r2, #7
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b06      	cmp	r3, #6
 8005410:	d007      	beq.n	8005422 <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2101      	movs	r1, #1
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	0018      	movs	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	b004      	add	sp, #16
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40014000 	.word	0x40014000
 8005434:	40014400 	.word	0x40014400
 8005438:	40014800 	.word	0x40014800

0800543c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2202      	movs	r2, #2
 800544c:	4013      	ands	r3, r2
 800544e:	2b02      	cmp	r3, #2
 8005450:	d124      	bne.n	800549c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	2202      	movs	r2, #2
 800545a:	4013      	ands	r3, r2
 800545c:	2b02      	cmp	r3, #2
 800545e:	d11d      	bne.n	800549c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2203      	movs	r2, #3
 8005466:	4252      	negs	r2, r2
 8005468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2203      	movs	r2, #3
 8005478:	4013      	ands	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	0018      	movs	r0, r3
 8005480:	f000 fa78 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8005484:	e007      	b.n	8005496 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	0018      	movs	r0, r3
 800548a:	f000 fa6b 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	0018      	movs	r0, r3
 8005492:	f000 fa77 	bl	8005984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2204      	movs	r2, #4
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d125      	bne.n	80054f6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2204      	movs	r2, #4
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d11e      	bne.n	80054f6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2205      	movs	r2, #5
 80054be:	4252      	negs	r2, r2
 80054c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	23c0      	movs	r3, #192	; 0xc0
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4013      	ands	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	0018      	movs	r0, r3
 80054da:	f000 fa4b 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 80054de:	e007      	b.n	80054f0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	0018      	movs	r0, r3
 80054e4:	f000 fa3e 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	0018      	movs	r0, r3
 80054ec:	f000 fa4a 	bl	8005984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2208      	movs	r2, #8
 80054fe:	4013      	ands	r3, r2
 8005500:	2b08      	cmp	r3, #8
 8005502:	d124      	bne.n	800554e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	2208      	movs	r2, #8
 800550c:	4013      	ands	r3, r2
 800550e:	2b08      	cmp	r3, #8
 8005510:	d11d      	bne.n	800554e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2209      	movs	r2, #9
 8005518:	4252      	negs	r2, r2
 800551a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2204      	movs	r2, #4
 8005520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	2203      	movs	r2, #3
 800552a:	4013      	ands	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	0018      	movs	r0, r3
 8005532:	f000 fa1f 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8005536:	e007      	b.n	8005548 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	0018      	movs	r0, r3
 800553c:	f000 fa12 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	0018      	movs	r0, r3
 8005544:	f000 fa1e 	bl	8005984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2210      	movs	r2, #16
 8005556:	4013      	ands	r3, r2
 8005558:	2b10      	cmp	r3, #16
 800555a:	d125      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2210      	movs	r2, #16
 8005564:	4013      	ands	r3, r2
 8005566:	2b10      	cmp	r3, #16
 8005568:	d11e      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2211      	movs	r2, #17
 8005570:	4252      	negs	r2, r2
 8005572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2208      	movs	r2, #8
 8005578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	23c0      	movs	r3, #192	; 0xc0
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4013      	ands	r3, r2
 8005586:	d004      	beq.n	8005592 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0018      	movs	r0, r3
 800558c:	f000 f9f2 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8005590:	e007      	b.n	80055a2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	0018      	movs	r0, r3
 8005596:	f000 f9e5 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	0018      	movs	r0, r3
 800559e:	f000 f9f1 	bl	8005984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2201      	movs	r2, #1
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d10f      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	4013      	ands	r3, r2
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d108      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2202      	movs	r2, #2
 80055ca:	4252      	negs	r2, r2
 80055cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f000 f9bf 	bl	8005954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2280      	movs	r2, #128	; 0x80
 80055de:	4013      	ands	r3, r2
 80055e0:	2b80      	cmp	r3, #128	; 0x80
 80055e2:	d10f      	bne.n	8005604 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	2280      	movs	r2, #128	; 0x80
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b80      	cmp	r3, #128	; 0x80
 80055f0:	d108      	bne.n	8005604 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2281      	movs	r2, #129	; 0x81
 80055f8:	4252      	negs	r2, r2
 80055fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	0018      	movs	r0, r3
 8005600:	f000 fd60 	bl	80060c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2240      	movs	r2, #64	; 0x40
 800560c:	4013      	ands	r3, r2
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d10f      	bne.n	8005632 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	2240      	movs	r2, #64	; 0x40
 800561a:	4013      	ands	r3, r2
 800561c:	2b40      	cmp	r3, #64	; 0x40
 800561e:	d108      	bne.n	8005632 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2241      	movs	r2, #65	; 0x41
 8005626:	4252      	negs	r2, r2
 8005628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0018      	movs	r0, r3
 800562e:	f000 f9b1 	bl	8005994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2220      	movs	r2, #32
 800563a:	4013      	ands	r3, r2
 800563c:	2b20      	cmp	r3, #32
 800563e:	d10f      	bne.n	8005660 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	4013      	ands	r3, r2
 800564a:	2b20      	cmp	r3, #32
 800564c:	d108      	bne.n	8005660 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2221      	movs	r2, #33	; 0x21
 8005654:	4252      	negs	r2, r2
 8005656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	0018      	movs	r0, r3
 800565c:	f000 fd2a 	bl	80060b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005660:	46c0      	nop			; (mov r8, r8)
 8005662:	46bd      	mov	sp, r7
 8005664:	b002      	add	sp, #8
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	223c      	movs	r2, #60	; 0x3c
 8005678:	5c9b      	ldrb	r3, [r3, r2]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800567e:	2302      	movs	r3, #2
 8005680:	e0a4      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x164>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	223c      	movs	r2, #60	; 0x3c
 8005686:	2101      	movs	r1, #1
 8005688:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	223d      	movs	r2, #61	; 0x3d
 800568e:	2102      	movs	r1, #2
 8005690:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b04      	cmp	r3, #4
 8005696:	d029      	beq.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x84>
 8005698:	d802      	bhi.n	80056a0 <HAL_TIM_PWM_ConfigChannel+0x38>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800569e:	e08c      	b.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d046      	beq.n	8005732 <HAL_TIM_PWM_ConfigChannel+0xca>
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	d065      	beq.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80056a8:	e087      	b.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	0011      	movs	r1, r2
 80056b2:	0018      	movs	r0, r3
 80056b4:	f000 f9ec 	bl	8005a90 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2108      	movs	r1, #8
 80056c4:	430a      	orrs	r2, r1
 80056c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2104      	movs	r1, #4
 80056d4:	438a      	bics	r2, r1
 80056d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	619a      	str	r2, [r3, #24]
      break;
 80056ea:	e066      	b.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	0011      	movs	r1, r2
 80056f4:	0018      	movs	r0, r3
 80056f6:	f000 fa53 	bl	8005ba0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699a      	ldr	r2, [r3, #24]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2180      	movs	r1, #128	; 0x80
 8005706:	0109      	lsls	r1, r1, #4
 8005708:	430a      	orrs	r2, r1
 800570a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	492f      	ldr	r1, [pc, #188]	; (80057d4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8005718:	400a      	ands	r2, r1
 800571a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6999      	ldr	r1, [r3, #24]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	021a      	lsls	r2, r3, #8
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	619a      	str	r2, [r3, #24]
      break;
 8005730:	e043      	b.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	0011      	movs	r1, r2
 800573a:	0018      	movs	r0, r3
 800573c:	f000 fab4 	bl	8005ca8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2108      	movs	r1, #8
 800574c:	430a      	orrs	r2, r1
 800574e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2104      	movs	r1, #4
 800575c:	438a      	bics	r2, r1
 800575e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69d9      	ldr	r1, [r3, #28]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	61da      	str	r2, [r3, #28]
      break;
 8005772:	e022      	b.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	0011      	movs	r1, r2
 800577c:	0018      	movs	r0, r3
 800577e:	f000 fb19 	bl	8005db4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2180      	movs	r1, #128	; 0x80
 800578e:	0109      	lsls	r1, r1, #4
 8005790:	430a      	orrs	r2, r1
 8005792:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69da      	ldr	r2, [r3, #28]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	490d      	ldr	r1, [pc, #52]	; (80057d4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80057a0:	400a      	ands	r2, r1
 80057a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69d9      	ldr	r1, [r3, #28]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	021a      	lsls	r2, r3, #8
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	61da      	str	r2, [r3, #28]
      break;
 80057b8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	223d      	movs	r2, #61	; 0x3d
 80057be:	2101      	movs	r1, #1
 80057c0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	223c      	movs	r2, #60	; 0x3c
 80057c6:	2100      	movs	r1, #0
 80057c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	0018      	movs	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b004      	add	sp, #16
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	fffffbff 	.word	0xfffffbff

080057d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	223c      	movs	r2, #60	; 0x3c
 80057e6:	5c9b      	ldrb	r3, [r3, r2]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_TIM_ConfigClockSource+0x18>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e0ab      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x170>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	223c      	movs	r2, #60	; 0x3c
 80057f4:	2101      	movs	r1, #1
 80057f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	223d      	movs	r2, #61	; 0x3d
 80057fc:	2102      	movs	r1, #2
 80057fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2277      	movs	r2, #119	; 0x77
 800580c:	4393      	bics	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a4f      	ldr	r2, [pc, #316]	; (8005950 <HAL_TIM_ConfigClockSource+0x178>)
 8005814:	4013      	ands	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d100      	bne.n	800582a <HAL_TIM_ConfigClockSource+0x52>
 8005828:	e06b      	b.n	8005902 <HAL_TIM_ConfigClockSource+0x12a>
 800582a:	d80e      	bhi.n	800584a <HAL_TIM_ConfigClockSource+0x72>
 800582c:	2b10      	cmp	r3, #16
 800582e:	d100      	bne.n	8005832 <HAL_TIM_ConfigClockSource+0x5a>
 8005830:	e077      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x14a>
 8005832:	d803      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x64>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d100      	bne.n	800583a <HAL_TIM_ConfigClockSource+0x62>
 8005838:	e073      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800583a:	e07c      	b.n	8005936 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800583c:	2b20      	cmp	r3, #32
 800583e:	d100      	bne.n	8005842 <HAL_TIM_ConfigClockSource+0x6a>
 8005840:	e06f      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x14a>
 8005842:	2b30      	cmp	r3, #48	; 0x30
 8005844:	d100      	bne.n	8005848 <HAL_TIM_ConfigClockSource+0x70>
 8005846:	e06c      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8005848:	e075      	b.n	8005936 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800584a:	2b70      	cmp	r3, #112	; 0x70
 800584c:	d00e      	beq.n	800586c <HAL_TIM_ConfigClockSource+0x94>
 800584e:	d804      	bhi.n	800585a <HAL_TIM_ConfigClockSource+0x82>
 8005850:	2b50      	cmp	r3, #80	; 0x50
 8005852:	d036      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0xea>
 8005854:	2b60      	cmp	r3, #96	; 0x60
 8005856:	d044      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8005858:	e06d      	b.n	8005936 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800585a:	2280      	movs	r2, #128	; 0x80
 800585c:	0152      	lsls	r2, r2, #5
 800585e:	4293      	cmp	r3, r2
 8005860:	d068      	beq.n	8005934 <HAL_TIM_ConfigClockSource+0x15c>
 8005862:	2280      	movs	r2, #128	; 0x80
 8005864:	0192      	lsls	r2, r2, #6
 8005866:	4293      	cmp	r3, r2
 8005868:	d017      	beq.n	800589a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800586a:	e064      	b.n	8005936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	6899      	ldr	r1, [r3, #8]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f000 fb7e 	bl	8005f7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2277      	movs	r2, #119	; 0x77
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	609a      	str	r2, [r3, #8]
      break;
 8005898:	e04d      	b.n	8005936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6899      	ldr	r1, [r3, #8]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f000 fb67 	bl	8005f7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2180      	movs	r1, #128	; 0x80
 80058ba:	01c9      	lsls	r1, r1, #7
 80058bc:	430a      	orrs	r2, r1
 80058be:	609a      	str	r2, [r3, #8]
      break;
 80058c0:	e039      	b.n	8005936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	001a      	movs	r2, r3
 80058d0:	f000 fada 	bl	8005e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2150      	movs	r1, #80	; 0x50
 80058da:	0018      	movs	r0, r3
 80058dc:	f000 fb34 	bl	8005f48 <TIM_ITRx_SetConfig>
      break;
 80058e0:	e029      	b.n	8005936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	001a      	movs	r2, r3
 80058f0:	f000 faf8 	bl	8005ee4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2160      	movs	r1, #96	; 0x60
 80058fa:	0018      	movs	r0, r3
 80058fc:	f000 fb24 	bl	8005f48 <TIM_ITRx_SetConfig>
      break;
 8005900:	e019      	b.n	8005936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	001a      	movs	r2, r3
 8005910:	f000 faba 	bl	8005e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2140      	movs	r1, #64	; 0x40
 800591a:	0018      	movs	r0, r3
 800591c:	f000 fb14 	bl	8005f48 <TIM_ITRx_SetConfig>
      break;
 8005920:	e009      	b.n	8005936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	0019      	movs	r1, r3
 800592c:	0010      	movs	r0, r2
 800592e:	f000 fb0b 	bl	8005f48 <TIM_ITRx_SetConfig>
      break;
 8005932:	e000      	b.n	8005936 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005934:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	223d      	movs	r2, #61	; 0x3d
 800593a:	2101      	movs	r1, #1
 800593c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	223c      	movs	r2, #60	; 0x3c
 8005942:	2100      	movs	r1, #0
 8005944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	0018      	movs	r0, r3
 800594a:	46bd      	mov	sp, r7
 800594c:	b004      	add	sp, #16
 800594e:	bd80      	pop	{r7, pc}
 8005950:	ffff00ff 	.word	0xffff00ff

08005954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800595c:	46c0      	nop			; (mov r8, r8)
 800595e:	46bd      	mov	sp, r7
 8005960:	b002      	add	sp, #8
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800596c:	46c0      	nop			; (mov r8, r8)
 800596e:	46bd      	mov	sp, r7
 8005970:	b002      	add	sp, #8
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800597c:	46c0      	nop			; (mov r8, r8)
 800597e:	46bd      	mov	sp, r7
 8005980:	b002      	add	sp, #8
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a2f      	ldr	r2, [pc, #188]	; (8005a74 <TIM_Base_SetConfig+0xd0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_Base_SetConfig+0x20>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a2e      	ldr	r2, [pc, #184]	; (8005a78 <TIM_Base_SetConfig+0xd4>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d108      	bne.n	80059d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2270      	movs	r2, #112	; 0x70
 80059c8:	4393      	bics	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a26      	ldr	r2, [pc, #152]	; (8005a74 <TIM_Base_SetConfig+0xd0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <TIM_Base_SetConfig+0x62>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a25      	ldr	r2, [pc, #148]	; (8005a78 <TIM_Base_SetConfig+0xd4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00f      	beq.n	8005a06 <TIM_Base_SetConfig+0x62>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a24      	ldr	r2, [pc, #144]	; (8005a7c <TIM_Base_SetConfig+0xd8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00b      	beq.n	8005a06 <TIM_Base_SetConfig+0x62>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a23      	ldr	r2, [pc, #140]	; (8005a80 <TIM_Base_SetConfig+0xdc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d007      	beq.n	8005a06 <TIM_Base_SetConfig+0x62>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <TIM_Base_SetConfig+0xe0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d003      	beq.n	8005a06 <TIM_Base_SetConfig+0x62>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a21      	ldr	r2, [pc, #132]	; (8005a88 <TIM_Base_SetConfig+0xe4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d108      	bne.n	8005a18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4a20      	ldr	r2, [pc, #128]	; (8005a8c <TIM_Base_SetConfig+0xe8>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2280      	movs	r2, #128	; 0x80
 8005a1c:	4393      	bics	r3, r2
 8005a1e:	001a      	movs	r2, r3
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a0c      	ldr	r2, [pc, #48]	; (8005a74 <TIM_Base_SetConfig+0xd0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_Base_SetConfig+0xba>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a0d      	ldr	r2, [pc, #52]	; (8005a80 <TIM_Base_SetConfig+0xdc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_Base_SetConfig+0xba>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a0c      	ldr	r2, [pc, #48]	; (8005a84 <TIM_Base_SetConfig+0xe0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_Base_SetConfig+0xba>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <TIM_Base_SetConfig+0xe4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d103      	bne.n	8005a66 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	615a      	str	r2, [r3, #20]
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b004      	add	sp, #16
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40002000 	.word	0x40002000
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800
 8005a8c:	fffffcff 	.word	0xfffffcff

08005a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	4393      	bics	r3, r2
 8005aa2:	001a      	movs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2270      	movs	r2, #112	; 0x70
 8005abe:	4393      	bics	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	4393      	bics	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	4393      	bics	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a27      	ldr	r2, [pc, #156]	; (8005b88 <TIM_OC1_SetConfig+0xf8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00b      	beq.n	8005b06 <TIM_OC1_SetConfig+0x76>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a26      	ldr	r2, [pc, #152]	; (8005b8c <TIM_OC1_SetConfig+0xfc>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d007      	beq.n	8005b06 <TIM_OC1_SetConfig+0x76>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a25      	ldr	r2, [pc, #148]	; (8005b90 <TIM_OC1_SetConfig+0x100>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d003      	beq.n	8005b06 <TIM_OC1_SetConfig+0x76>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a24      	ldr	r2, [pc, #144]	; (8005b94 <TIM_OC1_SetConfig+0x104>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d10c      	bne.n	8005b20 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2208      	movs	r2, #8
 8005b0a:	4393      	bics	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	4393      	bics	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a19      	ldr	r2, [pc, #100]	; (8005b88 <TIM_OC1_SetConfig+0xf8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <TIM_OC1_SetConfig+0xb0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a18      	ldr	r2, [pc, #96]	; (8005b8c <TIM_OC1_SetConfig+0xfc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d007      	beq.n	8005b40 <TIM_OC1_SetConfig+0xb0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a17      	ldr	r2, [pc, #92]	; (8005b90 <TIM_OC1_SetConfig+0x100>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_OC1_SetConfig+0xb0>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <TIM_OC1_SetConfig+0x104>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d111      	bne.n	8005b64 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <TIM_OC1_SetConfig+0x108>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4a14      	ldr	r2, [pc, #80]	; (8005b9c <TIM_OC1_SetConfig+0x10c>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b006      	add	sp, #24
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40014400 	.word	0x40014400
 8005b94:	40014800 	.word	0x40014800
 8005b98:	fffffeff 	.word	0xfffffeff
 8005b9c:	fffffdff 	.word	0xfffffdff

08005ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	4393      	bics	r3, r2
 8005bb2:	001a      	movs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a2e      	ldr	r2, [pc, #184]	; (8005c88 <TIM_OC2_SetConfig+0xe8>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4a2d      	ldr	r2, [pc, #180]	; (8005c8c <TIM_OC2_SetConfig+0xec>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2220      	movs	r2, #32
 8005bea:	4393      	bics	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a24      	ldr	r2, [pc, #144]	; (8005c90 <TIM_OC2_SetConfig+0xf0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d10d      	bne.n	8005c1e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2280      	movs	r2, #128	; 0x80
 8005c06:	4393      	bics	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2240      	movs	r2, #64	; 0x40
 8005c1a:	4393      	bics	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a1b      	ldr	r2, [pc, #108]	; (8005c90 <TIM_OC2_SetConfig+0xf0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00b      	beq.n	8005c3e <TIM_OC2_SetConfig+0x9e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a1a      	ldr	r2, [pc, #104]	; (8005c94 <TIM_OC2_SetConfig+0xf4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d007      	beq.n	8005c3e <TIM_OC2_SetConfig+0x9e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a19      	ldr	r2, [pc, #100]	; (8005c98 <TIM_OC2_SetConfig+0xf8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC2_SetConfig+0x9e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <TIM_OC2_SetConfig+0xfc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d113      	bne.n	8005c66 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4a17      	ldr	r2, [pc, #92]	; (8005ca0 <TIM_OC2_SetConfig+0x100>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	4a16      	ldr	r2, [pc, #88]	; (8005ca4 <TIM_OC2_SetConfig+0x104>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	46c0      	nop			; (mov r8, r8)
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b006      	add	sp, #24
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	ffff8fff 	.word	0xffff8fff
 8005c8c:	fffffcff 	.word	0xfffffcff
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	40014000 	.word	0x40014000
 8005c98:	40014400 	.word	0x40014400
 8005c9c:	40014800 	.word	0x40014800
 8005ca0:	fffffbff 	.word	0xfffffbff
 8005ca4:	fffff7ff 	.word	0xfffff7ff

08005ca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	4a35      	ldr	r2, [pc, #212]	; (8005d8c <TIM_OC3_SetConfig+0xe4>)
 8005cb8:	401a      	ands	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2270      	movs	r2, #112	; 0x70
 8005cd4:	4393      	bics	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2203      	movs	r2, #3
 8005cdc:	4393      	bics	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	4a28      	ldr	r2, [pc, #160]	; (8005d90 <TIM_OC3_SetConfig+0xe8>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a24      	ldr	r2, [pc, #144]	; (8005d94 <TIM_OC3_SetConfig+0xec>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10d      	bne.n	8005d22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	4a23      	ldr	r2, [pc, #140]	; (8005d98 <TIM_OC3_SetConfig+0xf0>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	021b      	lsls	r3, r3, #8
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	4a1f      	ldr	r2, [pc, #124]	; (8005d9c <TIM_OC3_SetConfig+0xf4>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a1b      	ldr	r2, [pc, #108]	; (8005d94 <TIM_OC3_SetConfig+0xec>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00b      	beq.n	8005d42 <TIM_OC3_SetConfig+0x9a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <TIM_OC3_SetConfig+0xf8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d007      	beq.n	8005d42 <TIM_OC3_SetConfig+0x9a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <TIM_OC3_SetConfig+0xfc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_OC3_SetConfig+0x9a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1a      	ldr	r2, [pc, #104]	; (8005da8 <TIM_OC3_SetConfig+0x100>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d113      	bne.n	8005d6a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4a19      	ldr	r2, [pc, #100]	; (8005dac <TIM_OC3_SetConfig+0x104>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <TIM_OC3_SetConfig+0x108>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b006      	add	sp, #24
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	fffffeff 	.word	0xfffffeff
 8005d90:	fffffdff 	.word	0xfffffdff
 8005d94:	40012c00 	.word	0x40012c00
 8005d98:	fffff7ff 	.word	0xfffff7ff
 8005d9c:	fffffbff 	.word	0xfffffbff
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800
 8005dac:	ffffefff 	.word	0xffffefff
 8005db0:	ffffdfff 	.word	0xffffdfff

08005db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	4a28      	ldr	r2, [pc, #160]	; (8005e64 <TIM_OC4_SetConfig+0xb0>)
 8005dc4:	401a      	ands	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a22      	ldr	r2, [pc, #136]	; (8005e68 <TIM_OC4_SetConfig+0xb4>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a21      	ldr	r2, [pc, #132]	; (8005e6c <TIM_OC4_SetConfig+0xb8>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4a1d      	ldr	r2, [pc, #116]	; (8005e70 <TIM_OC4_SetConfig+0xbc>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a19      	ldr	r2, [pc, #100]	; (8005e74 <TIM_OC4_SetConfig+0xc0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <TIM_OC4_SetConfig+0x78>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <TIM_OC4_SetConfig+0xc4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d007      	beq.n	8005e2c <TIM_OC4_SetConfig+0x78>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a17      	ldr	r2, [pc, #92]	; (8005e7c <TIM_OC4_SetConfig+0xc8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_OC4_SetConfig+0x78>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a16      	ldr	r2, [pc, #88]	; (8005e80 <TIM_OC4_SetConfig+0xcc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d109      	bne.n	8005e40 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <TIM_OC4_SetConfig+0xd0>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	019b      	lsls	r3, r3, #6
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b006      	add	sp, #24
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	ffffefff 	.word	0xffffefff
 8005e68:	ffff8fff 	.word	0xffff8fff
 8005e6c:	fffffcff 	.word	0xfffffcff
 8005e70:	ffffdfff 	.word	0xffffdfff
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800
 8005e84:	ffffbfff 	.word	0xffffbfff

08005e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	4393      	bics	r3, r2
 8005ea2:	001a      	movs	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	22f0      	movs	r2, #240	; 0xf0
 8005eb2:	4393      	bics	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	220a      	movs	r2, #10
 8005ec4:	4393      	bics	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	46c0      	nop			; (mov r8, r8)
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b006      	add	sp, #24
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	4393      	bics	r3, r2
 8005ef8:	001a      	movs	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	4a0d      	ldr	r2, [pc, #52]	; (8005f44 <TIM_TI2_ConfigInputStage+0x60>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	031b      	lsls	r3, r3, #12
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	22a0      	movs	r2, #160	; 0xa0
 8005f20:	4393      	bics	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b006      	add	sp, #24
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	ffff0fff 	.word	0xffff0fff

08005f48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2270      	movs	r2, #112	; 0x70
 8005f5c:	4393      	bics	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	2207      	movs	r2, #7
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	609a      	str	r2, [r3, #8]
}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	46bd      	mov	sp, r7
 8005f76:	b004      	add	sp, #16
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	4a09      	ldr	r2, [pc, #36]	; (8005fb8 <TIM_ETR_SetConfig+0x3c>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	46c0      	nop			; (mov r8, r8)
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b006      	add	sp, #24
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	ffff00ff 	.word	0xffff00ff

08005fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	221f      	movs	r2, #31
 8005fcc:	4013      	ands	r3, r2
 8005fce:	2201      	movs	r2, #1
 8005fd0:	409a      	lsls	r2, r3
 8005fd2:	0013      	movs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	43d2      	mvns	r2, r2
 8005fde:	401a      	ands	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a1a      	ldr	r2, [r3, #32]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	211f      	movs	r1, #31
 8005fec:	400b      	ands	r3, r1
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	4099      	lsls	r1, r3
 8005ff2:	000b      	movs	r3, r1
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b006      	add	sp, #24
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	223c      	movs	r2, #60	; 0x3c
 8006012:	5c9b      	ldrb	r3, [r3, r2]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006018:	2302      	movs	r3, #2
 800601a:	e041      	b.n	80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	223c      	movs	r2, #60	; 0x3c
 8006020:	2101      	movs	r1, #1
 8006022:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	223d      	movs	r2, #61	; 0x3d
 8006028:	2102      	movs	r1, #2
 800602a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2270      	movs	r2, #112	; 0x70
 8006040:	4393      	bics	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a13      	ldr	r2, [pc, #76]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d009      	beq.n	8006074 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a11      	ldr	r2, [pc, #68]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a10      	ldr	r2, [pc, #64]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d10c      	bne.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2280      	movs	r2, #128	; 0x80
 8006078:	4393      	bics	r3, r2
 800607a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	4313      	orrs	r3, r2
 8006084:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	223d      	movs	r2, #61	; 0x3d
 8006092:	2101      	movs	r1, #1
 8006094:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	223c      	movs	r2, #60	; 0x3c
 800609a:	2100      	movs	r1, #0
 800609c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	0018      	movs	r0, r3
 80060a2:	46bd      	mov	sp, r7
 80060a4:	b004      	add	sp, #16
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40014000 	.word	0x40014000

080060b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060bc:	46c0      	nop			; (mov r8, r8)
 80060be:	46bd      	mov	sp, r7
 80060c0:	b002      	add	sp, #8
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060cc:	46c0      	nop			; (mov r8, r8)
 80060ce:	46bd      	mov	sp, r7
 80060d0:	b002      	add	sp, #8
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e044      	b.n	8006170 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d107      	bne.n	80060fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2270      	movs	r2, #112	; 0x70
 80060f2:	2100      	movs	r1, #0
 80060f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	0018      	movs	r0, r3
 80060fa:	f7fc fec9 	bl	8002e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2224      	movs	r2, #36	; 0x24
 8006102:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2101      	movs	r1, #1
 8006110:	438a      	bics	r2, r1
 8006112:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	0018      	movs	r0, r3
 8006118:	f000 f830 	bl	800617c <UART_SetConfig>
 800611c:	0003      	movs	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e024      	b.n	8006170 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	0018      	movs	r0, r3
 8006132:	f000 f9a9 	bl	8006488 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	490d      	ldr	r1, [pc, #52]	; (8006178 <HAL_UART_Init+0xa4>)
 8006142:	400a      	ands	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2108      	movs	r1, #8
 8006152:	438a      	bics	r2, r1
 8006154:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2101      	movs	r1, #1
 8006162:	430a      	orrs	r2, r1
 8006164:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	0018      	movs	r0, r3
 800616a:	f000 fa41 	bl	80065f0 <UART_CheckIdleState>
 800616e:	0003      	movs	r3, r0
}
 8006170:	0018      	movs	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	b002      	add	sp, #8
 8006176:	bd80      	pop	{r7, pc}
 8006178:	fffff7ff 	.word	0xfffff7ff

0800617c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006184:	2300      	movs	r3, #0
 8006186:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006188:	2317      	movs	r3, #23
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	2200      	movs	r2, #0
 800618e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4aad      	ldr	r2, [pc, #692]	; (8006464 <UART_SetConfig+0x2e8>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	0019      	movs	r1, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	4aa8      	ldr	r2, [pc, #672]	; (8006468 <UART_SetConfig+0x2ec>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	0019      	movs	r1, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	4a9f      	ldr	r2, [pc, #636]	; (800646c <UART_SetConfig+0x2f0>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	0019      	movs	r1, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a9b      	ldr	r2, [pc, #620]	; (8006470 <UART_SetConfig+0x2f4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d125      	bne.n	8006252 <UART_SetConfig+0xd6>
 8006206:	4b9b      	ldr	r3, [pc, #620]	; (8006474 <UART_SetConfig+0x2f8>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	2203      	movs	r2, #3
 800620c:	4013      	ands	r3, r2
 800620e:	2b01      	cmp	r3, #1
 8006210:	d00f      	beq.n	8006232 <UART_SetConfig+0xb6>
 8006212:	d304      	bcc.n	800621e <UART_SetConfig+0xa2>
 8006214:	2b02      	cmp	r3, #2
 8006216:	d011      	beq.n	800623c <UART_SetConfig+0xc0>
 8006218:	2b03      	cmp	r3, #3
 800621a:	d005      	beq.n	8006228 <UART_SetConfig+0xac>
 800621c:	e013      	b.n	8006246 <UART_SetConfig+0xca>
 800621e:	231f      	movs	r3, #31
 8006220:	18fb      	adds	r3, r7, r3
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e022      	b.n	800626e <UART_SetConfig+0xf2>
 8006228:	231f      	movs	r3, #31
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	2202      	movs	r2, #2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	e01d      	b.n	800626e <UART_SetConfig+0xf2>
 8006232:	231f      	movs	r3, #31
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	2204      	movs	r2, #4
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e018      	b.n	800626e <UART_SetConfig+0xf2>
 800623c:	231f      	movs	r3, #31
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	2208      	movs	r2, #8
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e013      	b.n	800626e <UART_SetConfig+0xf2>
 8006246:	231f      	movs	r3, #31
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	2210      	movs	r2, #16
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	e00d      	b.n	800626e <UART_SetConfig+0xf2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a88      	ldr	r2, [pc, #544]	; (8006478 <UART_SetConfig+0x2fc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d104      	bne.n	8006266 <UART_SetConfig+0xea>
 800625c:	231f      	movs	r3, #31
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	e003      	b.n	800626e <UART_SetConfig+0xf2>
 8006266:	231f      	movs	r3, #31
 8006268:	18fb      	adds	r3, r7, r3
 800626a:	2210      	movs	r2, #16
 800626c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69da      	ldr	r2, [r3, #28]
 8006272:	2380      	movs	r3, #128	; 0x80
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	429a      	cmp	r2, r3
 8006278:	d000      	beq.n	800627c <UART_SetConfig+0x100>
 800627a:	e07d      	b.n	8006378 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 800627c:	231f      	movs	r3, #31
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d01c      	beq.n	80062c0 <UART_SetConfig+0x144>
 8006286:	dc02      	bgt.n	800628e <UART_SetConfig+0x112>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <UART_SetConfig+0x11c>
 800628c:	e04b      	b.n	8006326 <UART_SetConfig+0x1aa>
 800628e:	2b04      	cmp	r3, #4
 8006290:	d025      	beq.n	80062de <UART_SetConfig+0x162>
 8006292:	2b08      	cmp	r3, #8
 8006294:	d037      	beq.n	8006306 <UART_SetConfig+0x18a>
 8006296:	e046      	b.n	8006326 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006298:	f7fe ff40 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 800629c:	0003      	movs	r3, r0
 800629e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	005a      	lsls	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	18d2      	adds	r2, r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	0019      	movs	r1, r3
 80062b2:	0010      	movs	r0, r2
 80062b4:	f7f9 ff3a 	bl	800012c <__udivsi3>
 80062b8:	0003      	movs	r3, r0
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	61bb      	str	r3, [r7, #24]
        break;
 80062be:	e037      	b.n	8006330 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	4a6d      	ldr	r2, [pc, #436]	; (800647c <UART_SetConfig+0x300>)
 80062c8:	189a      	adds	r2, r3, r2
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	0019      	movs	r1, r3
 80062d0:	0010      	movs	r0, r2
 80062d2:	f7f9 ff2b 	bl	800012c <__udivsi3>
 80062d6:	0003      	movs	r3, r0
 80062d8:	b29b      	uxth	r3, r3
 80062da:	61bb      	str	r3, [r7, #24]
        break;
 80062dc:	e028      	b.n	8006330 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062de:	f7fe feaf 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 80062e2:	0003      	movs	r3, r0
 80062e4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	005a      	lsls	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	18d2      	adds	r2, r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	0019      	movs	r1, r3
 80062f8:	0010      	movs	r0, r2
 80062fa:	f7f9 ff17 	bl	800012c <__udivsi3>
 80062fe:	0003      	movs	r3, r0
 8006300:	b29b      	uxth	r3, r3
 8006302:	61bb      	str	r3, [r7, #24]
        break;
 8006304:	e014      	b.n	8006330 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	2280      	movs	r2, #128	; 0x80
 800630e:	0252      	lsls	r2, r2, #9
 8006310:	189a      	adds	r2, r3, r2
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	0019      	movs	r1, r3
 8006318:	0010      	movs	r0, r2
 800631a:	f7f9 ff07 	bl	800012c <__udivsi3>
 800631e:	0003      	movs	r3, r0
 8006320:	b29b      	uxth	r3, r3
 8006322:	61bb      	str	r3, [r7, #24]
        break;
 8006324:	e004      	b.n	8006330 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8006326:	2317      	movs	r3, #23
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	2201      	movs	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
        break;
 800632e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	2b0f      	cmp	r3, #15
 8006334:	d91b      	bls.n	800636e <UART_SetConfig+0x1f2>
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	4a51      	ldr	r2, [pc, #324]	; (8006480 <UART_SetConfig+0x304>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d817      	bhi.n	800636e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	b29a      	uxth	r2, r3
 8006342:	200a      	movs	r0, #10
 8006344:	183b      	adds	r3, r7, r0
 8006346:	210f      	movs	r1, #15
 8006348:	438a      	bics	r2, r1
 800634a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	085b      	lsrs	r3, r3, #1
 8006350:	b29b      	uxth	r3, r3
 8006352:	2207      	movs	r2, #7
 8006354:	4013      	ands	r3, r2
 8006356:	b299      	uxth	r1, r3
 8006358:	183b      	adds	r3, r7, r0
 800635a:	183a      	adds	r2, r7, r0
 800635c:	8812      	ldrh	r2, [r2, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	183a      	adds	r2, r7, r0
 8006368:	8812      	ldrh	r2, [r2, #0]
 800636a:	60da      	str	r2, [r3, #12]
 800636c:	e06c      	b.n	8006448 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800636e:	2317      	movs	r3, #23
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	e067      	b.n	8006448 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8006378:	231f      	movs	r3, #31
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d01b      	beq.n	80063ba <UART_SetConfig+0x23e>
 8006382:	dc02      	bgt.n	800638a <UART_SetConfig+0x20e>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <UART_SetConfig+0x218>
 8006388:	e049      	b.n	800641e <UART_SetConfig+0x2a2>
 800638a:	2b04      	cmp	r3, #4
 800638c:	d024      	beq.n	80063d8 <UART_SetConfig+0x25c>
 800638e:	2b08      	cmp	r3, #8
 8006390:	d035      	beq.n	80063fe <UART_SetConfig+0x282>
 8006392:	e044      	b.n	800641e <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006394:	f7fe fec2 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 8006398:	0003      	movs	r3, r0
 800639a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	085a      	lsrs	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	18d2      	adds	r2, r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	0019      	movs	r1, r3
 80063ac:	0010      	movs	r0, r2
 80063ae:	f7f9 febd 	bl	800012c <__udivsi3>
 80063b2:	0003      	movs	r3, r0
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	61bb      	str	r3, [r7, #24]
        break;
 80063b8:	e036      	b.n	8006428 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	4a30      	ldr	r2, [pc, #192]	; (8006484 <UART_SetConfig+0x308>)
 80063c2:	189a      	adds	r2, r3, r2
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	0019      	movs	r1, r3
 80063ca:	0010      	movs	r0, r2
 80063cc:	f7f9 feae 	bl	800012c <__udivsi3>
 80063d0:	0003      	movs	r3, r0
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	61bb      	str	r3, [r7, #24]
        break;
 80063d6:	e027      	b.n	8006428 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063d8:	f7fe fe32 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 80063dc:	0003      	movs	r3, r0
 80063de:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	085a      	lsrs	r2, r3, #1
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	18d2      	adds	r2, r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	0019      	movs	r1, r3
 80063f0:	0010      	movs	r0, r2
 80063f2:	f7f9 fe9b 	bl	800012c <__udivsi3>
 80063f6:	0003      	movs	r3, r0
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	61bb      	str	r3, [r7, #24]
        break;
 80063fc:	e014      	b.n	8006428 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	2280      	movs	r2, #128	; 0x80
 8006406:	0212      	lsls	r2, r2, #8
 8006408:	189a      	adds	r2, r3, r2
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	0019      	movs	r1, r3
 8006410:	0010      	movs	r0, r2
 8006412:	f7f9 fe8b 	bl	800012c <__udivsi3>
 8006416:	0003      	movs	r3, r0
 8006418:	b29b      	uxth	r3, r3
 800641a:	61bb      	str	r3, [r7, #24]
        break;
 800641c:	e004      	b.n	8006428 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 800641e:	2317      	movs	r3, #23
 8006420:	18fb      	adds	r3, r7, r3
 8006422:	2201      	movs	r2, #1
 8006424:	701a      	strb	r2, [r3, #0]
        break;
 8006426:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b0f      	cmp	r3, #15
 800642c:	d908      	bls.n	8006440 <UART_SetConfig+0x2c4>
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	4a13      	ldr	r2, [pc, #76]	; (8006480 <UART_SetConfig+0x304>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d804      	bhi.n	8006440 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	60da      	str	r2, [r3, #12]
 800643e:	e003      	b.n	8006448 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006440:	2317      	movs	r3, #23
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006454:	2317      	movs	r3, #23
 8006456:	18fb      	adds	r3, r7, r3
 8006458:	781b      	ldrb	r3, [r3, #0]
}
 800645a:	0018      	movs	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	b008      	add	sp, #32
 8006460:	bd80      	pop	{r7, pc}
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	ffff69f3 	.word	0xffff69f3
 8006468:	ffffcfff 	.word	0xffffcfff
 800646c:	fffff4ff 	.word	0xfffff4ff
 8006470:	40013800 	.word	0x40013800
 8006474:	40021000 	.word	0x40021000
 8006478:	40004400 	.word	0x40004400
 800647c:	00f42400 	.word	0x00f42400
 8006480:	0000ffff 	.word	0x0000ffff
 8006484:	007a1200 	.word	0x007a1200

08006488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	2201      	movs	r2, #1
 8006496:	4013      	ands	r3, r2
 8006498:	d00b      	beq.n	80064b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	4a4a      	ldr	r2, [pc, #296]	; (80065cc <UART_AdvFeatureConfig+0x144>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	0019      	movs	r1, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	2202      	movs	r2, #2
 80064b8:	4013      	ands	r3, r2
 80064ba:	d00b      	beq.n	80064d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	4a43      	ldr	r2, [pc, #268]	; (80065d0 <UART_AdvFeatureConfig+0x148>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	0019      	movs	r1, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	2204      	movs	r2, #4
 80064da:	4013      	ands	r3, r2
 80064dc:	d00b      	beq.n	80064f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4a3b      	ldr	r2, [pc, #236]	; (80065d4 <UART_AdvFeatureConfig+0x14c>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	0019      	movs	r1, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	2208      	movs	r2, #8
 80064fc:	4013      	ands	r3, r2
 80064fe:	d00b      	beq.n	8006518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	4a34      	ldr	r2, [pc, #208]	; (80065d8 <UART_AdvFeatureConfig+0x150>)
 8006508:	4013      	ands	r3, r2
 800650a:	0019      	movs	r1, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2210      	movs	r2, #16
 800651e:	4013      	ands	r3, r2
 8006520:	d00b      	beq.n	800653a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	4a2c      	ldr	r2, [pc, #176]	; (80065dc <UART_AdvFeatureConfig+0x154>)
 800652a:	4013      	ands	r3, r2
 800652c:	0019      	movs	r1, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	2220      	movs	r2, #32
 8006540:	4013      	ands	r3, r2
 8006542:	d00b      	beq.n	800655c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	4a25      	ldr	r2, [pc, #148]	; (80065e0 <UART_AdvFeatureConfig+0x158>)
 800654c:	4013      	ands	r3, r2
 800654e:	0019      	movs	r1, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	2240      	movs	r2, #64	; 0x40
 8006562:	4013      	ands	r3, r2
 8006564:	d01d      	beq.n	80065a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <UART_AdvFeatureConfig+0x15c>)
 800656e:	4013      	ands	r3, r2
 8006570:	0019      	movs	r1, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006582:	2380      	movs	r3, #128	; 0x80
 8006584:	035b      	lsls	r3, r3, #13
 8006586:	429a      	cmp	r2, r3
 8006588:	d10b      	bne.n	80065a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <UART_AdvFeatureConfig+0x160>)
 8006592:	4013      	ands	r3, r2
 8006594:	0019      	movs	r1, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	2280      	movs	r2, #128	; 0x80
 80065a8:	4013      	ands	r3, r2
 80065aa:	d00b      	beq.n	80065c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	4a0e      	ldr	r2, [pc, #56]	; (80065ec <UART_AdvFeatureConfig+0x164>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	0019      	movs	r1, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }
}
 80065c4:	46c0      	nop			; (mov r8, r8)
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b002      	add	sp, #8
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	fffdffff 	.word	0xfffdffff
 80065d0:	fffeffff 	.word	0xfffeffff
 80065d4:	fffbffff 	.word	0xfffbffff
 80065d8:	ffff7fff 	.word	0xffff7fff
 80065dc:	ffffefff 	.word	0xffffefff
 80065e0:	ffffdfff 	.word	0xffffdfff
 80065e4:	ffefffff 	.word	0xffefffff
 80065e8:	ff9fffff 	.word	0xff9fffff
 80065ec:	fff7ffff 	.word	0xfff7ffff

080065f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80065fe:	f7fc fdab 	bl	8003158 <HAL_GetTick>
 8006602:	0003      	movs	r3, r0
 8006604:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2208      	movs	r2, #8
 800660e:	4013      	ands	r3, r2
 8006610:	2b08      	cmp	r3, #8
 8006612:	d10d      	bne.n	8006630 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	2380      	movs	r3, #128	; 0x80
 8006618:	0399      	lsls	r1, r3, #14
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4b16      	ldr	r3, [pc, #88]	; (8006678 <UART_CheckIdleState+0x88>)
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	0013      	movs	r3, r2
 8006622:	2200      	movs	r2, #0
 8006624:	f000 f82a 	bl	800667c <UART_WaitOnFlagUntilTimeout>
 8006628:	1e03      	subs	r3, r0, #0
 800662a:	d001      	beq.n	8006630 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e01f      	b.n	8006670 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2204      	movs	r2, #4
 8006638:	4013      	ands	r3, r2
 800663a:	2b04      	cmp	r3, #4
 800663c:	d10d      	bne.n	800665a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	2380      	movs	r3, #128	; 0x80
 8006642:	03d9      	lsls	r1, r3, #15
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <UART_CheckIdleState+0x88>)
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	0013      	movs	r3, r2
 800664c:	2200      	movs	r2, #0
 800664e:	f000 f815 	bl	800667c <UART_WaitOnFlagUntilTimeout>
 8006652:	1e03      	subs	r3, r0, #0
 8006654:	d001      	beq.n	800665a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e00a      	b.n	8006670 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2270      	movs	r2, #112	; 0x70
 800666a:	2100      	movs	r1, #0
 800666c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	0018      	movs	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	b004      	add	sp, #16
 8006676:	bd80      	pop	{r7, pc}
 8006678:	01ffffff 	.word	0x01ffffff

0800667c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	1dfb      	adds	r3, r7, #7
 800668a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800668c:	e05d      	b.n	800674a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	3301      	adds	r3, #1
 8006692:	d05a      	beq.n	800674a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006694:	f7fc fd60 	bl	8003158 <HAL_GetTick>
 8006698:	0002      	movs	r2, r0
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d302      	bcc.n	80066aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d11b      	bne.n	80066e2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	492f      	ldr	r1, [pc, #188]	; (8006774 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80066b6:	400a      	ands	r2, r1
 80066b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2101      	movs	r1, #1
 80066c6:	438a      	bics	r2, r1
 80066c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2270      	movs	r2, #112	; 0x70
 80066da:	2100      	movs	r1, #0
 80066dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e043      	b.n	800676a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2204      	movs	r2, #4
 80066ea:	4013      	ands	r3, r2
 80066ec:	d02d      	beq.n	800674a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	2380      	movs	r3, #128	; 0x80
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	401a      	ands	r2, r3
 80066fa:	2380      	movs	r3, #128	; 0x80
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	429a      	cmp	r2, r3
 8006700:	d123      	bne.n	800674a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2280      	movs	r2, #128	; 0x80
 8006708:	0112      	lsls	r2, r2, #4
 800670a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4917      	ldr	r1, [pc, #92]	; (8006774 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006718:	400a      	ands	r2, r1
 800671a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2101      	movs	r1, #1
 8006728:	438a      	bics	r2, r1
 800672a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2270      	movs	r2, #112	; 0x70
 8006742:	2100      	movs	r1, #0
 8006744:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e00f      	b.n	800676a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	4013      	ands	r3, r2
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	425a      	negs	r2, r3
 800675a:	4153      	adcs	r3, r2
 800675c:	b2db      	uxtb	r3, r3
 800675e:	001a      	movs	r2, r3
 8006760:	1dfb      	adds	r3, r7, #7
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d092      	beq.n	800668e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	0018      	movs	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	b004      	add	sp, #16
 8006770:	bd80      	pop	{r7, pc}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	fffffe5f 	.word	0xfffffe5f

08006778 <__errno>:
 8006778:	4b01      	ldr	r3, [pc, #4]	; (8006780 <__errno+0x8>)
 800677a:	6818      	ldr	r0, [r3, #0]
 800677c:	4770      	bx	lr
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	20000014 	.word	0x20000014

08006784 <__libc_init_array>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	2600      	movs	r6, #0
 8006788:	4d0c      	ldr	r5, [pc, #48]	; (80067bc <__libc_init_array+0x38>)
 800678a:	4c0d      	ldr	r4, [pc, #52]	; (80067c0 <__libc_init_array+0x3c>)
 800678c:	1b64      	subs	r4, r4, r5
 800678e:	10a4      	asrs	r4, r4, #2
 8006790:	42a6      	cmp	r6, r4
 8006792:	d109      	bne.n	80067a8 <__libc_init_array+0x24>
 8006794:	2600      	movs	r6, #0
 8006796:	f001 fd81 	bl	800829c <_init>
 800679a:	4d0a      	ldr	r5, [pc, #40]	; (80067c4 <__libc_init_array+0x40>)
 800679c:	4c0a      	ldr	r4, [pc, #40]	; (80067c8 <__libc_init_array+0x44>)
 800679e:	1b64      	subs	r4, r4, r5
 80067a0:	10a4      	asrs	r4, r4, #2
 80067a2:	42a6      	cmp	r6, r4
 80067a4:	d105      	bne.n	80067b2 <__libc_init_array+0x2e>
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	00b3      	lsls	r3, r6, #2
 80067aa:	58eb      	ldr	r3, [r5, r3]
 80067ac:	4798      	blx	r3
 80067ae:	3601      	adds	r6, #1
 80067b0:	e7ee      	b.n	8006790 <__libc_init_array+0xc>
 80067b2:	00b3      	lsls	r3, r6, #2
 80067b4:	58eb      	ldr	r3, [r5, r3]
 80067b6:	4798      	blx	r3
 80067b8:	3601      	adds	r6, #1
 80067ba:	e7f2      	b.n	80067a2 <__libc_init_array+0x1e>
 80067bc:	08009300 	.word	0x08009300
 80067c0:	08009300 	.word	0x08009300
 80067c4:	08009300 	.word	0x08009300
 80067c8:	08009304 	.word	0x08009304

080067cc <memset>:
 80067cc:	0003      	movs	r3, r0
 80067ce:	1812      	adds	r2, r2, r0
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d100      	bne.n	80067d6 <memset+0xa>
 80067d4:	4770      	bx	lr
 80067d6:	7019      	strb	r1, [r3, #0]
 80067d8:	3301      	adds	r3, #1
 80067da:	e7f9      	b.n	80067d0 <memset+0x4>

080067dc <__cvt>:
 80067dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067de:	b08b      	sub	sp, #44	; 0x2c
 80067e0:	0014      	movs	r4, r2
 80067e2:	1e1d      	subs	r5, r3, #0
 80067e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80067e6:	da53      	bge.n	8006890 <__cvt+0xb4>
 80067e8:	2480      	movs	r4, #128	; 0x80
 80067ea:	0624      	lsls	r4, r4, #24
 80067ec:	191b      	adds	r3, r3, r4
 80067ee:	001d      	movs	r5, r3
 80067f0:	0014      	movs	r4, r2
 80067f2:	232d      	movs	r3, #45	; 0x2d
 80067f4:	700b      	strb	r3, [r1, #0]
 80067f6:	2320      	movs	r3, #32
 80067f8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80067fa:	2203      	movs	r2, #3
 80067fc:	439e      	bics	r6, r3
 80067fe:	2e46      	cmp	r6, #70	; 0x46
 8006800:	d007      	beq.n	8006812 <__cvt+0x36>
 8006802:	0033      	movs	r3, r6
 8006804:	3b45      	subs	r3, #69	; 0x45
 8006806:	4259      	negs	r1, r3
 8006808:	414b      	adcs	r3, r1
 800680a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800680c:	3a01      	subs	r2, #1
 800680e:	18cb      	adds	r3, r1, r3
 8006810:	9310      	str	r3, [sp, #64]	; 0x40
 8006812:	ab09      	add	r3, sp, #36	; 0x24
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	ab08      	add	r3, sp, #32
 8006818:	9303      	str	r3, [sp, #12]
 800681a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800681c:	9200      	str	r2, [sp, #0]
 800681e:	9302      	str	r3, [sp, #8]
 8006820:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006822:	0022      	movs	r2, r4
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	002b      	movs	r3, r5
 8006828:	f000 fbb4 	bl	8006f94 <_dtoa_r>
 800682c:	0007      	movs	r7, r0
 800682e:	2e47      	cmp	r6, #71	; 0x47
 8006830:	d102      	bne.n	8006838 <__cvt+0x5c>
 8006832:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006834:	07db      	lsls	r3, r3, #31
 8006836:	d524      	bpl.n	8006882 <__cvt+0xa6>
 8006838:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800683a:	18fb      	adds	r3, r7, r3
 800683c:	9307      	str	r3, [sp, #28]
 800683e:	2e46      	cmp	r6, #70	; 0x46
 8006840:	d114      	bne.n	800686c <__cvt+0x90>
 8006842:	783b      	ldrb	r3, [r7, #0]
 8006844:	2b30      	cmp	r3, #48	; 0x30
 8006846:	d10c      	bne.n	8006862 <__cvt+0x86>
 8006848:	2200      	movs	r2, #0
 800684a:	2300      	movs	r3, #0
 800684c:	0020      	movs	r0, r4
 800684e:	0029      	movs	r1, r5
 8006850:	f7f9 fdf2 	bl	8000438 <__aeabi_dcmpeq>
 8006854:	2800      	cmp	r0, #0
 8006856:	d104      	bne.n	8006862 <__cvt+0x86>
 8006858:	2301      	movs	r3, #1
 800685a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006864:	9a07      	ldr	r2, [sp, #28]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	18d3      	adds	r3, r2, r3
 800686a:	9307      	str	r3, [sp, #28]
 800686c:	2200      	movs	r2, #0
 800686e:	2300      	movs	r3, #0
 8006870:	0020      	movs	r0, r4
 8006872:	0029      	movs	r1, r5
 8006874:	f7f9 fde0 	bl	8000438 <__aeabi_dcmpeq>
 8006878:	2230      	movs	r2, #48	; 0x30
 800687a:	2800      	cmp	r0, #0
 800687c:	d00d      	beq.n	800689a <__cvt+0xbe>
 800687e:	9b07      	ldr	r3, [sp, #28]
 8006880:	9309      	str	r3, [sp, #36]	; 0x24
 8006882:	0038      	movs	r0, r7
 8006884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006886:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006888:	1bdb      	subs	r3, r3, r7
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	b00b      	add	sp, #44	; 0x2c
 800688e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006890:	2300      	movs	r3, #0
 8006892:	e7af      	b.n	80067f4 <__cvt+0x18>
 8006894:	1c59      	adds	r1, r3, #1
 8006896:	9109      	str	r1, [sp, #36]	; 0x24
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689c:	9907      	ldr	r1, [sp, #28]
 800689e:	428b      	cmp	r3, r1
 80068a0:	d3f8      	bcc.n	8006894 <__cvt+0xb8>
 80068a2:	e7ee      	b.n	8006882 <__cvt+0xa6>

080068a4 <__exponent>:
 80068a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068a6:	1c83      	adds	r3, r0, #2
 80068a8:	b085      	sub	sp, #20
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	0006      	movs	r6, r0
 80068ae:	000c      	movs	r4, r1
 80068b0:	7002      	strb	r2, [r0, #0]
 80068b2:	232b      	movs	r3, #43	; 0x2b
 80068b4:	2900      	cmp	r1, #0
 80068b6:	da01      	bge.n	80068bc <__exponent+0x18>
 80068b8:	232d      	movs	r3, #45	; 0x2d
 80068ba:	424c      	negs	r4, r1
 80068bc:	7073      	strb	r3, [r6, #1]
 80068be:	2c09      	cmp	r4, #9
 80068c0:	dd22      	ble.n	8006908 <__exponent+0x64>
 80068c2:	ab02      	add	r3, sp, #8
 80068c4:	1ddd      	adds	r5, r3, #7
 80068c6:	0020      	movs	r0, r4
 80068c8:	210a      	movs	r1, #10
 80068ca:	f7f9 fd9f 	bl	800040c <__aeabi_idivmod>
 80068ce:	1e6f      	subs	r7, r5, #1
 80068d0:	3130      	adds	r1, #48	; 0x30
 80068d2:	7039      	strb	r1, [r7, #0]
 80068d4:	0020      	movs	r0, r4
 80068d6:	210a      	movs	r1, #10
 80068d8:	f7f9 fcb2 	bl	8000240 <__divsi3>
 80068dc:	0004      	movs	r4, r0
 80068de:	2809      	cmp	r0, #9
 80068e0:	dc0b      	bgt.n	80068fa <__exponent+0x56>
 80068e2:	3d02      	subs	r5, #2
 80068e4:	3430      	adds	r4, #48	; 0x30
 80068e6:	9b01      	ldr	r3, [sp, #4]
 80068e8:	702c      	strb	r4, [r5, #0]
 80068ea:	aa02      	add	r2, sp, #8
 80068ec:	3207      	adds	r2, #7
 80068ee:	0018      	movs	r0, r3
 80068f0:	42aa      	cmp	r2, r5
 80068f2:	d804      	bhi.n	80068fe <__exponent+0x5a>
 80068f4:	1b80      	subs	r0, r0, r6
 80068f6:	b005      	add	sp, #20
 80068f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068fa:	003d      	movs	r5, r7
 80068fc:	e7e3      	b.n	80068c6 <__exponent+0x22>
 80068fe:	782a      	ldrb	r2, [r5, #0]
 8006900:	3501      	adds	r5, #1
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	3301      	adds	r3, #1
 8006906:	e7f0      	b.n	80068ea <__exponent+0x46>
 8006908:	2330      	movs	r3, #48	; 0x30
 800690a:	18e4      	adds	r4, r4, r3
 800690c:	70b3      	strb	r3, [r6, #2]
 800690e:	1d30      	adds	r0, r6, #4
 8006910:	70f4      	strb	r4, [r6, #3]
 8006912:	e7ef      	b.n	80068f4 <__exponent+0x50>

08006914 <_printf_float>:
 8006914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006916:	b095      	sub	sp, #84	; 0x54
 8006918:	000c      	movs	r4, r1
 800691a:	920a      	str	r2, [sp, #40]	; 0x28
 800691c:	930b      	str	r3, [sp, #44]	; 0x2c
 800691e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006920:	9009      	str	r0, [sp, #36]	; 0x24
 8006922:	f001 f917 	bl	8007b54 <_localeconv_r>
 8006926:	6803      	ldr	r3, [r0, #0]
 8006928:	0018      	movs	r0, r3
 800692a:	930c      	str	r3, [sp, #48]	; 0x30
 800692c:	f7f9 fbec 	bl	8000108 <strlen>
 8006930:	2300      	movs	r3, #0
 8006932:	9312      	str	r3, [sp, #72]	; 0x48
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	900e      	str	r0, [sp, #56]	; 0x38
 8006938:	930d      	str	r3, [sp, #52]	; 0x34
 800693a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800693c:	7e27      	ldrb	r7, [r4, #24]
 800693e:	682b      	ldr	r3, [r5, #0]
 8006940:	2207      	movs	r2, #7
 8006942:	05c9      	lsls	r1, r1, #23
 8006944:	d545      	bpl.n	80069d2 <_printf_float+0xbe>
 8006946:	189b      	adds	r3, r3, r2
 8006948:	4393      	bics	r3, r2
 800694a:	001a      	movs	r2, r3
 800694c:	3208      	adds	r2, #8
 800694e:	602a      	str	r2, [r5, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	64a2      	str	r2, [r4, #72]	; 0x48
 8006956:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006958:	2201      	movs	r2, #1
 800695a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800695c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800695e:	006b      	lsls	r3, r5, #1
 8006960:	085b      	lsrs	r3, r3, #1
 8006962:	930f      	str	r3, [sp, #60]	; 0x3c
 8006964:	4252      	negs	r2, r2
 8006966:	4bac      	ldr	r3, [pc, #688]	; (8006c18 <_printf_float+0x304>)
 8006968:	0030      	movs	r0, r6
 800696a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800696c:	f7fb fa72 	bl	8001e54 <__aeabi_dcmpun>
 8006970:	2800      	cmp	r0, #0
 8006972:	d130      	bne.n	80069d6 <_printf_float+0xc2>
 8006974:	2201      	movs	r2, #1
 8006976:	4ba8      	ldr	r3, [pc, #672]	; (8006c18 <_printf_float+0x304>)
 8006978:	4252      	negs	r2, r2
 800697a:	0030      	movs	r0, r6
 800697c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800697e:	f7f9 fd6b 	bl	8000458 <__aeabi_dcmple>
 8006982:	2800      	cmp	r0, #0
 8006984:	d127      	bne.n	80069d6 <_printf_float+0xc2>
 8006986:	2200      	movs	r2, #0
 8006988:	2300      	movs	r3, #0
 800698a:	0030      	movs	r0, r6
 800698c:	0029      	movs	r1, r5
 800698e:	f7f9 fd59 	bl	8000444 <__aeabi_dcmplt>
 8006992:	2800      	cmp	r0, #0
 8006994:	d003      	beq.n	800699e <_printf_float+0x8a>
 8006996:	0023      	movs	r3, r4
 8006998:	222d      	movs	r2, #45	; 0x2d
 800699a:	3343      	adds	r3, #67	; 0x43
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	4d9f      	ldr	r5, [pc, #636]	; (8006c1c <_printf_float+0x308>)
 80069a0:	2f47      	cmp	r7, #71	; 0x47
 80069a2:	d800      	bhi.n	80069a6 <_printf_float+0x92>
 80069a4:	4d9e      	ldr	r5, [pc, #632]	; (8006c20 <_printf_float+0x30c>)
 80069a6:	2303      	movs	r3, #3
 80069a8:	2600      	movs	r6, #0
 80069aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	3301      	adds	r3, #1
 80069b0:	439a      	bics	r2, r3
 80069b2:	6022      	str	r2, [r4, #0]
 80069b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b6:	aa13      	add	r2, sp, #76	; 0x4c
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	0021      	movs	r1, r4
 80069bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069c0:	f000 f9f4 	bl	8006dac <_printf_common>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d000      	beq.n	80069ca <_printf_float+0xb6>
 80069c8:	e093      	b.n	8006af2 <_printf_float+0x1de>
 80069ca:	2001      	movs	r0, #1
 80069cc:	4240      	negs	r0, r0
 80069ce:	b015      	add	sp, #84	; 0x54
 80069d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d2:	3307      	adds	r3, #7
 80069d4:	e7b8      	b.n	8006948 <_printf_float+0x34>
 80069d6:	0032      	movs	r2, r6
 80069d8:	002b      	movs	r3, r5
 80069da:	0030      	movs	r0, r6
 80069dc:	0029      	movs	r1, r5
 80069de:	f7fb fa39 	bl	8001e54 <__aeabi_dcmpun>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d004      	beq.n	80069f0 <_printf_float+0xdc>
 80069e6:	4d8f      	ldr	r5, [pc, #572]	; (8006c24 <_printf_float+0x310>)
 80069e8:	2f47      	cmp	r7, #71	; 0x47
 80069ea:	d8dc      	bhi.n	80069a6 <_printf_float+0x92>
 80069ec:	4d8e      	ldr	r5, [pc, #568]	; (8006c28 <_printf_float+0x314>)
 80069ee:	e7da      	b.n	80069a6 <_printf_float+0x92>
 80069f0:	2380      	movs	r3, #128	; 0x80
 80069f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069f4:	6862      	ldr	r2, [r4, #4]
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	430b      	orrs	r3, r1
 80069fa:	1c51      	adds	r1, r2, #1
 80069fc:	d143      	bne.n	8006a86 <_printf_float+0x172>
 80069fe:	3207      	adds	r2, #7
 8006a00:	6062      	str	r2, [r4, #4]
 8006a02:	aa12      	add	r2, sp, #72	; 0x48
 8006a04:	2100      	movs	r1, #0
 8006a06:	9205      	str	r2, [sp, #20]
 8006a08:	aa11      	add	r2, sp, #68	; 0x44
 8006a0a:	9203      	str	r2, [sp, #12]
 8006a0c:	2223      	movs	r2, #35	; 0x23
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	9106      	str	r1, [sp, #24]
 8006a12:	9301      	str	r3, [sp, #4]
 8006a14:	a908      	add	r1, sp, #32
 8006a16:	6863      	ldr	r3, [r4, #4]
 8006a18:	1852      	adds	r2, r2, r1
 8006a1a:	9202      	str	r2, [sp, #8]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	0032      	movs	r2, r6
 8006a20:	002b      	movs	r3, r5
 8006a22:	9704      	str	r7, [sp, #16]
 8006a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a26:	f7ff fed9 	bl	80067dc <__cvt>
 8006a2a:	2320      	movs	r3, #32
 8006a2c:	003a      	movs	r2, r7
 8006a2e:	0005      	movs	r5, r0
 8006a30:	439a      	bics	r2, r3
 8006a32:	2a47      	cmp	r2, #71	; 0x47
 8006a34:	d107      	bne.n	8006a46 <_printf_float+0x132>
 8006a36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a38:	1cda      	adds	r2, r3, #3
 8006a3a:	db02      	blt.n	8006a42 <_printf_float+0x12e>
 8006a3c:	6862      	ldr	r2, [r4, #4]
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	dd45      	ble.n	8006ace <_printf_float+0x1ba>
 8006a42:	3f02      	subs	r7, #2
 8006a44:	b2ff      	uxtb	r7, r7
 8006a46:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a48:	2f65      	cmp	r7, #101	; 0x65
 8006a4a:	d825      	bhi.n	8006a98 <_printf_float+0x184>
 8006a4c:	0020      	movs	r0, r4
 8006a4e:	3901      	subs	r1, #1
 8006a50:	003a      	movs	r2, r7
 8006a52:	3050      	adds	r0, #80	; 0x50
 8006a54:	9111      	str	r1, [sp, #68]	; 0x44
 8006a56:	f7ff ff25 	bl	80068a4 <__exponent>
 8006a5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a5c:	0006      	movs	r6, r0
 8006a5e:	1813      	adds	r3, r2, r0
 8006a60:	6123      	str	r3, [r4, #16]
 8006a62:	2a01      	cmp	r2, #1
 8006a64:	dc02      	bgt.n	8006a6c <_printf_float+0x158>
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	07d2      	lsls	r2, r2, #31
 8006a6a:	d501      	bpl.n	8006a70 <_printf_float+0x15c>
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	6123      	str	r3, [r4, #16]
 8006a70:	2323      	movs	r3, #35	; 0x23
 8006a72:	aa08      	add	r2, sp, #32
 8006a74:	189b      	adds	r3, r3, r2
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d09b      	beq.n	80069b4 <_printf_float+0xa0>
 8006a7c:	0023      	movs	r3, r4
 8006a7e:	222d      	movs	r2, #45	; 0x2d
 8006a80:	3343      	adds	r3, #67	; 0x43
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	e796      	b.n	80069b4 <_printf_float+0xa0>
 8006a86:	2f67      	cmp	r7, #103	; 0x67
 8006a88:	d100      	bne.n	8006a8c <_printf_float+0x178>
 8006a8a:	e176      	b.n	8006d7a <_printf_float+0x466>
 8006a8c:	2f47      	cmp	r7, #71	; 0x47
 8006a8e:	d1b8      	bne.n	8006a02 <_printf_float+0xee>
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	d1b6      	bne.n	8006a02 <_printf_float+0xee>
 8006a94:	2201      	movs	r2, #1
 8006a96:	e7b3      	b.n	8006a00 <_printf_float+0xec>
 8006a98:	2f66      	cmp	r7, #102	; 0x66
 8006a9a:	d119      	bne.n	8006ad0 <_printf_float+0x1bc>
 8006a9c:	6863      	ldr	r3, [r4, #4]
 8006a9e:	2900      	cmp	r1, #0
 8006aa0:	dd0c      	ble.n	8006abc <_printf_float+0x1a8>
 8006aa2:	6121      	str	r1, [r4, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d102      	bne.n	8006aae <_printf_float+0x19a>
 8006aa8:	6822      	ldr	r2, [r4, #0]
 8006aaa:	07d2      	lsls	r2, r2, #31
 8006aac:	d502      	bpl.n	8006ab4 <_printf_float+0x1a0>
 8006aae:	3301      	adds	r3, #1
 8006ab0:	185b      	adds	r3, r3, r1
 8006ab2:	6123      	str	r3, [r4, #16]
 8006ab4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ab6:	2600      	movs	r6, #0
 8006ab8:	65a3      	str	r3, [r4, #88]	; 0x58
 8006aba:	e7d9      	b.n	8006a70 <_printf_float+0x15c>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d103      	bne.n	8006ac8 <_printf_float+0x1b4>
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	6821      	ldr	r1, [r4, #0]
 8006ac4:	4211      	tst	r1, r2
 8006ac6:	d000      	beq.n	8006aca <_printf_float+0x1b6>
 8006ac8:	1c9a      	adds	r2, r3, #2
 8006aca:	6122      	str	r2, [r4, #16]
 8006acc:	e7f2      	b.n	8006ab4 <_printf_float+0x1a0>
 8006ace:	2767      	movs	r7, #103	; 0x67
 8006ad0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ad2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	db05      	blt.n	8006ae4 <_printf_float+0x1d0>
 8006ad8:	6822      	ldr	r2, [r4, #0]
 8006ada:	6123      	str	r3, [r4, #16]
 8006adc:	07d2      	lsls	r2, r2, #31
 8006ade:	d5e9      	bpl.n	8006ab4 <_printf_float+0x1a0>
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	e7e6      	b.n	8006ab2 <_printf_float+0x19e>
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dc01      	bgt.n	8006aee <_printf_float+0x1da>
 8006aea:	1849      	adds	r1, r1, r1
 8006aec:	1ac9      	subs	r1, r1, r3
 8006aee:	1852      	adds	r2, r2, r1
 8006af0:	e7eb      	b.n	8006aca <_printf_float+0x1b6>
 8006af2:	6822      	ldr	r2, [r4, #0]
 8006af4:	0553      	lsls	r3, r2, #21
 8006af6:	d408      	bmi.n	8006b0a <_printf_float+0x1f6>
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	002a      	movs	r2, r5
 8006afc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006afe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006b02:	47a8      	blx	r5
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d129      	bne.n	8006b5c <_printf_float+0x248>
 8006b08:	e75f      	b.n	80069ca <_printf_float+0xb6>
 8006b0a:	2f65      	cmp	r7, #101	; 0x65
 8006b0c:	d800      	bhi.n	8006b10 <_printf_float+0x1fc>
 8006b0e:	e0e0      	b.n	8006cd2 <_printf_float+0x3be>
 8006b10:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006b12:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006b14:	2200      	movs	r2, #0
 8006b16:	2300      	movs	r3, #0
 8006b18:	f7f9 fc8e 	bl	8000438 <__aeabi_dcmpeq>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d034      	beq.n	8006b8a <_printf_float+0x276>
 8006b20:	2301      	movs	r3, #1
 8006b22:	4a42      	ldr	r2, [pc, #264]	; (8006c2c <_printf_float+0x318>)
 8006b24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006b2a:	47a8      	blx	r5
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d100      	bne.n	8006b32 <_printf_float+0x21e>
 8006b30:	e74b      	b.n	80069ca <_printf_float+0xb6>
 8006b32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b36:	4293      	cmp	r3, r2
 8006b38:	db02      	blt.n	8006b40 <_printf_float+0x22c>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	07db      	lsls	r3, r3, #31
 8006b3e:	d50d      	bpl.n	8006b5c <_printf_float+0x248>
 8006b40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b4a:	47a8      	blx	r5
 8006b4c:	2500      	movs	r5, #0
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	d100      	bne.n	8006b54 <_printf_float+0x240>
 8006b52:	e73a      	b.n	80069ca <_printf_float+0xb6>
 8006b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b56:	3b01      	subs	r3, #1
 8006b58:	42ab      	cmp	r3, r5
 8006b5a:	dc0a      	bgt.n	8006b72 <_printf_float+0x25e>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	079b      	lsls	r3, r3, #30
 8006b60:	d500      	bpl.n	8006b64 <_printf_float+0x250>
 8006b62:	e108      	b.n	8006d76 <_printf_float+0x462>
 8006b64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b66:	68e0      	ldr	r0, [r4, #12]
 8006b68:	4298      	cmp	r0, r3
 8006b6a:	db00      	blt.n	8006b6e <_printf_float+0x25a>
 8006b6c:	e72f      	b.n	80069ce <_printf_float+0xba>
 8006b6e:	0018      	movs	r0, r3
 8006b70:	e72d      	b.n	80069ce <_printf_float+0xba>
 8006b72:	0022      	movs	r2, r4
 8006b74:	2301      	movs	r3, #1
 8006b76:	321a      	adds	r2, #26
 8006b78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b7e:	47b0      	blx	r6
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	d100      	bne.n	8006b86 <_printf_float+0x272>
 8006b84:	e721      	b.n	80069ca <_printf_float+0xb6>
 8006b86:	3501      	adds	r5, #1
 8006b88:	e7e4      	b.n	8006b54 <_printf_float+0x240>
 8006b8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dc2d      	bgt.n	8006bec <_printf_float+0x2d8>
 8006b90:	2301      	movs	r3, #1
 8006b92:	4a26      	ldr	r2, [pc, #152]	; (8006c2c <_printf_float+0x318>)
 8006b94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b98:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b9a:	47b0      	blx	r6
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d100      	bne.n	8006ba2 <_printf_float+0x28e>
 8006ba0:	e713      	b.n	80069ca <_printf_float+0xb6>
 8006ba2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d105      	bne.n	8006bb4 <_printf_float+0x2a0>
 8006ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d102      	bne.n	8006bb4 <_printf_float+0x2a0>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	07db      	lsls	r3, r3, #31
 8006bb2:	d5d3      	bpl.n	8006b5c <_printf_float+0x248>
 8006bb4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bbe:	47b0      	blx	r6
 8006bc0:	2600      	movs	r6, #0
 8006bc2:	1c43      	adds	r3, r0, #1
 8006bc4:	d100      	bne.n	8006bc8 <_printf_float+0x2b4>
 8006bc6:	e700      	b.n	80069ca <_printf_float+0xb6>
 8006bc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bca:	425b      	negs	r3, r3
 8006bcc:	42b3      	cmp	r3, r6
 8006bce:	dc01      	bgt.n	8006bd4 <_printf_float+0x2c0>
 8006bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bd2:	e792      	b.n	8006afa <_printf_float+0x1e6>
 8006bd4:	0022      	movs	r2, r4
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	321a      	adds	r2, #26
 8006bda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bde:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006be0:	47b8      	blx	r7
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	d100      	bne.n	8006be8 <_printf_float+0x2d4>
 8006be6:	e6f0      	b.n	80069ca <_printf_float+0xb6>
 8006be8:	3601      	adds	r6, #1
 8006bea:	e7ed      	b.n	8006bc8 <_printf_float+0x2b4>
 8006bec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bee:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006bf0:	429f      	cmp	r7, r3
 8006bf2:	dd00      	ble.n	8006bf6 <_printf_float+0x2e2>
 8006bf4:	001f      	movs	r7, r3
 8006bf6:	2f00      	cmp	r7, #0
 8006bf8:	dd08      	ble.n	8006c0c <_printf_float+0x2f8>
 8006bfa:	003b      	movs	r3, r7
 8006bfc:	002a      	movs	r2, r5
 8006bfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c02:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c04:	47b0      	blx	r6
 8006c06:	1c43      	adds	r3, r0, #1
 8006c08:	d100      	bne.n	8006c0c <_printf_float+0x2f8>
 8006c0a:	e6de      	b.n	80069ca <_printf_float+0xb6>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8006c10:	43fb      	mvns	r3, r7
 8006c12:	17db      	asrs	r3, r3, #31
 8006c14:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c16:	e018      	b.n	8006c4a <_printf_float+0x336>
 8006c18:	7fefffff 	.word	0x7fefffff
 8006c1c:	080090d8 	.word	0x080090d8
 8006c20:	080090d4 	.word	0x080090d4
 8006c24:	080090e0 	.word	0x080090e0
 8006c28:	080090dc 	.word	0x080090dc
 8006c2c:	080090e4 	.word	0x080090e4
 8006c30:	0022      	movs	r2, r4
 8006c32:	2301      	movs	r3, #1
 8006c34:	321a      	adds	r2, #26
 8006c36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c3a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c3c:	47b0      	blx	r6
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d100      	bne.n	8006c44 <_printf_float+0x330>
 8006c42:	e6c2      	b.n	80069ca <_printf_float+0xb6>
 8006c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c46:	3301      	adds	r3, #1
 8006c48:	930d      	str	r3, [sp, #52]	; 0x34
 8006c4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c4c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8006c4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c50:	403b      	ands	r3, r7
 8006c52:	1af3      	subs	r3, r6, r3
 8006c54:	4293      	cmp	r3, r2
 8006c56:	dceb      	bgt.n	8006c30 <_printf_float+0x31c>
 8006c58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c5c:	19ad      	adds	r5, r5, r6
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	db10      	blt.n	8006c84 <_printf_float+0x370>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	07db      	lsls	r3, r3, #31
 8006c66:	d40d      	bmi.n	8006c84 <_printf_float+0x370>
 8006c68:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c6c:	1bbe      	subs	r6, r7, r6
 8006c6e:	1aff      	subs	r7, r7, r3
 8006c70:	42b7      	cmp	r7, r6
 8006c72:	dd00      	ble.n	8006c76 <_printf_float+0x362>
 8006c74:	0037      	movs	r7, r6
 8006c76:	2f00      	cmp	r7, #0
 8006c78:	dc0d      	bgt.n	8006c96 <_printf_float+0x382>
 8006c7a:	43fe      	mvns	r6, r7
 8006c7c:	17f3      	asrs	r3, r6, #31
 8006c7e:	2500      	movs	r5, #0
 8006c80:	930c      	str	r3, [sp, #48]	; 0x30
 8006c82:	e01c      	b.n	8006cbe <_printf_float+0x3aa>
 8006c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c8c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006c8e:	47b8      	blx	r7
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d1e9      	bne.n	8006c68 <_printf_float+0x354>
 8006c94:	e699      	b.n	80069ca <_printf_float+0xb6>
 8006c96:	003b      	movs	r3, r7
 8006c98:	002a      	movs	r2, r5
 8006c9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ca0:	47a8      	blx	r5
 8006ca2:	1c43      	adds	r3, r0, #1
 8006ca4:	d1e9      	bne.n	8006c7a <_printf_float+0x366>
 8006ca6:	e690      	b.n	80069ca <_printf_float+0xb6>
 8006ca8:	0022      	movs	r2, r4
 8006caa:	2301      	movs	r3, #1
 8006cac:	321a      	adds	r2, #26
 8006cae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cb2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006cb4:	47b0      	blx	r6
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	d100      	bne.n	8006cbc <_printf_float+0x3a8>
 8006cba:	e686      	b.n	80069ca <_printf_float+0xb6>
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006cc4:	1a9b      	subs	r3, r3, r2
 8006cc6:	003a      	movs	r2, r7
 8006cc8:	400a      	ands	r2, r1
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	42ab      	cmp	r3, r5
 8006cce:	dceb      	bgt.n	8006ca8 <_printf_float+0x394>
 8006cd0:	e744      	b.n	8006b5c <_printf_float+0x248>
 8006cd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	dc02      	bgt.n	8006cde <_printf_float+0x3ca>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	421a      	tst	r2, r3
 8006cdc:	d032      	beq.n	8006d44 <_printf_float+0x430>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	002a      	movs	r2, r5
 8006ce2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ce6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006ce8:	47b8      	blx	r7
 8006cea:	1c43      	adds	r3, r0, #1
 8006cec:	d100      	bne.n	8006cf0 <_printf_float+0x3dc>
 8006cee:	e66c      	b.n	80069ca <_printf_float+0xb6>
 8006cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cf8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006cfa:	3501      	adds	r5, #1
 8006cfc:	47b8      	blx	r7
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	d100      	bne.n	8006d04 <_printf_float+0x3f0>
 8006d02:	e662      	b.n	80069ca <_printf_float+0xb6>
 8006d04:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006d06:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006d08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	1e5f      	subs	r7, r3, #1
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f7f9 fb92 	bl	8000438 <__aeabi_dcmpeq>
 8006d14:	003b      	movs	r3, r7
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d014      	beq.n	8006d44 <_printf_float+0x430>
 8006d1a:	2500      	movs	r5, #0
 8006d1c:	e00a      	b.n	8006d34 <_printf_float+0x420>
 8006d1e:	0022      	movs	r2, r4
 8006d20:	2301      	movs	r3, #1
 8006d22:	321a      	adds	r2, #26
 8006d24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d28:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006d2a:	47b8      	blx	r7
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d100      	bne.n	8006d32 <_printf_float+0x41e>
 8006d30:	e64b      	b.n	80069ca <_printf_float+0xb6>
 8006d32:	3501      	adds	r5, #1
 8006d34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d36:	3b01      	subs	r3, #1
 8006d38:	42ab      	cmp	r3, r5
 8006d3a:	dcf0      	bgt.n	8006d1e <_printf_float+0x40a>
 8006d3c:	0022      	movs	r2, r4
 8006d3e:	0033      	movs	r3, r6
 8006d40:	3250      	adds	r2, #80	; 0x50
 8006d42:	e6db      	b.n	8006afc <_printf_float+0x1e8>
 8006d44:	002a      	movs	r2, r5
 8006d46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006d4c:	47a8      	blx	r5
 8006d4e:	1c43      	adds	r3, r0, #1
 8006d50:	d1f4      	bne.n	8006d3c <_printf_float+0x428>
 8006d52:	e63a      	b.n	80069ca <_printf_float+0xb6>
 8006d54:	0022      	movs	r2, r4
 8006d56:	2301      	movs	r3, #1
 8006d58:	3219      	adds	r2, #25
 8006d5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d5e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d60:	47b0      	blx	r6
 8006d62:	1c43      	adds	r3, r0, #1
 8006d64:	d100      	bne.n	8006d68 <_printf_float+0x454>
 8006d66:	e630      	b.n	80069ca <_printf_float+0xb6>
 8006d68:	3501      	adds	r5, #1
 8006d6a:	68e3      	ldr	r3, [r4, #12]
 8006d6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d6e:	1a9b      	subs	r3, r3, r2
 8006d70:	42ab      	cmp	r3, r5
 8006d72:	dcef      	bgt.n	8006d54 <_printf_float+0x440>
 8006d74:	e6f6      	b.n	8006b64 <_printf_float+0x250>
 8006d76:	2500      	movs	r5, #0
 8006d78:	e7f7      	b.n	8006d6a <_printf_float+0x456>
 8006d7a:	2a00      	cmp	r2, #0
 8006d7c:	d100      	bne.n	8006d80 <_printf_float+0x46c>
 8006d7e:	e689      	b.n	8006a94 <_printf_float+0x180>
 8006d80:	2100      	movs	r1, #0
 8006d82:	9106      	str	r1, [sp, #24]
 8006d84:	a912      	add	r1, sp, #72	; 0x48
 8006d86:	9105      	str	r1, [sp, #20]
 8006d88:	a911      	add	r1, sp, #68	; 0x44
 8006d8a:	9103      	str	r1, [sp, #12]
 8006d8c:	2123      	movs	r1, #35	; 0x23
 8006d8e:	a808      	add	r0, sp, #32
 8006d90:	1809      	adds	r1, r1, r0
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	9200      	str	r2, [sp, #0]
 8006d98:	002b      	movs	r3, r5
 8006d9a:	9704      	str	r7, [sp, #16]
 8006d9c:	9102      	str	r1, [sp, #8]
 8006d9e:	0032      	movs	r2, r6
 8006da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006da2:	f7ff fd1b 	bl	80067dc <__cvt>
 8006da6:	0005      	movs	r5, r0
 8006da8:	e645      	b.n	8006a36 <_printf_float+0x122>
 8006daa:	46c0      	nop			; (mov r8, r8)

08006dac <_printf_common>:
 8006dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dae:	0015      	movs	r5, r2
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	688a      	ldr	r2, [r1, #8]
 8006db4:	690b      	ldr	r3, [r1, #16]
 8006db6:	9000      	str	r0, [sp, #0]
 8006db8:	000c      	movs	r4, r1
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	da00      	bge.n	8006dc0 <_printf_common+0x14>
 8006dbe:	0013      	movs	r3, r2
 8006dc0:	0022      	movs	r2, r4
 8006dc2:	602b      	str	r3, [r5, #0]
 8006dc4:	3243      	adds	r2, #67	; 0x43
 8006dc6:	7812      	ldrb	r2, [r2, #0]
 8006dc8:	2a00      	cmp	r2, #0
 8006dca:	d001      	beq.n	8006dd0 <_printf_common+0x24>
 8006dcc:	3301      	adds	r3, #1
 8006dce:	602b      	str	r3, [r5, #0]
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	069b      	lsls	r3, r3, #26
 8006dd4:	d502      	bpl.n	8006ddc <_printf_common+0x30>
 8006dd6:	682b      	ldr	r3, [r5, #0]
 8006dd8:	3302      	adds	r3, #2
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	2706      	movs	r7, #6
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	401f      	ands	r7, r3
 8006de2:	d027      	beq.n	8006e34 <_printf_common+0x88>
 8006de4:	0023      	movs	r3, r4
 8006de6:	3343      	adds	r3, #67	; 0x43
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	1e5a      	subs	r2, r3, #1
 8006dec:	4193      	sbcs	r3, r2
 8006dee:	6822      	ldr	r2, [r4, #0]
 8006df0:	0692      	lsls	r2, r2, #26
 8006df2:	d430      	bmi.n	8006e56 <_printf_common+0xaa>
 8006df4:	0022      	movs	r2, r4
 8006df6:	9901      	ldr	r1, [sp, #4]
 8006df8:	3243      	adds	r2, #67	; 0x43
 8006dfa:	9800      	ldr	r0, [sp, #0]
 8006dfc:	9e08      	ldr	r6, [sp, #32]
 8006dfe:	47b0      	blx	r6
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d025      	beq.n	8006e50 <_printf_common+0xa4>
 8006e04:	2306      	movs	r3, #6
 8006e06:	6820      	ldr	r0, [r4, #0]
 8006e08:	682a      	ldr	r2, [r5, #0]
 8006e0a:	68e1      	ldr	r1, [r4, #12]
 8006e0c:	4003      	ands	r3, r0
 8006e0e:	2500      	movs	r5, #0
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d103      	bne.n	8006e1c <_printf_common+0x70>
 8006e14:	1a8d      	subs	r5, r1, r2
 8006e16:	43eb      	mvns	r3, r5
 8006e18:	17db      	asrs	r3, r3, #31
 8006e1a:	401d      	ands	r5, r3
 8006e1c:	68a3      	ldr	r3, [r4, #8]
 8006e1e:	6922      	ldr	r2, [r4, #16]
 8006e20:	4293      	cmp	r3, r2
 8006e22:	dd01      	ble.n	8006e28 <_printf_common+0x7c>
 8006e24:	1a9b      	subs	r3, r3, r2
 8006e26:	18ed      	adds	r5, r5, r3
 8006e28:	2700      	movs	r7, #0
 8006e2a:	42bd      	cmp	r5, r7
 8006e2c:	d120      	bne.n	8006e70 <_printf_common+0xc4>
 8006e2e:	2000      	movs	r0, #0
 8006e30:	e010      	b.n	8006e54 <_printf_common+0xa8>
 8006e32:	3701      	adds	r7, #1
 8006e34:	68e3      	ldr	r3, [r4, #12]
 8006e36:	682a      	ldr	r2, [r5, #0]
 8006e38:	1a9b      	subs	r3, r3, r2
 8006e3a:	42bb      	cmp	r3, r7
 8006e3c:	ddd2      	ble.n	8006de4 <_printf_common+0x38>
 8006e3e:	0022      	movs	r2, r4
 8006e40:	2301      	movs	r3, #1
 8006e42:	3219      	adds	r2, #25
 8006e44:	9901      	ldr	r1, [sp, #4]
 8006e46:	9800      	ldr	r0, [sp, #0]
 8006e48:	9e08      	ldr	r6, [sp, #32]
 8006e4a:	47b0      	blx	r6
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d1f0      	bne.n	8006e32 <_printf_common+0x86>
 8006e50:	2001      	movs	r0, #1
 8006e52:	4240      	negs	r0, r0
 8006e54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e56:	2030      	movs	r0, #48	; 0x30
 8006e58:	18e1      	adds	r1, r4, r3
 8006e5a:	3143      	adds	r1, #67	; 0x43
 8006e5c:	7008      	strb	r0, [r1, #0]
 8006e5e:	0021      	movs	r1, r4
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	3145      	adds	r1, #69	; 0x45
 8006e64:	7809      	ldrb	r1, [r1, #0]
 8006e66:	18a2      	adds	r2, r4, r2
 8006e68:	3243      	adds	r2, #67	; 0x43
 8006e6a:	3302      	adds	r3, #2
 8006e6c:	7011      	strb	r1, [r2, #0]
 8006e6e:	e7c1      	b.n	8006df4 <_printf_common+0x48>
 8006e70:	0022      	movs	r2, r4
 8006e72:	2301      	movs	r3, #1
 8006e74:	321a      	adds	r2, #26
 8006e76:	9901      	ldr	r1, [sp, #4]
 8006e78:	9800      	ldr	r0, [sp, #0]
 8006e7a:	9e08      	ldr	r6, [sp, #32]
 8006e7c:	47b0      	blx	r6
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	d0e6      	beq.n	8006e50 <_printf_common+0xa4>
 8006e82:	3701      	adds	r7, #1
 8006e84:	e7d1      	b.n	8006e2a <_printf_common+0x7e>

08006e86 <quorem>:
 8006e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e88:	6903      	ldr	r3, [r0, #16]
 8006e8a:	690c      	ldr	r4, [r1, #16]
 8006e8c:	b089      	sub	sp, #36	; 0x24
 8006e8e:	0007      	movs	r7, r0
 8006e90:	9105      	str	r1, [sp, #20]
 8006e92:	2600      	movs	r6, #0
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	db65      	blt.n	8006f64 <quorem+0xde>
 8006e98:	000b      	movs	r3, r1
 8006e9a:	3c01      	subs	r4, #1
 8006e9c:	3314      	adds	r3, #20
 8006e9e:	00a5      	lsls	r5, r4, #2
 8006ea0:	9303      	str	r3, [sp, #12]
 8006ea2:	195b      	adds	r3, r3, r5
 8006ea4:	9304      	str	r3, [sp, #16]
 8006ea6:	0003      	movs	r3, r0
 8006ea8:	3314      	adds	r3, #20
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	195d      	adds	r5, r3, r5
 8006eae:	9b04      	ldr	r3, [sp, #16]
 8006eb0:	6828      	ldr	r0, [r5, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	1c59      	adds	r1, r3, #1
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	f7f9 f938 	bl	800012c <__udivsi3>
 8006ebc:	9001      	str	r0, [sp, #4]
 8006ebe:	42b0      	cmp	r0, r6
 8006ec0:	d029      	beq.n	8006f16 <quorem+0x90>
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	9802      	ldr	r0, [sp, #8]
 8006ec6:	469c      	mov	ip, r3
 8006ec8:	9606      	str	r6, [sp, #24]
 8006eca:	4662      	mov	r2, ip
 8006ecc:	ca08      	ldmia	r2!, {r3}
 8006ece:	4694      	mov	ip, r2
 8006ed0:	9a01      	ldr	r2, [sp, #4]
 8006ed2:	b299      	uxth	r1, r3
 8006ed4:	4351      	muls	r1, r2
 8006ed6:	0c1b      	lsrs	r3, r3, #16
 8006ed8:	4353      	muls	r3, r2
 8006eda:	1989      	adds	r1, r1, r6
 8006edc:	0c0a      	lsrs	r2, r1, #16
 8006ede:	189b      	adds	r3, r3, r2
 8006ee0:	9307      	str	r3, [sp, #28]
 8006ee2:	0c1e      	lsrs	r6, r3, #16
 8006ee4:	6803      	ldr	r3, [r0, #0]
 8006ee6:	b289      	uxth	r1, r1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	9b06      	ldr	r3, [sp, #24]
 8006eec:	18d2      	adds	r2, r2, r3
 8006eee:	6803      	ldr	r3, [r0, #0]
 8006ef0:	1a52      	subs	r2, r2, r1
 8006ef2:	0c19      	lsrs	r1, r3, #16
 8006ef4:	466b      	mov	r3, sp
 8006ef6:	8b9b      	ldrh	r3, [r3, #28]
 8006ef8:	1acb      	subs	r3, r1, r3
 8006efa:	1411      	asrs	r1, r2, #16
 8006efc:	185b      	adds	r3, r3, r1
 8006efe:	1419      	asrs	r1, r3, #16
 8006f00:	b292      	uxth	r2, r2
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	431a      	orrs	r2, r3
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	9106      	str	r1, [sp, #24]
 8006f0a:	c004      	stmia	r0!, {r2}
 8006f0c:	4563      	cmp	r3, ip
 8006f0e:	d2dc      	bcs.n	8006eca <quorem+0x44>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d02d      	beq.n	8006f72 <quorem+0xec>
 8006f16:	9905      	ldr	r1, [sp, #20]
 8006f18:	0038      	movs	r0, r7
 8006f1a:	f001 f84f 	bl	8007fbc <__mcmp>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	db1f      	blt.n	8006f62 <quorem+0xdc>
 8006f22:	2500      	movs	r5, #0
 8006f24:	9b01      	ldr	r3, [sp, #4]
 8006f26:	9802      	ldr	r0, [sp, #8]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	9903      	ldr	r1, [sp, #12]
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	6802      	ldr	r2, [r0, #0]
 8006f30:	c908      	ldmia	r1!, {r3}
 8006f32:	b292      	uxth	r2, r2
 8006f34:	1955      	adds	r5, r2, r5
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	1aaa      	subs	r2, r5, r2
 8006f3a:	6805      	ldr	r5, [r0, #0]
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	0c2d      	lsrs	r5, r5, #16
 8006f40:	1aeb      	subs	r3, r5, r3
 8006f42:	1415      	asrs	r5, r2, #16
 8006f44:	195b      	adds	r3, r3, r5
 8006f46:	141d      	asrs	r5, r3, #16
 8006f48:	b292      	uxth	r2, r2
 8006f4a:	041b      	lsls	r3, r3, #16
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	c008      	stmia	r0!, {r3}
 8006f50:	9b04      	ldr	r3, [sp, #16]
 8006f52:	428b      	cmp	r3, r1
 8006f54:	d2eb      	bcs.n	8006f2e <quorem+0xa8>
 8006f56:	9a02      	ldr	r2, [sp, #8]
 8006f58:	00a3      	lsls	r3, r4, #2
 8006f5a:	18d3      	adds	r3, r2, r3
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	2a00      	cmp	r2, #0
 8006f60:	d011      	beq.n	8006f86 <quorem+0x100>
 8006f62:	9e01      	ldr	r6, [sp, #4]
 8006f64:	0030      	movs	r0, r6
 8006f66:	b009      	add	sp, #36	; 0x24
 8006f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f6a:	682b      	ldr	r3, [r5, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <quorem+0xf4>
 8006f70:	3c01      	subs	r4, #1
 8006f72:	9b02      	ldr	r3, [sp, #8]
 8006f74:	3d04      	subs	r5, #4
 8006f76:	42ab      	cmp	r3, r5
 8006f78:	d3f7      	bcc.n	8006f6a <quorem+0xe4>
 8006f7a:	613c      	str	r4, [r7, #16]
 8006f7c:	e7cb      	b.n	8006f16 <quorem+0x90>
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	d104      	bne.n	8006f8e <quorem+0x108>
 8006f84:	3c01      	subs	r4, #1
 8006f86:	9a02      	ldr	r2, [sp, #8]
 8006f88:	3b04      	subs	r3, #4
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d3f7      	bcc.n	8006f7e <quorem+0xf8>
 8006f8e:	613c      	str	r4, [r7, #16]
 8006f90:	e7e7      	b.n	8006f62 <quorem+0xdc>
	...

08006f94 <_dtoa_r>:
 8006f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f96:	0016      	movs	r6, r2
 8006f98:	001f      	movs	r7, r3
 8006f9a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006f9c:	b09b      	sub	sp, #108	; 0x6c
 8006f9e:	9002      	str	r0, [sp, #8]
 8006fa0:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8006fa2:	9606      	str	r6, [sp, #24]
 8006fa4:	9707      	str	r7, [sp, #28]
 8006fa6:	2c00      	cmp	r4, #0
 8006fa8:	d108      	bne.n	8006fbc <_dtoa_r+0x28>
 8006faa:	2010      	movs	r0, #16
 8006fac:	f000 fdde 	bl	8007b6c <malloc>
 8006fb0:	9b02      	ldr	r3, [sp, #8]
 8006fb2:	6258      	str	r0, [r3, #36]	; 0x24
 8006fb4:	6044      	str	r4, [r0, #4]
 8006fb6:	6084      	str	r4, [r0, #8]
 8006fb8:	6004      	str	r4, [r0, #0]
 8006fba:	60c4      	str	r4, [r0, #12]
 8006fbc:	9b02      	ldr	r3, [sp, #8]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	6819      	ldr	r1, [r3, #0]
 8006fc2:	2900      	cmp	r1, #0
 8006fc4:	d00b      	beq.n	8006fde <_dtoa_r+0x4a>
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	2301      	movs	r3, #1
 8006fca:	4093      	lsls	r3, r2
 8006fcc:	604a      	str	r2, [r1, #4]
 8006fce:	608b      	str	r3, [r1, #8]
 8006fd0:	9802      	ldr	r0, [sp, #8]
 8006fd2:	f000 fe16 	bl	8007c02 <_Bfree>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	9b02      	ldr	r3, [sp, #8]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	2f00      	cmp	r7, #0
 8006fe0:	da20      	bge.n	8007024 <_dtoa_r+0x90>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	007b      	lsls	r3, r7, #1
 8006fe8:	085b      	lsrs	r3, r3, #1
 8006fea:	9307      	str	r3, [sp, #28]
 8006fec:	9c07      	ldr	r4, [sp, #28]
 8006fee:	4bb2      	ldr	r3, [pc, #712]	; (80072b8 <_dtoa_r+0x324>)
 8006ff0:	0022      	movs	r2, r4
 8006ff2:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ff4:	401a      	ands	r2, r3
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d117      	bne.n	800702a <_dtoa_r+0x96>
 8006ffa:	4bb0      	ldr	r3, [pc, #704]	; (80072bc <_dtoa_r+0x328>)
 8006ffc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	9b06      	ldr	r3, [sp, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d103      	bne.n	800700e <_dtoa_r+0x7a>
 8007006:	0324      	lsls	r4, r4, #12
 8007008:	d101      	bne.n	800700e <_dtoa_r+0x7a>
 800700a:	f000 fd87 	bl	8007b1c <_dtoa_r+0xb88>
 800700e:	4bac      	ldr	r3, [pc, #688]	; (80072c0 <_dtoa_r+0x32c>)
 8007010:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007012:	9308      	str	r3, [sp, #32]
 8007014:	2a00      	cmp	r2, #0
 8007016:	d002      	beq.n	800701e <_dtoa_r+0x8a>
 8007018:	4baa      	ldr	r3, [pc, #680]	; (80072c4 <_dtoa_r+0x330>)
 800701a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	9808      	ldr	r0, [sp, #32]
 8007020:	b01b      	add	sp, #108	; 0x6c
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007024:	2300      	movs	r3, #0
 8007026:	602b      	str	r3, [r5, #0]
 8007028:	e7e0      	b.n	8006fec <_dtoa_r+0x58>
 800702a:	9e06      	ldr	r6, [sp, #24]
 800702c:	9f07      	ldr	r7, [sp, #28]
 800702e:	2200      	movs	r2, #0
 8007030:	2300      	movs	r3, #0
 8007032:	0030      	movs	r0, r6
 8007034:	0039      	movs	r1, r7
 8007036:	f7f9 f9ff 	bl	8000438 <__aeabi_dcmpeq>
 800703a:	1e05      	subs	r5, r0, #0
 800703c:	d00b      	beq.n	8007056 <_dtoa_r+0xc2>
 800703e:	2301      	movs	r3, #1
 8007040:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	4ba0      	ldr	r3, [pc, #640]	; (80072c8 <_dtoa_r+0x334>)
 8007046:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007048:	9308      	str	r3, [sp, #32]
 800704a:	2a00      	cmp	r2, #0
 800704c:	d0e7      	beq.n	800701e <_dtoa_r+0x8a>
 800704e:	4a9f      	ldr	r2, [pc, #636]	; (80072cc <_dtoa_r+0x338>)
 8007050:	9924      	ldr	r1, [sp, #144]	; 0x90
 8007052:	600a      	str	r2, [r1, #0]
 8007054:	e7e3      	b.n	800701e <_dtoa_r+0x8a>
 8007056:	ab18      	add	r3, sp, #96	; 0x60
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	ab19      	add	r3, sp, #100	; 0x64
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	0032      	movs	r2, r6
 8007060:	003b      	movs	r3, r7
 8007062:	9802      	ldr	r0, [sp, #8]
 8007064:	f001 f828 	bl	80080b8 <__d2b>
 8007068:	0063      	lsls	r3, r4, #1
 800706a:	9003      	str	r0, [sp, #12]
 800706c:	0d5b      	lsrs	r3, r3, #21
 800706e:	d074      	beq.n	800715a <_dtoa_r+0x1c6>
 8007070:	033a      	lsls	r2, r7, #12
 8007072:	4c97      	ldr	r4, [pc, #604]	; (80072d0 <_dtoa_r+0x33c>)
 8007074:	0b12      	lsrs	r2, r2, #12
 8007076:	4314      	orrs	r4, r2
 8007078:	0021      	movs	r1, r4
 800707a:	4a96      	ldr	r2, [pc, #600]	; (80072d4 <_dtoa_r+0x340>)
 800707c:	0030      	movs	r0, r6
 800707e:	9516      	str	r5, [sp, #88]	; 0x58
 8007080:	189e      	adds	r6, r3, r2
 8007082:	2200      	movs	r2, #0
 8007084:	4b94      	ldr	r3, [pc, #592]	; (80072d8 <_dtoa_r+0x344>)
 8007086:	f7fa fb9d 	bl	80017c4 <__aeabi_dsub>
 800708a:	4a94      	ldr	r2, [pc, #592]	; (80072dc <_dtoa_r+0x348>)
 800708c:	4b94      	ldr	r3, [pc, #592]	; (80072e0 <_dtoa_r+0x34c>)
 800708e:	f7fa f927 	bl	80012e0 <__aeabi_dmul>
 8007092:	4a94      	ldr	r2, [pc, #592]	; (80072e4 <_dtoa_r+0x350>)
 8007094:	4b94      	ldr	r3, [pc, #592]	; (80072e8 <_dtoa_r+0x354>)
 8007096:	f7f9 f9fd 	bl	8000494 <__aeabi_dadd>
 800709a:	0004      	movs	r4, r0
 800709c:	0030      	movs	r0, r6
 800709e:	000d      	movs	r5, r1
 80070a0:	f7fa ff2a 	bl	8001ef8 <__aeabi_i2d>
 80070a4:	4a91      	ldr	r2, [pc, #580]	; (80072ec <_dtoa_r+0x358>)
 80070a6:	4b92      	ldr	r3, [pc, #584]	; (80072f0 <_dtoa_r+0x35c>)
 80070a8:	f7fa f91a 	bl	80012e0 <__aeabi_dmul>
 80070ac:	0002      	movs	r2, r0
 80070ae:	000b      	movs	r3, r1
 80070b0:	0020      	movs	r0, r4
 80070b2:	0029      	movs	r1, r5
 80070b4:	f7f9 f9ee 	bl	8000494 <__aeabi_dadd>
 80070b8:	0004      	movs	r4, r0
 80070ba:	000d      	movs	r5, r1
 80070bc:	f7fa fee6 	bl	8001e8c <__aeabi_d2iz>
 80070c0:	2200      	movs	r2, #0
 80070c2:	0007      	movs	r7, r0
 80070c4:	2300      	movs	r3, #0
 80070c6:	0020      	movs	r0, r4
 80070c8:	0029      	movs	r1, r5
 80070ca:	f7f9 f9bb 	bl	8000444 <__aeabi_dcmplt>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d009      	beq.n	80070e6 <_dtoa_r+0x152>
 80070d2:	0038      	movs	r0, r7
 80070d4:	f7fa ff10 	bl	8001ef8 <__aeabi_i2d>
 80070d8:	002b      	movs	r3, r5
 80070da:	0022      	movs	r2, r4
 80070dc:	f7f9 f9ac 	bl	8000438 <__aeabi_dcmpeq>
 80070e0:	4243      	negs	r3, r0
 80070e2:	4158      	adcs	r0, r3
 80070e4:	1a3f      	subs	r7, r7, r0
 80070e6:	2301      	movs	r3, #1
 80070e8:	9314      	str	r3, [sp, #80]	; 0x50
 80070ea:	2f16      	cmp	r7, #22
 80070ec:	d80d      	bhi.n	800710a <_dtoa_r+0x176>
 80070ee:	4981      	ldr	r1, [pc, #516]	; (80072f4 <_dtoa_r+0x360>)
 80070f0:	00fb      	lsls	r3, r7, #3
 80070f2:	18c9      	adds	r1, r1, r3
 80070f4:	6808      	ldr	r0, [r1, #0]
 80070f6:	6849      	ldr	r1, [r1, #4]
 80070f8:	9a06      	ldr	r2, [sp, #24]
 80070fa:	9b07      	ldr	r3, [sp, #28]
 80070fc:	f7f9 f9b6 	bl	800046c <__aeabi_dcmpgt>
 8007100:	2800      	cmp	r0, #0
 8007102:	d046      	beq.n	8007192 <_dtoa_r+0x1fe>
 8007104:	2300      	movs	r3, #0
 8007106:	3f01      	subs	r7, #1
 8007108:	9314      	str	r3, [sp, #80]	; 0x50
 800710a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800710c:	1b9e      	subs	r6, r3, r6
 800710e:	2300      	movs	r3, #0
 8007110:	930a      	str	r3, [sp, #40]	; 0x28
 8007112:	0033      	movs	r3, r6
 8007114:	3b01      	subs	r3, #1
 8007116:	930b      	str	r3, [sp, #44]	; 0x2c
 8007118:	d504      	bpl.n	8007124 <_dtoa_r+0x190>
 800711a:	2301      	movs	r3, #1
 800711c:	1b9b      	subs	r3, r3, r6
 800711e:	930a      	str	r3, [sp, #40]	; 0x28
 8007120:	2300      	movs	r3, #0
 8007122:	930b      	str	r3, [sp, #44]	; 0x2c
 8007124:	2f00      	cmp	r7, #0
 8007126:	db36      	blt.n	8007196 <_dtoa_r+0x202>
 8007128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800712a:	9711      	str	r7, [sp, #68]	; 0x44
 800712c:	19db      	adds	r3, r3, r7
 800712e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007130:	2300      	movs	r3, #0
 8007132:	9304      	str	r3, [sp, #16]
 8007134:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007136:	2401      	movs	r4, #1
 8007138:	2b09      	cmp	r3, #9
 800713a:	d900      	bls.n	800713e <_dtoa_r+0x1aa>
 800713c:	e084      	b.n	8007248 <_dtoa_r+0x2b4>
 800713e:	2b05      	cmp	r3, #5
 8007140:	dd02      	ble.n	8007148 <_dtoa_r+0x1b4>
 8007142:	2400      	movs	r4, #0
 8007144:	3b04      	subs	r3, #4
 8007146:	9320      	str	r3, [sp, #128]	; 0x80
 8007148:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800714a:	1e98      	subs	r0, r3, #2
 800714c:	2803      	cmp	r0, #3
 800714e:	d900      	bls.n	8007152 <_dtoa_r+0x1be>
 8007150:	e084      	b.n	800725c <_dtoa_r+0x2c8>
 8007152:	f7f8 ffe1 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007156:	7775      	.short	0x7775
 8007158:	6a28      	.short	0x6a28
 800715a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800715c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800715e:	189e      	adds	r6, r3, r2
 8007160:	4b65      	ldr	r3, [pc, #404]	; (80072f8 <_dtoa_r+0x364>)
 8007162:	18f2      	adds	r2, r6, r3
 8007164:	2a20      	cmp	r2, #32
 8007166:	dd0f      	ble.n	8007188 <_dtoa_r+0x1f4>
 8007168:	2340      	movs	r3, #64	; 0x40
 800716a:	1a9b      	subs	r3, r3, r2
 800716c:	409c      	lsls	r4, r3
 800716e:	4b63      	ldr	r3, [pc, #396]	; (80072fc <_dtoa_r+0x368>)
 8007170:	9806      	ldr	r0, [sp, #24]
 8007172:	18f3      	adds	r3, r6, r3
 8007174:	40d8      	lsrs	r0, r3
 8007176:	4320      	orrs	r0, r4
 8007178:	f7fa fef8 	bl	8001f6c <__aeabi_ui2d>
 800717c:	2301      	movs	r3, #1
 800717e:	4c60      	ldr	r4, [pc, #384]	; (8007300 <_dtoa_r+0x36c>)
 8007180:	3e01      	subs	r6, #1
 8007182:	1909      	adds	r1, r1, r4
 8007184:	9316      	str	r3, [sp, #88]	; 0x58
 8007186:	e77c      	b.n	8007082 <_dtoa_r+0xee>
 8007188:	2320      	movs	r3, #32
 800718a:	9806      	ldr	r0, [sp, #24]
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	4098      	lsls	r0, r3
 8007190:	e7f2      	b.n	8007178 <_dtoa_r+0x1e4>
 8007192:	9014      	str	r0, [sp, #80]	; 0x50
 8007194:	e7b9      	b.n	800710a <_dtoa_r+0x176>
 8007196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007198:	1bdb      	subs	r3, r3, r7
 800719a:	930a      	str	r3, [sp, #40]	; 0x28
 800719c:	427b      	negs	r3, r7
 800719e:	9304      	str	r3, [sp, #16]
 80071a0:	2300      	movs	r3, #0
 80071a2:	9311      	str	r3, [sp, #68]	; 0x44
 80071a4:	e7c6      	b.n	8007134 <_dtoa_r+0x1a0>
 80071a6:	2301      	movs	r3, #1
 80071a8:	930d      	str	r3, [sp, #52]	; 0x34
 80071aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	dd59      	ble.n	8007264 <_dtoa_r+0x2d0>
 80071b0:	930c      	str	r3, [sp, #48]	; 0x30
 80071b2:	9309      	str	r3, [sp, #36]	; 0x24
 80071b4:	9a02      	ldr	r2, [sp, #8]
 80071b6:	6a55      	ldr	r5, [r2, #36]	; 0x24
 80071b8:	2200      	movs	r2, #0
 80071ba:	606a      	str	r2, [r5, #4]
 80071bc:	3204      	adds	r2, #4
 80071be:	0010      	movs	r0, r2
 80071c0:	3014      	adds	r0, #20
 80071c2:	6869      	ldr	r1, [r5, #4]
 80071c4:	4298      	cmp	r0, r3
 80071c6:	d952      	bls.n	800726e <_dtoa_r+0x2da>
 80071c8:	9802      	ldr	r0, [sp, #8]
 80071ca:	f000 fce2 	bl	8007b92 <_Balloc>
 80071ce:	9b02      	ldr	r3, [sp, #8]
 80071d0:	6028      	str	r0, [r5, #0]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	9308      	str	r3, [sp, #32]
 80071d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071da:	2b0e      	cmp	r3, #14
 80071dc:	d900      	bls.n	80071e0 <_dtoa_r+0x24c>
 80071de:	e10a      	b.n	80073f6 <_dtoa_r+0x462>
 80071e0:	2c00      	cmp	r4, #0
 80071e2:	d100      	bne.n	80071e6 <_dtoa_r+0x252>
 80071e4:	e107      	b.n	80073f6 <_dtoa_r+0x462>
 80071e6:	9b06      	ldr	r3, [sp, #24]
 80071e8:	9c07      	ldr	r4, [sp, #28]
 80071ea:	9312      	str	r3, [sp, #72]	; 0x48
 80071ec:	9413      	str	r4, [sp, #76]	; 0x4c
 80071ee:	2f00      	cmp	r7, #0
 80071f0:	dc00      	bgt.n	80071f4 <_dtoa_r+0x260>
 80071f2:	e089      	b.n	8007308 <_dtoa_r+0x374>
 80071f4:	210f      	movs	r1, #15
 80071f6:	003a      	movs	r2, r7
 80071f8:	4b3e      	ldr	r3, [pc, #248]	; (80072f4 <_dtoa_r+0x360>)
 80071fa:	400a      	ands	r2, r1
 80071fc:	00d2      	lsls	r2, r2, #3
 80071fe:	189b      	adds	r3, r3, r2
 8007200:	681d      	ldr	r5, [r3, #0]
 8007202:	685e      	ldr	r6, [r3, #4]
 8007204:	2302      	movs	r3, #2
 8007206:	113c      	asrs	r4, r7, #4
 8007208:	930e      	str	r3, [sp, #56]	; 0x38
 800720a:	06e3      	lsls	r3, r4, #27
 800720c:	d50b      	bpl.n	8007226 <_dtoa_r+0x292>
 800720e:	4b3d      	ldr	r3, [pc, #244]	; (8007304 <_dtoa_r+0x370>)
 8007210:	400c      	ands	r4, r1
 8007212:	6a1a      	ldr	r2, [r3, #32]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007218:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800721a:	f7f9 fc57 	bl	8000acc <__aeabi_ddiv>
 800721e:	2303      	movs	r3, #3
 8007220:	9006      	str	r0, [sp, #24]
 8007222:	9107      	str	r1, [sp, #28]
 8007224:	930e      	str	r3, [sp, #56]	; 0x38
 8007226:	2300      	movs	r3, #0
 8007228:	e03a      	b.n	80072a0 <_dtoa_r+0x30c>
 800722a:	2301      	movs	r3, #1
 800722c:	930d      	str	r3, [sp, #52]	; 0x34
 800722e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007230:	18fb      	adds	r3, r7, r3
 8007232:	930c      	str	r3, [sp, #48]	; 0x30
 8007234:	3301      	adds	r3, #1
 8007236:	9309      	str	r3, [sp, #36]	; 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	dcbb      	bgt.n	80071b4 <_dtoa_r+0x220>
 800723c:	2301      	movs	r3, #1
 800723e:	e7b9      	b.n	80071b4 <_dtoa_r+0x220>
 8007240:	2300      	movs	r3, #0
 8007242:	e7b1      	b.n	80071a8 <_dtoa_r+0x214>
 8007244:	2300      	movs	r3, #0
 8007246:	e7f1      	b.n	800722c <_dtoa_r+0x298>
 8007248:	2300      	movs	r3, #0
 800724a:	940d      	str	r4, [sp, #52]	; 0x34
 800724c:	9320      	str	r3, [sp, #128]	; 0x80
 800724e:	3b01      	subs	r3, #1
 8007250:	2200      	movs	r2, #0
 8007252:	930c      	str	r3, [sp, #48]	; 0x30
 8007254:	9309      	str	r3, [sp, #36]	; 0x24
 8007256:	3313      	adds	r3, #19
 8007258:	9221      	str	r2, [sp, #132]	; 0x84
 800725a:	e7ab      	b.n	80071b4 <_dtoa_r+0x220>
 800725c:	2301      	movs	r3, #1
 800725e:	930d      	str	r3, [sp, #52]	; 0x34
 8007260:	3b02      	subs	r3, #2
 8007262:	e7f5      	b.n	8007250 <_dtoa_r+0x2bc>
 8007264:	2301      	movs	r3, #1
 8007266:	930c      	str	r3, [sp, #48]	; 0x30
 8007268:	9309      	str	r3, [sp, #36]	; 0x24
 800726a:	001a      	movs	r2, r3
 800726c:	e7f4      	b.n	8007258 <_dtoa_r+0x2c4>
 800726e:	3101      	adds	r1, #1
 8007270:	6069      	str	r1, [r5, #4]
 8007272:	0052      	lsls	r2, r2, #1
 8007274:	e7a3      	b.n	80071be <_dtoa_r+0x22a>
 8007276:	2301      	movs	r3, #1
 8007278:	421c      	tst	r4, r3
 800727a:	d00e      	beq.n	800729a <_dtoa_r+0x306>
 800727c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800727e:	4a21      	ldr	r2, [pc, #132]	; (8007304 <_dtoa_r+0x370>)
 8007280:	3301      	adds	r3, #1
 8007282:	930e      	str	r3, [sp, #56]	; 0x38
 8007284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007286:	0028      	movs	r0, r5
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	189b      	adds	r3, r3, r2
 800728c:	0031      	movs	r1, r6
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f7fa f825 	bl	80012e0 <__aeabi_dmul>
 8007296:	0005      	movs	r5, r0
 8007298:	000e      	movs	r6, r1
 800729a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800729c:	1064      	asrs	r4, r4, #1
 800729e:	3301      	adds	r3, #1
 80072a0:	9310      	str	r3, [sp, #64]	; 0x40
 80072a2:	2c00      	cmp	r4, #0
 80072a4:	d1e7      	bne.n	8007276 <_dtoa_r+0x2e2>
 80072a6:	9806      	ldr	r0, [sp, #24]
 80072a8:	9907      	ldr	r1, [sp, #28]
 80072aa:	002a      	movs	r2, r5
 80072ac:	0033      	movs	r3, r6
 80072ae:	f7f9 fc0d 	bl	8000acc <__aeabi_ddiv>
 80072b2:	9006      	str	r0, [sp, #24]
 80072b4:	9107      	str	r1, [sp, #28]
 80072b6:	e042      	b.n	800733e <_dtoa_r+0x3aa>
 80072b8:	7ff00000 	.word	0x7ff00000
 80072bc:	0000270f 	.word	0x0000270f
 80072c0:	080090ef 	.word	0x080090ef
 80072c4:	080090f2 	.word	0x080090f2
 80072c8:	080090e4 	.word	0x080090e4
 80072cc:	080090e5 	.word	0x080090e5
 80072d0:	3ff00000 	.word	0x3ff00000
 80072d4:	fffffc01 	.word	0xfffffc01
 80072d8:	3ff80000 	.word	0x3ff80000
 80072dc:	636f4361 	.word	0x636f4361
 80072e0:	3fd287a7 	.word	0x3fd287a7
 80072e4:	8b60c8b3 	.word	0x8b60c8b3
 80072e8:	3fc68a28 	.word	0x3fc68a28
 80072ec:	509f79fb 	.word	0x509f79fb
 80072f0:	3fd34413 	.word	0x3fd34413
 80072f4:	08009120 	.word	0x08009120
 80072f8:	00000432 	.word	0x00000432
 80072fc:	00000412 	.word	0x00000412
 8007300:	fe100000 	.word	0xfe100000
 8007304:	080090f8 	.word	0x080090f8
 8007308:	2302      	movs	r3, #2
 800730a:	930e      	str	r3, [sp, #56]	; 0x38
 800730c:	2f00      	cmp	r7, #0
 800730e:	d016      	beq.n	800733e <_dtoa_r+0x3aa>
 8007310:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007312:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007314:	427c      	negs	r4, r7
 8007316:	330d      	adds	r3, #13
 8007318:	4023      	ands	r3, r4
 800731a:	4ace      	ldr	r2, [pc, #824]	; (8007654 <_dtoa_r+0x6c0>)
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	18d3      	adds	r3, r2, r3
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f7f9 ffdc 	bl	80012e0 <__aeabi_dmul>
 8007328:	2300      	movs	r3, #0
 800732a:	2601      	movs	r6, #1
 800732c:	001d      	movs	r5, r3
 800732e:	9006      	str	r0, [sp, #24]
 8007330:	9107      	str	r1, [sp, #28]
 8007332:	1124      	asrs	r4, r4, #4
 8007334:	2c00      	cmp	r4, #0
 8007336:	d000      	beq.n	800733a <_dtoa_r+0x3a6>
 8007338:	e08c      	b.n	8007454 <_dtoa_r+0x4c0>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1b9      	bne.n	80072b2 <_dtoa_r+0x31e>
 800733e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007340:	2b00      	cmp	r3, #0
 8007342:	d100      	bne.n	8007346 <_dtoa_r+0x3b2>
 8007344:	e096      	b.n	8007474 <_dtoa_r+0x4e0>
 8007346:	9c06      	ldr	r4, [sp, #24]
 8007348:	9d07      	ldr	r5, [sp, #28]
 800734a:	2200      	movs	r2, #0
 800734c:	4bc2      	ldr	r3, [pc, #776]	; (8007658 <_dtoa_r+0x6c4>)
 800734e:	0020      	movs	r0, r4
 8007350:	0029      	movs	r1, r5
 8007352:	f7f9 f877 	bl	8000444 <__aeabi_dcmplt>
 8007356:	2800      	cmp	r0, #0
 8007358:	d100      	bne.n	800735c <_dtoa_r+0x3c8>
 800735a:	e08b      	b.n	8007474 <_dtoa_r+0x4e0>
 800735c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d100      	bne.n	8007364 <_dtoa_r+0x3d0>
 8007362:	e087      	b.n	8007474 <_dtoa_r+0x4e0>
 8007364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007366:	2b00      	cmp	r3, #0
 8007368:	dd41      	ble.n	80073ee <_dtoa_r+0x45a>
 800736a:	4bbc      	ldr	r3, [pc, #752]	; (800765c <_dtoa_r+0x6c8>)
 800736c:	2200      	movs	r2, #0
 800736e:	0020      	movs	r0, r4
 8007370:	0029      	movs	r1, r5
 8007372:	f7f9 ffb5 	bl	80012e0 <__aeabi_dmul>
 8007376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007378:	9006      	str	r0, [sp, #24]
 800737a:	9107      	str	r1, [sp, #28]
 800737c:	3301      	adds	r3, #1
 800737e:	930e      	str	r3, [sp, #56]	; 0x38
 8007380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007382:	1e7e      	subs	r6, r7, #1
 8007384:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007386:	9310      	str	r3, [sp, #64]	; 0x40
 8007388:	f7fa fdb6 	bl	8001ef8 <__aeabi_i2d>
 800738c:	9a06      	ldr	r2, [sp, #24]
 800738e:	9b07      	ldr	r3, [sp, #28]
 8007390:	f7f9 ffa6 	bl	80012e0 <__aeabi_dmul>
 8007394:	2200      	movs	r2, #0
 8007396:	4bb2      	ldr	r3, [pc, #712]	; (8007660 <_dtoa_r+0x6cc>)
 8007398:	f7f9 f87c 	bl	8000494 <__aeabi_dadd>
 800739c:	4ab1      	ldr	r2, [pc, #708]	; (8007664 <_dtoa_r+0x6d0>)
 800739e:	900e      	str	r0, [sp, #56]	; 0x38
 80073a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80073a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80073a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80073a6:	4694      	mov	ip, r2
 80073a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073aa:	4463      	add	r3, ip
 80073ac:	9315      	str	r3, [sp, #84]	; 0x54
 80073ae:	001d      	movs	r5, r3
 80073b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d161      	bne.n	800747a <_dtoa_r+0x4e6>
 80073b6:	9806      	ldr	r0, [sp, #24]
 80073b8:	9907      	ldr	r1, [sp, #28]
 80073ba:	2200      	movs	r2, #0
 80073bc:	4baa      	ldr	r3, [pc, #680]	; (8007668 <_dtoa_r+0x6d4>)
 80073be:	f7fa fa01 	bl	80017c4 <__aeabi_dsub>
 80073c2:	0022      	movs	r2, r4
 80073c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073c6:	9006      	str	r0, [sp, #24]
 80073c8:	9107      	str	r1, [sp, #28]
 80073ca:	f7f9 f84f 	bl	800046c <__aeabi_dcmpgt>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d000      	beq.n	80073d4 <_dtoa_r+0x440>
 80073d2:	e2a8      	b.n	8007926 <_dtoa_r+0x992>
 80073d4:	48a5      	ldr	r0, [pc, #660]	; (800766c <_dtoa_r+0x6d8>)
 80073d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073d8:	4684      	mov	ip, r0
 80073da:	4461      	add	r1, ip
 80073dc:	000b      	movs	r3, r1
 80073de:	9806      	ldr	r0, [sp, #24]
 80073e0:	9907      	ldr	r1, [sp, #28]
 80073e2:	0022      	movs	r2, r4
 80073e4:	f7f9 f82e 	bl	8000444 <__aeabi_dcmplt>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d000      	beq.n	80073ee <_dtoa_r+0x45a>
 80073ec:	e295      	b.n	800791a <_dtoa_r+0x986>
 80073ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073f0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80073f2:	9306      	str	r3, [sp, #24]
 80073f4:	9407      	str	r4, [sp, #28]
 80073f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	da00      	bge.n	80073fe <_dtoa_r+0x46a>
 80073fc:	e15c      	b.n	80076b8 <_dtoa_r+0x724>
 80073fe:	2f0e      	cmp	r7, #14
 8007400:	dd00      	ble.n	8007404 <_dtoa_r+0x470>
 8007402:	e159      	b.n	80076b8 <_dtoa_r+0x724>
 8007404:	4b93      	ldr	r3, [pc, #588]	; (8007654 <_dtoa_r+0x6c0>)
 8007406:	00fa      	lsls	r2, r7, #3
 8007408:	189b      	adds	r3, r3, r2
 800740a:	685c      	ldr	r4, [r3, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	9304      	str	r3, [sp, #16]
 8007410:	9405      	str	r4, [sp, #20]
 8007412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007414:	2b00      	cmp	r3, #0
 8007416:	db00      	blt.n	800741a <_dtoa_r+0x486>
 8007418:	e0d8      	b.n	80075cc <_dtoa_r+0x638>
 800741a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	dd00      	ble.n	8007422 <_dtoa_r+0x48e>
 8007420:	e0d4      	b.n	80075cc <_dtoa_r+0x638>
 8007422:	d000      	beq.n	8007426 <_dtoa_r+0x492>
 8007424:	e27d      	b.n	8007922 <_dtoa_r+0x98e>
 8007426:	9804      	ldr	r0, [sp, #16]
 8007428:	9905      	ldr	r1, [sp, #20]
 800742a:	2200      	movs	r2, #0
 800742c:	4b8e      	ldr	r3, [pc, #568]	; (8007668 <_dtoa_r+0x6d4>)
 800742e:	f7f9 ff57 	bl	80012e0 <__aeabi_dmul>
 8007432:	9a06      	ldr	r2, [sp, #24]
 8007434:	9b07      	ldr	r3, [sp, #28]
 8007436:	f7f9 f823 	bl	8000480 <__aeabi_dcmpge>
 800743a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	001e      	movs	r6, r3
 8007440:	2800      	cmp	r0, #0
 8007442:	d000      	beq.n	8007446 <_dtoa_r+0x4b2>
 8007444:	e24f      	b.n	80078e6 <_dtoa_r+0x952>
 8007446:	9b08      	ldr	r3, [sp, #32]
 8007448:	9a08      	ldr	r2, [sp, #32]
 800744a:	1c5d      	adds	r5, r3, #1
 800744c:	2331      	movs	r3, #49	; 0x31
 800744e:	3701      	adds	r7, #1
 8007450:	7013      	strb	r3, [r2, #0]
 8007452:	e24b      	b.n	80078ec <_dtoa_r+0x958>
 8007454:	4234      	tst	r4, r6
 8007456:	d00a      	beq.n	800746e <_dtoa_r+0x4da>
 8007458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800745a:	4a85      	ldr	r2, [pc, #532]	; (8007670 <_dtoa_r+0x6dc>)
 800745c:	3301      	adds	r3, #1
 800745e:	930e      	str	r3, [sp, #56]	; 0x38
 8007460:	00eb      	lsls	r3, r5, #3
 8007462:	189b      	adds	r3, r3, r2
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f7f9 ff3a 	bl	80012e0 <__aeabi_dmul>
 800746c:	0033      	movs	r3, r6
 800746e:	1064      	asrs	r4, r4, #1
 8007470:	3501      	adds	r5, #1
 8007472:	e75f      	b.n	8007334 <_dtoa_r+0x3a0>
 8007474:	003e      	movs	r6, r7
 8007476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007478:	e784      	b.n	8007384 <_dtoa_r+0x3f0>
 800747a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800747c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800747e:	1e5a      	subs	r2, r3, #1
 8007480:	4b74      	ldr	r3, [pc, #464]	; (8007654 <_dtoa_r+0x6c0>)
 8007482:	00d2      	lsls	r2, r2, #3
 8007484:	189b      	adds	r3, r3, r2
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2900      	cmp	r1, #0
 800748c:	d049      	beq.n	8007522 <_dtoa_r+0x58e>
 800748e:	2000      	movs	r0, #0
 8007490:	4978      	ldr	r1, [pc, #480]	; (8007674 <_dtoa_r+0x6e0>)
 8007492:	f7f9 fb1b 	bl	8000acc <__aeabi_ddiv>
 8007496:	002b      	movs	r3, r5
 8007498:	0022      	movs	r2, r4
 800749a:	f7fa f993 	bl	80017c4 <__aeabi_dsub>
 800749e:	9b08      	ldr	r3, [sp, #32]
 80074a0:	900e      	str	r0, [sp, #56]	; 0x38
 80074a2:	910f      	str	r1, [sp, #60]	; 0x3c
 80074a4:	9315      	str	r3, [sp, #84]	; 0x54
 80074a6:	9806      	ldr	r0, [sp, #24]
 80074a8:	9907      	ldr	r1, [sp, #28]
 80074aa:	f7fa fcef 	bl	8001e8c <__aeabi_d2iz>
 80074ae:	0004      	movs	r4, r0
 80074b0:	f7fa fd22 	bl	8001ef8 <__aeabi_i2d>
 80074b4:	0002      	movs	r2, r0
 80074b6:	000b      	movs	r3, r1
 80074b8:	9806      	ldr	r0, [sp, #24]
 80074ba:	9907      	ldr	r1, [sp, #28]
 80074bc:	f7fa f982 	bl	80017c4 <__aeabi_dsub>
 80074c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074c2:	3430      	adds	r4, #48	; 0x30
 80074c4:	1c5d      	adds	r5, r3, #1
 80074c6:	701c      	strb	r4, [r3, #0]
 80074c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074cc:	9006      	str	r0, [sp, #24]
 80074ce:	9107      	str	r1, [sp, #28]
 80074d0:	f7f8 ffb8 	bl	8000444 <__aeabi_dcmplt>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d16c      	bne.n	80075b2 <_dtoa_r+0x61e>
 80074d8:	9a06      	ldr	r2, [sp, #24]
 80074da:	9b07      	ldr	r3, [sp, #28]
 80074dc:	2000      	movs	r0, #0
 80074de:	495e      	ldr	r1, [pc, #376]	; (8007658 <_dtoa_r+0x6c4>)
 80074e0:	f7fa f970 	bl	80017c4 <__aeabi_dsub>
 80074e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074e8:	f7f8 ffac 	bl	8000444 <__aeabi_dcmplt>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d000      	beq.n	80074f2 <_dtoa_r+0x55e>
 80074f0:	e0c3      	b.n	800767a <_dtoa_r+0x6e6>
 80074f2:	9b08      	ldr	r3, [sp, #32]
 80074f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074f6:	1aeb      	subs	r3, r5, r3
 80074f8:	429a      	cmp	r2, r3
 80074fa:	dc00      	bgt.n	80074fe <_dtoa_r+0x56a>
 80074fc:	e777      	b.n	80073ee <_dtoa_r+0x45a>
 80074fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007500:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007502:	2200      	movs	r2, #0
 8007504:	4b55      	ldr	r3, [pc, #340]	; (800765c <_dtoa_r+0x6c8>)
 8007506:	f7f9 feeb 	bl	80012e0 <__aeabi_dmul>
 800750a:	2200      	movs	r2, #0
 800750c:	900e      	str	r0, [sp, #56]	; 0x38
 800750e:	910f      	str	r1, [sp, #60]	; 0x3c
 8007510:	9806      	ldr	r0, [sp, #24]
 8007512:	9907      	ldr	r1, [sp, #28]
 8007514:	4b51      	ldr	r3, [pc, #324]	; (800765c <_dtoa_r+0x6c8>)
 8007516:	f7f9 fee3 	bl	80012e0 <__aeabi_dmul>
 800751a:	9515      	str	r5, [sp, #84]	; 0x54
 800751c:	9006      	str	r0, [sp, #24]
 800751e:	9107      	str	r1, [sp, #28]
 8007520:	e7c1      	b.n	80074a6 <_dtoa_r+0x512>
 8007522:	0020      	movs	r0, r4
 8007524:	0029      	movs	r1, r5
 8007526:	f7f9 fedb 	bl	80012e0 <__aeabi_dmul>
 800752a:	9c08      	ldr	r4, [sp, #32]
 800752c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800752e:	0023      	movs	r3, r4
 8007530:	4694      	mov	ip, r2
 8007532:	900e      	str	r0, [sp, #56]	; 0x38
 8007534:	910f      	str	r1, [sp, #60]	; 0x3c
 8007536:	4463      	add	r3, ip
 8007538:	9315      	str	r3, [sp, #84]	; 0x54
 800753a:	9806      	ldr	r0, [sp, #24]
 800753c:	9907      	ldr	r1, [sp, #28]
 800753e:	f7fa fca5 	bl	8001e8c <__aeabi_d2iz>
 8007542:	0005      	movs	r5, r0
 8007544:	f7fa fcd8 	bl	8001ef8 <__aeabi_i2d>
 8007548:	000b      	movs	r3, r1
 800754a:	0002      	movs	r2, r0
 800754c:	9806      	ldr	r0, [sp, #24]
 800754e:	9907      	ldr	r1, [sp, #28]
 8007550:	f7fa f938 	bl	80017c4 <__aeabi_dsub>
 8007554:	3530      	adds	r5, #48	; 0x30
 8007556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007558:	7025      	strb	r5, [r4, #0]
 800755a:	3401      	adds	r4, #1
 800755c:	9006      	str	r0, [sp, #24]
 800755e:	9107      	str	r1, [sp, #28]
 8007560:	42a3      	cmp	r3, r4
 8007562:	d12a      	bne.n	80075ba <_dtoa_r+0x626>
 8007564:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007566:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007568:	9a08      	ldr	r2, [sp, #32]
 800756a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800756c:	4694      	mov	ip, r2
 800756e:	4463      	add	r3, ip
 8007570:	2200      	movs	r2, #0
 8007572:	001d      	movs	r5, r3
 8007574:	4b3f      	ldr	r3, [pc, #252]	; (8007674 <_dtoa_r+0x6e0>)
 8007576:	f7f8 ff8d 	bl	8000494 <__aeabi_dadd>
 800757a:	0002      	movs	r2, r0
 800757c:	000b      	movs	r3, r1
 800757e:	9806      	ldr	r0, [sp, #24]
 8007580:	9907      	ldr	r1, [sp, #28]
 8007582:	f7f8 ff73 	bl	800046c <__aeabi_dcmpgt>
 8007586:	2800      	cmp	r0, #0
 8007588:	d000      	beq.n	800758c <_dtoa_r+0x5f8>
 800758a:	e076      	b.n	800767a <_dtoa_r+0x6e6>
 800758c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800758e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007590:	2000      	movs	r0, #0
 8007592:	4938      	ldr	r1, [pc, #224]	; (8007674 <_dtoa_r+0x6e0>)
 8007594:	f7fa f916 	bl	80017c4 <__aeabi_dsub>
 8007598:	0002      	movs	r2, r0
 800759a:	000b      	movs	r3, r1
 800759c:	9806      	ldr	r0, [sp, #24]
 800759e:	9907      	ldr	r1, [sp, #28]
 80075a0:	f7f8 ff50 	bl	8000444 <__aeabi_dcmplt>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d100      	bne.n	80075aa <_dtoa_r+0x616>
 80075a8:	e721      	b.n	80073ee <_dtoa_r+0x45a>
 80075aa:	1e6b      	subs	r3, r5, #1
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	2a30      	cmp	r2, #48	; 0x30
 80075b0:	d001      	beq.n	80075b6 <_dtoa_r+0x622>
 80075b2:	0037      	movs	r7, r6
 80075b4:	e03f      	b.n	8007636 <_dtoa_r+0x6a2>
 80075b6:	001d      	movs	r5, r3
 80075b8:	e7f7      	b.n	80075aa <_dtoa_r+0x616>
 80075ba:	9806      	ldr	r0, [sp, #24]
 80075bc:	9907      	ldr	r1, [sp, #28]
 80075be:	2200      	movs	r2, #0
 80075c0:	4b26      	ldr	r3, [pc, #152]	; (800765c <_dtoa_r+0x6c8>)
 80075c2:	f7f9 fe8d 	bl	80012e0 <__aeabi_dmul>
 80075c6:	9006      	str	r0, [sp, #24]
 80075c8:	9107      	str	r1, [sp, #28]
 80075ca:	e7b6      	b.n	800753a <_dtoa_r+0x5a6>
 80075cc:	9e08      	ldr	r6, [sp, #32]
 80075ce:	9a04      	ldr	r2, [sp, #16]
 80075d0:	9b05      	ldr	r3, [sp, #20]
 80075d2:	9806      	ldr	r0, [sp, #24]
 80075d4:	9907      	ldr	r1, [sp, #28]
 80075d6:	f7f9 fa79 	bl	8000acc <__aeabi_ddiv>
 80075da:	f7fa fc57 	bl	8001e8c <__aeabi_d2iz>
 80075de:	0004      	movs	r4, r0
 80075e0:	f7fa fc8a 	bl	8001ef8 <__aeabi_i2d>
 80075e4:	9a04      	ldr	r2, [sp, #16]
 80075e6:	9b05      	ldr	r3, [sp, #20]
 80075e8:	f7f9 fe7a 	bl	80012e0 <__aeabi_dmul>
 80075ec:	0002      	movs	r2, r0
 80075ee:	000b      	movs	r3, r1
 80075f0:	9806      	ldr	r0, [sp, #24]
 80075f2:	9907      	ldr	r1, [sp, #28]
 80075f4:	f7fa f8e6 	bl	80017c4 <__aeabi_dsub>
 80075f8:	0023      	movs	r3, r4
 80075fa:	3330      	adds	r3, #48	; 0x30
 80075fc:	7033      	strb	r3, [r6, #0]
 80075fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007600:	9b08      	ldr	r3, [sp, #32]
 8007602:	1c75      	adds	r5, r6, #1
 8007604:	1aeb      	subs	r3, r5, r3
 8007606:	429a      	cmp	r2, r3
 8007608:	d148      	bne.n	800769c <_dtoa_r+0x708>
 800760a:	0002      	movs	r2, r0
 800760c:	000b      	movs	r3, r1
 800760e:	f7f8 ff41 	bl	8000494 <__aeabi_dadd>
 8007612:	9a04      	ldr	r2, [sp, #16]
 8007614:	9b05      	ldr	r3, [sp, #20]
 8007616:	9006      	str	r0, [sp, #24]
 8007618:	9107      	str	r1, [sp, #28]
 800761a:	f7f8 ff27 	bl	800046c <__aeabi_dcmpgt>
 800761e:	2800      	cmp	r0, #0
 8007620:	d12a      	bne.n	8007678 <_dtoa_r+0x6e4>
 8007622:	9a04      	ldr	r2, [sp, #16]
 8007624:	9b05      	ldr	r3, [sp, #20]
 8007626:	9806      	ldr	r0, [sp, #24]
 8007628:	9907      	ldr	r1, [sp, #28]
 800762a:	f7f8 ff05 	bl	8000438 <__aeabi_dcmpeq>
 800762e:	2800      	cmp	r0, #0
 8007630:	d001      	beq.n	8007636 <_dtoa_r+0x6a2>
 8007632:	07e3      	lsls	r3, r4, #31
 8007634:	d420      	bmi.n	8007678 <_dtoa_r+0x6e4>
 8007636:	9903      	ldr	r1, [sp, #12]
 8007638:	9802      	ldr	r0, [sp, #8]
 800763a:	f000 fae2 	bl	8007c02 <_Bfree>
 800763e:	2300      	movs	r3, #0
 8007640:	702b      	strb	r3, [r5, #0]
 8007642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007644:	3701      	adds	r7, #1
 8007646:	601f      	str	r7, [r3, #0]
 8007648:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800764a:	2b00      	cmp	r3, #0
 800764c:	d100      	bne.n	8007650 <_dtoa_r+0x6bc>
 800764e:	e4e6      	b.n	800701e <_dtoa_r+0x8a>
 8007650:	601d      	str	r5, [r3, #0]
 8007652:	e4e4      	b.n	800701e <_dtoa_r+0x8a>
 8007654:	08009120 	.word	0x08009120
 8007658:	3ff00000 	.word	0x3ff00000
 800765c:	40240000 	.word	0x40240000
 8007660:	401c0000 	.word	0x401c0000
 8007664:	fcc00000 	.word	0xfcc00000
 8007668:	40140000 	.word	0x40140000
 800766c:	7cc00000 	.word	0x7cc00000
 8007670:	080090f8 	.word	0x080090f8
 8007674:	3fe00000 	.word	0x3fe00000
 8007678:	003e      	movs	r6, r7
 800767a:	1e6b      	subs	r3, r5, #1
 800767c:	781a      	ldrb	r2, [r3, #0]
 800767e:	2a39      	cmp	r2, #57	; 0x39
 8007680:	d106      	bne.n	8007690 <_dtoa_r+0x6fc>
 8007682:	9a08      	ldr	r2, [sp, #32]
 8007684:	429a      	cmp	r2, r3
 8007686:	d107      	bne.n	8007698 <_dtoa_r+0x704>
 8007688:	2330      	movs	r3, #48	; 0x30
 800768a:	7013      	strb	r3, [r2, #0]
 800768c:	0013      	movs	r3, r2
 800768e:	3601      	adds	r6, #1
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	3201      	adds	r2, #1
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e78c      	b.n	80075b2 <_dtoa_r+0x61e>
 8007698:	001d      	movs	r5, r3
 800769a:	e7ee      	b.n	800767a <_dtoa_r+0x6e6>
 800769c:	2200      	movs	r2, #0
 800769e:	4ba4      	ldr	r3, [pc, #656]	; (8007930 <_dtoa_r+0x99c>)
 80076a0:	f7f9 fe1e 	bl	80012e0 <__aeabi_dmul>
 80076a4:	2200      	movs	r2, #0
 80076a6:	2300      	movs	r3, #0
 80076a8:	9006      	str	r0, [sp, #24]
 80076aa:	9107      	str	r1, [sp, #28]
 80076ac:	002e      	movs	r6, r5
 80076ae:	f7f8 fec3 	bl	8000438 <__aeabi_dcmpeq>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d08b      	beq.n	80075ce <_dtoa_r+0x63a>
 80076b6:	e7be      	b.n	8007636 <_dtoa_r+0x6a2>
 80076b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	d100      	bne.n	80076c0 <_dtoa_r+0x72c>
 80076be:	e0da      	b.n	8007876 <_dtoa_r+0x8e2>
 80076c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076c2:	2a01      	cmp	r2, #1
 80076c4:	dd00      	ble.n	80076c8 <_dtoa_r+0x734>
 80076c6:	e0bd      	b.n	8007844 <_dtoa_r+0x8b0>
 80076c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80076ca:	2a00      	cmp	r2, #0
 80076cc:	d100      	bne.n	80076d0 <_dtoa_r+0x73c>
 80076ce:	e0b5      	b.n	800783c <_dtoa_r+0x8a8>
 80076d0:	4a98      	ldr	r2, [pc, #608]	; (8007934 <_dtoa_r+0x9a0>)
 80076d2:	189b      	adds	r3, r3, r2
 80076d4:	9d04      	ldr	r5, [sp, #16]
 80076d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80076d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076da:	2101      	movs	r1, #1
 80076dc:	18d2      	adds	r2, r2, r3
 80076de:	920a      	str	r2, [sp, #40]	; 0x28
 80076e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076e2:	9802      	ldr	r0, [sp, #8]
 80076e4:	18d3      	adds	r3, r2, r3
 80076e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076e8:	f000 fb2b 	bl	8007d42 <__i2b>
 80076ec:	0006      	movs	r6, r0
 80076ee:	2c00      	cmp	r4, #0
 80076f0:	dd0e      	ble.n	8007710 <_dtoa_r+0x77c>
 80076f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dd0b      	ble.n	8007710 <_dtoa_r+0x77c>
 80076f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076fa:	0023      	movs	r3, r4
 80076fc:	4294      	cmp	r4, r2
 80076fe:	dd00      	ble.n	8007702 <_dtoa_r+0x76e>
 8007700:	0013      	movs	r3, r2
 8007702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007704:	1ae4      	subs	r4, r4, r3
 8007706:	1ad2      	subs	r2, r2, r3
 8007708:	920a      	str	r2, [sp, #40]	; 0x28
 800770a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007710:	9b04      	ldr	r3, [sp, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d01f      	beq.n	8007756 <_dtoa_r+0x7c2>
 8007716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007718:	2b00      	cmp	r3, #0
 800771a:	d100      	bne.n	800771e <_dtoa_r+0x78a>
 800771c:	e0af      	b.n	800787e <_dtoa_r+0x8ea>
 800771e:	2d00      	cmp	r5, #0
 8007720:	d011      	beq.n	8007746 <_dtoa_r+0x7b2>
 8007722:	0031      	movs	r1, r6
 8007724:	002a      	movs	r2, r5
 8007726:	9802      	ldr	r0, [sp, #8]
 8007728:	f000 fba4 	bl	8007e74 <__pow5mult>
 800772c:	9a03      	ldr	r2, [sp, #12]
 800772e:	0001      	movs	r1, r0
 8007730:	0006      	movs	r6, r0
 8007732:	9802      	ldr	r0, [sp, #8]
 8007734:	f000 fb0e 	bl	8007d54 <__multiply>
 8007738:	9903      	ldr	r1, [sp, #12]
 800773a:	9010      	str	r0, [sp, #64]	; 0x40
 800773c:	9802      	ldr	r0, [sp, #8]
 800773e:	f000 fa60 	bl	8007c02 <_Bfree>
 8007742:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007744:	9303      	str	r3, [sp, #12]
 8007746:	9b04      	ldr	r3, [sp, #16]
 8007748:	1b5a      	subs	r2, r3, r5
 800774a:	d004      	beq.n	8007756 <_dtoa_r+0x7c2>
 800774c:	9903      	ldr	r1, [sp, #12]
 800774e:	9802      	ldr	r0, [sp, #8]
 8007750:	f000 fb90 	bl	8007e74 <__pow5mult>
 8007754:	9003      	str	r0, [sp, #12]
 8007756:	2101      	movs	r1, #1
 8007758:	9802      	ldr	r0, [sp, #8]
 800775a:	f000 faf2 	bl	8007d42 <__i2b>
 800775e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007760:	9004      	str	r0, [sp, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d100      	bne.n	8007768 <_dtoa_r+0x7d4>
 8007766:	e1e3      	b.n	8007b30 <_dtoa_r+0xb9c>
 8007768:	001a      	movs	r2, r3
 800776a:	0001      	movs	r1, r0
 800776c:	9802      	ldr	r0, [sp, #8]
 800776e:	f000 fb81 	bl	8007e74 <__pow5mult>
 8007772:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007774:	9004      	str	r0, [sp, #16]
 8007776:	2b01      	cmp	r3, #1
 8007778:	dd00      	ble.n	800777c <_dtoa_r+0x7e8>
 800777a:	e082      	b.n	8007882 <_dtoa_r+0x8ee>
 800777c:	2500      	movs	r5, #0
 800777e:	9b06      	ldr	r3, [sp, #24]
 8007780:	42ab      	cmp	r3, r5
 8007782:	d10e      	bne.n	80077a2 <_dtoa_r+0x80e>
 8007784:	9b07      	ldr	r3, [sp, #28]
 8007786:	031b      	lsls	r3, r3, #12
 8007788:	42ab      	cmp	r3, r5
 800778a:	d10a      	bne.n	80077a2 <_dtoa_r+0x80e>
 800778c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800778e:	9a07      	ldr	r2, [sp, #28]
 8007790:	4213      	tst	r3, r2
 8007792:	d006      	beq.n	80077a2 <_dtoa_r+0x80e>
 8007794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007796:	3501      	adds	r5, #1
 8007798:	3301      	adds	r3, #1
 800779a:	930a      	str	r3, [sp, #40]	; 0x28
 800779c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800779e:	3301      	adds	r3, #1
 80077a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80077a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077a4:	2001      	movs	r0, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d16c      	bne.n	8007884 <_dtoa_r+0x8f0>
 80077aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ac:	1818      	adds	r0, r3, r0
 80077ae:	231f      	movs	r3, #31
 80077b0:	4018      	ands	r0, r3
 80077b2:	d07e      	beq.n	80078b2 <_dtoa_r+0x91e>
 80077b4:	3301      	adds	r3, #1
 80077b6:	1a1b      	subs	r3, r3, r0
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	dd70      	ble.n	800789e <_dtoa_r+0x90a>
 80077bc:	231c      	movs	r3, #28
 80077be:	1a18      	subs	r0, r3, r0
 80077c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c2:	1824      	adds	r4, r4, r0
 80077c4:	181b      	adds	r3, r3, r0
 80077c6:	930a      	str	r3, [sp, #40]	; 0x28
 80077c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ca:	181b      	adds	r3, r3, r0
 80077cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dd05      	ble.n	80077e0 <_dtoa_r+0x84c>
 80077d4:	001a      	movs	r2, r3
 80077d6:	9903      	ldr	r1, [sp, #12]
 80077d8:	9802      	ldr	r0, [sp, #8]
 80077da:	f000 fb9d 	bl	8007f18 <__lshift>
 80077de:	9003      	str	r0, [sp, #12]
 80077e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	dd05      	ble.n	80077f2 <_dtoa_r+0x85e>
 80077e6:	001a      	movs	r2, r3
 80077e8:	9904      	ldr	r1, [sp, #16]
 80077ea:	9802      	ldr	r0, [sp, #8]
 80077ec:	f000 fb94 	bl	8007f18 <__lshift>
 80077f0:	9004      	str	r0, [sp, #16]
 80077f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d05e      	beq.n	80078b6 <_dtoa_r+0x922>
 80077f8:	9904      	ldr	r1, [sp, #16]
 80077fa:	9803      	ldr	r0, [sp, #12]
 80077fc:	f000 fbde 	bl	8007fbc <__mcmp>
 8007800:	2800      	cmp	r0, #0
 8007802:	da58      	bge.n	80078b6 <_dtoa_r+0x922>
 8007804:	2300      	movs	r3, #0
 8007806:	220a      	movs	r2, #10
 8007808:	9903      	ldr	r1, [sp, #12]
 800780a:	9802      	ldr	r0, [sp, #8]
 800780c:	f000 fa12 	bl	8007c34 <__multadd>
 8007810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007812:	3f01      	subs	r7, #1
 8007814:	9003      	str	r0, [sp, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d100      	bne.n	800781c <_dtoa_r+0x888>
 800781a:	e190      	b.n	8007b3e <_dtoa_r+0xbaa>
 800781c:	2300      	movs	r3, #0
 800781e:	0031      	movs	r1, r6
 8007820:	220a      	movs	r2, #10
 8007822:	9802      	ldr	r0, [sp, #8]
 8007824:	f000 fa06 	bl	8007c34 <__multadd>
 8007828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800782a:	0006      	movs	r6, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	dd00      	ble.n	8007832 <_dtoa_r+0x89e>
 8007830:	e088      	b.n	8007944 <_dtoa_r+0x9b0>
 8007832:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007834:	2b02      	cmp	r3, #2
 8007836:	dc00      	bgt.n	800783a <_dtoa_r+0x8a6>
 8007838:	e084      	b.n	8007944 <_dtoa_r+0x9b0>
 800783a:	e044      	b.n	80078c6 <_dtoa_r+0x932>
 800783c:	2336      	movs	r3, #54	; 0x36
 800783e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007840:	1a9b      	subs	r3, r3, r2
 8007842:	e747      	b.n	80076d4 <_dtoa_r+0x740>
 8007844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007846:	1e5d      	subs	r5, r3, #1
 8007848:	9b04      	ldr	r3, [sp, #16]
 800784a:	42ab      	cmp	r3, r5
 800784c:	db08      	blt.n	8007860 <_dtoa_r+0x8cc>
 800784e:	1b5d      	subs	r5, r3, r5
 8007850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	da0c      	bge.n	8007870 <_dtoa_r+0x8dc>
 8007856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800785a:	1a9c      	subs	r4, r3, r2
 800785c:	2300      	movs	r3, #0
 800785e:	e73b      	b.n	80076d8 <_dtoa_r+0x744>
 8007860:	9b04      	ldr	r3, [sp, #16]
 8007862:	9504      	str	r5, [sp, #16]
 8007864:	1aea      	subs	r2, r5, r3
 8007866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007868:	2500      	movs	r5, #0
 800786a:	189b      	adds	r3, r3, r2
 800786c:	9311      	str	r3, [sp, #68]	; 0x44
 800786e:	e7ef      	b.n	8007850 <_dtoa_r+0x8bc>
 8007870:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007874:	e730      	b.n	80076d8 <_dtoa_r+0x744>
 8007876:	9d04      	ldr	r5, [sp, #16]
 8007878:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800787a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800787c:	e737      	b.n	80076ee <_dtoa_r+0x75a>
 800787e:	9a04      	ldr	r2, [sp, #16]
 8007880:	e764      	b.n	800774c <_dtoa_r+0x7b8>
 8007882:	2500      	movs	r5, #0
 8007884:	9b04      	ldr	r3, [sp, #16]
 8007886:	9a04      	ldr	r2, [sp, #16]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	9310      	str	r3, [sp, #64]	; 0x40
 800788c:	3303      	adds	r3, #3
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	18d3      	adds	r3, r2, r3
 8007892:	6858      	ldr	r0, [r3, #4]
 8007894:	f000 fa0c 	bl	8007cb0 <__hi0bits>
 8007898:	2320      	movs	r3, #32
 800789a:	1a18      	subs	r0, r3, r0
 800789c:	e785      	b.n	80077aa <_dtoa_r+0x816>
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d095      	beq.n	80077ce <_dtoa_r+0x83a>
 80078a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078a4:	331c      	adds	r3, #28
 80078a6:	18d2      	adds	r2, r2, r3
 80078a8:	920a      	str	r2, [sp, #40]	; 0x28
 80078aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078ac:	18e4      	adds	r4, r4, r3
 80078ae:	18d3      	adds	r3, r2, r3
 80078b0:	e78c      	b.n	80077cc <_dtoa_r+0x838>
 80078b2:	0003      	movs	r3, r0
 80078b4:	e7f5      	b.n	80078a2 <_dtoa_r+0x90e>
 80078b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	dc3d      	bgt.n	8007938 <_dtoa_r+0x9a4>
 80078bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078be:	2b02      	cmp	r3, #2
 80078c0:	dd3a      	ble.n	8007938 <_dtoa_r+0x9a4>
 80078c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c4:	930c      	str	r3, [sp, #48]	; 0x30
 80078c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10c      	bne.n	80078e6 <_dtoa_r+0x952>
 80078cc:	9904      	ldr	r1, [sp, #16]
 80078ce:	2205      	movs	r2, #5
 80078d0:	9802      	ldr	r0, [sp, #8]
 80078d2:	f000 f9af 	bl	8007c34 <__multadd>
 80078d6:	9004      	str	r0, [sp, #16]
 80078d8:	0001      	movs	r1, r0
 80078da:	9803      	ldr	r0, [sp, #12]
 80078dc:	f000 fb6e 	bl	8007fbc <__mcmp>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	dd00      	ble.n	80078e6 <_dtoa_r+0x952>
 80078e4:	e5af      	b.n	8007446 <_dtoa_r+0x4b2>
 80078e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078e8:	9d08      	ldr	r5, [sp, #32]
 80078ea:	43df      	mvns	r7, r3
 80078ec:	2300      	movs	r3, #0
 80078ee:	9309      	str	r3, [sp, #36]	; 0x24
 80078f0:	9904      	ldr	r1, [sp, #16]
 80078f2:	9802      	ldr	r0, [sp, #8]
 80078f4:	f000 f985 	bl	8007c02 <_Bfree>
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	d100      	bne.n	80078fe <_dtoa_r+0x96a>
 80078fc:	e69b      	b.n	8007636 <_dtoa_r+0x6a2>
 80078fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d005      	beq.n	8007910 <_dtoa_r+0x97c>
 8007904:	42b3      	cmp	r3, r6
 8007906:	d003      	beq.n	8007910 <_dtoa_r+0x97c>
 8007908:	0019      	movs	r1, r3
 800790a:	9802      	ldr	r0, [sp, #8]
 800790c:	f000 f979 	bl	8007c02 <_Bfree>
 8007910:	0031      	movs	r1, r6
 8007912:	9802      	ldr	r0, [sp, #8]
 8007914:	f000 f975 	bl	8007c02 <_Bfree>
 8007918:	e68d      	b.n	8007636 <_dtoa_r+0x6a2>
 800791a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	001e      	movs	r6, r3
 8007920:	e7e1      	b.n	80078e6 <_dtoa_r+0x952>
 8007922:	2300      	movs	r3, #0
 8007924:	e7fa      	b.n	800791c <_dtoa_r+0x988>
 8007926:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007928:	0037      	movs	r7, r6
 800792a:	9304      	str	r3, [sp, #16]
 800792c:	001e      	movs	r6, r3
 800792e:	e58a      	b.n	8007446 <_dtoa_r+0x4b2>
 8007930:	40240000 	.word	0x40240000
 8007934:	00000433 	.word	0x00000433
 8007938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800793a:	2b00      	cmp	r3, #0
 800793c:	d100      	bne.n	8007940 <_dtoa_r+0x9ac>
 800793e:	e0b2      	b.n	8007aa6 <_dtoa_r+0xb12>
 8007940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007942:	930c      	str	r3, [sp, #48]	; 0x30
 8007944:	2c00      	cmp	r4, #0
 8007946:	dd05      	ble.n	8007954 <_dtoa_r+0x9c0>
 8007948:	0031      	movs	r1, r6
 800794a:	0022      	movs	r2, r4
 800794c:	9802      	ldr	r0, [sp, #8]
 800794e:	f000 fae3 	bl	8007f18 <__lshift>
 8007952:	0006      	movs	r6, r0
 8007954:	0030      	movs	r0, r6
 8007956:	2d00      	cmp	r5, #0
 8007958:	d011      	beq.n	800797e <_dtoa_r+0x9ea>
 800795a:	6871      	ldr	r1, [r6, #4]
 800795c:	9802      	ldr	r0, [sp, #8]
 800795e:	f000 f918 	bl	8007b92 <_Balloc>
 8007962:	0031      	movs	r1, r6
 8007964:	0004      	movs	r4, r0
 8007966:	6933      	ldr	r3, [r6, #16]
 8007968:	310c      	adds	r1, #12
 800796a:	1c9a      	adds	r2, r3, #2
 800796c:	0092      	lsls	r2, r2, #2
 800796e:	300c      	adds	r0, #12
 8007970:	f000 f906 	bl	8007b80 <memcpy>
 8007974:	2201      	movs	r2, #1
 8007976:	0021      	movs	r1, r4
 8007978:	9802      	ldr	r0, [sp, #8]
 800797a:	f000 facd 	bl	8007f18 <__lshift>
 800797e:	9609      	str	r6, [sp, #36]	; 0x24
 8007980:	0006      	movs	r6, r0
 8007982:	9b08      	ldr	r3, [sp, #32]
 8007984:	930a      	str	r3, [sp, #40]	; 0x28
 8007986:	9904      	ldr	r1, [sp, #16]
 8007988:	9803      	ldr	r0, [sp, #12]
 800798a:	f7ff fa7c 	bl	8006e86 <quorem>
 800798e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007990:	900d      	str	r0, [sp, #52]	; 0x34
 8007992:	0004      	movs	r4, r0
 8007994:	9803      	ldr	r0, [sp, #12]
 8007996:	f000 fb11 	bl	8007fbc <__mcmp>
 800799a:	0032      	movs	r2, r6
 800799c:	9010      	str	r0, [sp, #64]	; 0x40
 800799e:	9904      	ldr	r1, [sp, #16]
 80079a0:	9802      	ldr	r0, [sp, #8]
 80079a2:	f000 fb25 	bl	8007ff0 <__mdiff>
 80079a6:	2301      	movs	r3, #1
 80079a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80079aa:	68c3      	ldr	r3, [r0, #12]
 80079ac:	3430      	adds	r4, #48	; 0x30
 80079ae:	0005      	movs	r5, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d104      	bne.n	80079be <_dtoa_r+0xa2a>
 80079b4:	0001      	movs	r1, r0
 80079b6:	9803      	ldr	r0, [sp, #12]
 80079b8:	f000 fb00 	bl	8007fbc <__mcmp>
 80079bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80079be:	0029      	movs	r1, r5
 80079c0:	9802      	ldr	r0, [sp, #8]
 80079c2:	f000 f91e 	bl	8007c02 <_Bfree>
 80079c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079ca:	4313      	orrs	r3, r2
 80079cc:	d10e      	bne.n	80079ec <_dtoa_r+0xa58>
 80079ce:	9a06      	ldr	r2, [sp, #24]
 80079d0:	3301      	adds	r3, #1
 80079d2:	4213      	tst	r3, r2
 80079d4:	d10a      	bne.n	80079ec <_dtoa_r+0xa58>
 80079d6:	2c39      	cmp	r4, #57	; 0x39
 80079d8:	d026      	beq.n	8007a28 <_dtoa_r+0xa94>
 80079da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079dc:	2b00      	cmp	r3, #0
 80079de:	dd01      	ble.n	80079e4 <_dtoa_r+0xa50>
 80079e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80079e2:	3431      	adds	r4, #49	; 0x31
 80079e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e6:	1c5d      	adds	r5, r3, #1
 80079e8:	701c      	strb	r4, [r3, #0]
 80079ea:	e781      	b.n	80078f0 <_dtoa_r+0x95c>
 80079ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	db07      	blt.n	8007a02 <_dtoa_r+0xa6e>
 80079f2:	001d      	movs	r5, r3
 80079f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079f6:	431d      	orrs	r5, r3
 80079f8:	d122      	bne.n	8007a40 <_dtoa_r+0xaac>
 80079fa:	2301      	movs	r3, #1
 80079fc:	9a06      	ldr	r2, [sp, #24]
 80079fe:	4213      	tst	r3, r2
 8007a00:	d11e      	bne.n	8007a40 <_dtoa_r+0xaac>
 8007a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dded      	ble.n	80079e4 <_dtoa_r+0xa50>
 8007a08:	9903      	ldr	r1, [sp, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	9802      	ldr	r0, [sp, #8]
 8007a0e:	f000 fa83 	bl	8007f18 <__lshift>
 8007a12:	9904      	ldr	r1, [sp, #16]
 8007a14:	9003      	str	r0, [sp, #12]
 8007a16:	f000 fad1 	bl	8007fbc <__mcmp>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	dc02      	bgt.n	8007a24 <_dtoa_r+0xa90>
 8007a1e:	d1e1      	bne.n	80079e4 <_dtoa_r+0xa50>
 8007a20:	07e3      	lsls	r3, r4, #31
 8007a22:	d5df      	bpl.n	80079e4 <_dtoa_r+0xa50>
 8007a24:	2c39      	cmp	r4, #57	; 0x39
 8007a26:	d1db      	bne.n	80079e0 <_dtoa_r+0xa4c>
 8007a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a2c:	1c5d      	adds	r5, r3, #1
 8007a2e:	2339      	movs	r3, #57	; 0x39
 8007a30:	7013      	strb	r3, [r2, #0]
 8007a32:	1e6b      	subs	r3, r5, #1
 8007a34:	781a      	ldrb	r2, [r3, #0]
 8007a36:	2a39      	cmp	r2, #57	; 0x39
 8007a38:	d067      	beq.n	8007b0a <_dtoa_r+0xb76>
 8007a3a:	3201      	adds	r2, #1
 8007a3c:	701a      	strb	r2, [r3, #0]
 8007a3e:	e757      	b.n	80078f0 <_dtoa_r+0x95c>
 8007a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a42:	1c5d      	adds	r5, r3, #1
 8007a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dd04      	ble.n	8007a54 <_dtoa_r+0xac0>
 8007a4a:	2c39      	cmp	r4, #57	; 0x39
 8007a4c:	d0ec      	beq.n	8007a28 <_dtoa_r+0xa94>
 8007a4e:	3401      	adds	r4, #1
 8007a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a52:	e7c9      	b.n	80079e8 <_dtoa_r+0xa54>
 8007a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a58:	701c      	strb	r4, [r3, #0]
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	1aeb      	subs	r3, r5, r3
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d03e      	beq.n	8007ae0 <_dtoa_r+0xb4c>
 8007a62:	2300      	movs	r3, #0
 8007a64:	220a      	movs	r2, #10
 8007a66:	9903      	ldr	r1, [sp, #12]
 8007a68:	9802      	ldr	r0, [sp, #8]
 8007a6a:	f000 f8e3 	bl	8007c34 <__multadd>
 8007a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a70:	9003      	str	r0, [sp, #12]
 8007a72:	42b3      	cmp	r3, r6
 8007a74:	d109      	bne.n	8007a8a <_dtoa_r+0xaf6>
 8007a76:	2300      	movs	r3, #0
 8007a78:	220a      	movs	r2, #10
 8007a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a7c:	9802      	ldr	r0, [sp, #8]
 8007a7e:	f000 f8d9 	bl	8007c34 <__multadd>
 8007a82:	9009      	str	r0, [sp, #36]	; 0x24
 8007a84:	0006      	movs	r6, r0
 8007a86:	950a      	str	r5, [sp, #40]	; 0x28
 8007a88:	e77d      	b.n	8007986 <_dtoa_r+0x9f2>
 8007a8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	220a      	movs	r2, #10
 8007a90:	9802      	ldr	r0, [sp, #8]
 8007a92:	f000 f8cf 	bl	8007c34 <__multadd>
 8007a96:	2300      	movs	r3, #0
 8007a98:	9009      	str	r0, [sp, #36]	; 0x24
 8007a9a:	220a      	movs	r2, #10
 8007a9c:	0031      	movs	r1, r6
 8007a9e:	9802      	ldr	r0, [sp, #8]
 8007aa0:	f000 f8c8 	bl	8007c34 <__multadd>
 8007aa4:	e7ee      	b.n	8007a84 <_dtoa_r+0xaf0>
 8007aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa8:	930c      	str	r3, [sp, #48]	; 0x30
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	9306      	str	r3, [sp, #24]
 8007aae:	9904      	ldr	r1, [sp, #16]
 8007ab0:	9803      	ldr	r0, [sp, #12]
 8007ab2:	f7ff f9e8 	bl	8006e86 <quorem>
 8007ab6:	9b06      	ldr	r3, [sp, #24]
 8007ab8:	3030      	adds	r0, #48	; 0x30
 8007aba:	1c5d      	adds	r5, r3, #1
 8007abc:	7018      	strb	r0, [r3, #0]
 8007abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ac0:	9b08      	ldr	r3, [sp, #32]
 8007ac2:	0004      	movs	r4, r0
 8007ac4:	1aeb      	subs	r3, r5, r3
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	dd08      	ble.n	8007adc <_dtoa_r+0xb48>
 8007aca:	2300      	movs	r3, #0
 8007acc:	220a      	movs	r2, #10
 8007ace:	9903      	ldr	r1, [sp, #12]
 8007ad0:	9802      	ldr	r0, [sp, #8]
 8007ad2:	f000 f8af 	bl	8007c34 <__multadd>
 8007ad6:	9506      	str	r5, [sp, #24]
 8007ad8:	9003      	str	r0, [sp, #12]
 8007ada:	e7e8      	b.n	8007aae <_dtoa_r+0xb1a>
 8007adc:	2300      	movs	r3, #0
 8007ade:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae0:	9903      	ldr	r1, [sp, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	9802      	ldr	r0, [sp, #8]
 8007ae6:	f000 fa17 	bl	8007f18 <__lshift>
 8007aea:	9904      	ldr	r1, [sp, #16]
 8007aec:	9003      	str	r0, [sp, #12]
 8007aee:	f000 fa65 	bl	8007fbc <__mcmp>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	dc9d      	bgt.n	8007a32 <_dtoa_r+0xa9e>
 8007af6:	d101      	bne.n	8007afc <_dtoa_r+0xb68>
 8007af8:	07e3      	lsls	r3, r4, #31
 8007afa:	d49a      	bmi.n	8007a32 <_dtoa_r+0xa9e>
 8007afc:	1e6b      	subs	r3, r5, #1
 8007afe:	781a      	ldrb	r2, [r3, #0]
 8007b00:	2a30      	cmp	r2, #48	; 0x30
 8007b02:	d000      	beq.n	8007b06 <_dtoa_r+0xb72>
 8007b04:	e6f4      	b.n	80078f0 <_dtoa_r+0x95c>
 8007b06:	001d      	movs	r5, r3
 8007b08:	e7f8      	b.n	8007afc <_dtoa_r+0xb68>
 8007b0a:	9a08      	ldr	r2, [sp, #32]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d103      	bne.n	8007b18 <_dtoa_r+0xb84>
 8007b10:	2331      	movs	r3, #49	; 0x31
 8007b12:	3701      	adds	r7, #1
 8007b14:	7013      	strb	r3, [r2, #0]
 8007b16:	e6eb      	b.n	80078f0 <_dtoa_r+0x95c>
 8007b18:	001d      	movs	r5, r3
 8007b1a:	e78a      	b.n	8007a32 <_dtoa_r+0xa9e>
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <_dtoa_r+0xbb8>)
 8007b1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b20:	9308      	str	r3, [sp, #32]
 8007b22:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <_dtoa_r+0xbbc>)
 8007b24:	2a00      	cmp	r2, #0
 8007b26:	d001      	beq.n	8007b2c <_dtoa_r+0xb98>
 8007b28:	f7ff fa77 	bl	800701a <_dtoa_r+0x86>
 8007b2c:	f7ff fa77 	bl	800701e <_dtoa_r+0x8a>
 8007b30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	dc00      	bgt.n	8007b38 <_dtoa_r+0xba4>
 8007b36:	e621      	b.n	800777c <_dtoa_r+0x7e8>
 8007b38:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007b3a:	2001      	movs	r0, #1
 8007b3c:	e635      	b.n	80077aa <_dtoa_r+0x816>
 8007b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	dcb2      	bgt.n	8007aaa <_dtoa_r+0xb16>
 8007b44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	ddaf      	ble.n	8007aaa <_dtoa_r+0xb16>
 8007b4a:	e6bc      	b.n	80078c6 <_dtoa_r+0x932>
 8007b4c:	080090e6 	.word	0x080090e6
 8007b50:	080090ee 	.word	0x080090ee

08007b54 <_localeconv_r>:
 8007b54:	4b03      	ldr	r3, [pc, #12]	; (8007b64 <_localeconv_r+0x10>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6a18      	ldr	r0, [r3, #32]
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d100      	bne.n	8007b60 <_localeconv_r+0xc>
 8007b5e:	4802      	ldr	r0, [pc, #8]	; (8007b68 <_localeconv_r+0x14>)
 8007b60:	30f0      	adds	r0, #240	; 0xf0
 8007b62:	4770      	bx	lr
 8007b64:	20000014 	.word	0x20000014
 8007b68:	20000078 	.word	0x20000078

08007b6c <malloc>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	4b03      	ldr	r3, [pc, #12]	; (8007b7c <malloc+0x10>)
 8007b70:	0001      	movs	r1, r0
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	f000 fb02 	bl	800817c <_malloc_r>
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	20000014 	.word	0x20000014

08007b80 <memcpy>:
 8007b80:	2300      	movs	r3, #0
 8007b82:	b510      	push	{r4, lr}
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d100      	bne.n	8007b8a <memcpy+0xa>
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	5ccc      	ldrb	r4, [r1, r3]
 8007b8c:	54c4      	strb	r4, [r0, r3]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	e7f8      	b.n	8007b84 <memcpy+0x4>

08007b92 <_Balloc>:
 8007b92:	b570      	push	{r4, r5, r6, lr}
 8007b94:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b96:	0004      	movs	r4, r0
 8007b98:	000d      	movs	r5, r1
 8007b9a:	2e00      	cmp	r6, #0
 8007b9c:	d107      	bne.n	8007bae <_Balloc+0x1c>
 8007b9e:	2010      	movs	r0, #16
 8007ba0:	f7ff ffe4 	bl	8007b6c <malloc>
 8007ba4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ba6:	6046      	str	r6, [r0, #4]
 8007ba8:	6086      	str	r6, [r0, #8]
 8007baa:	6006      	str	r6, [r0, #0]
 8007bac:	60c6      	str	r6, [r0, #12]
 8007bae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007bb0:	68f3      	ldr	r3, [r6, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d013      	beq.n	8007bde <_Balloc+0x4c>
 8007bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bb8:	00aa      	lsls	r2, r5, #2
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	189b      	adds	r3, r3, r2
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d118      	bne.n	8007bf6 <_Balloc+0x64>
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	000e      	movs	r6, r1
 8007bc8:	40ae      	lsls	r6, r5
 8007bca:	1d72      	adds	r2, r6, #5
 8007bcc:	0092      	lsls	r2, r2, #2
 8007bce:	0020      	movs	r0, r4
 8007bd0:	f000 fac6 	bl	8008160 <_calloc_r>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d00c      	beq.n	8007bf2 <_Balloc+0x60>
 8007bd8:	6045      	str	r5, [r0, #4]
 8007bda:	6086      	str	r6, [r0, #8]
 8007bdc:	e00d      	b.n	8007bfa <_Balloc+0x68>
 8007bde:	2221      	movs	r2, #33	; 0x21
 8007be0:	2104      	movs	r1, #4
 8007be2:	0020      	movs	r0, r4
 8007be4:	f000 fabc 	bl	8008160 <_calloc_r>
 8007be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bea:	60f0      	str	r0, [r6, #12]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e1      	bne.n	8007bb6 <_Balloc+0x24>
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	bd70      	pop	{r4, r5, r6, pc}
 8007bf6:	6802      	ldr	r2, [r0, #0]
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6103      	str	r3, [r0, #16]
 8007bfe:	60c3      	str	r3, [r0, #12]
 8007c00:	e7f8      	b.n	8007bf4 <_Balloc+0x62>

08007c02 <_Bfree>:
 8007c02:	b570      	push	{r4, r5, r6, lr}
 8007c04:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c06:	0006      	movs	r6, r0
 8007c08:	000d      	movs	r5, r1
 8007c0a:	2c00      	cmp	r4, #0
 8007c0c:	d107      	bne.n	8007c1e <_Bfree+0x1c>
 8007c0e:	2010      	movs	r0, #16
 8007c10:	f7ff ffac 	bl	8007b6c <malloc>
 8007c14:	6270      	str	r0, [r6, #36]	; 0x24
 8007c16:	6044      	str	r4, [r0, #4]
 8007c18:	6084      	str	r4, [r0, #8]
 8007c1a:	6004      	str	r4, [r0, #0]
 8007c1c:	60c4      	str	r4, [r0, #12]
 8007c1e:	2d00      	cmp	r5, #0
 8007c20:	d007      	beq.n	8007c32 <_Bfree+0x30>
 8007c22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c24:	686a      	ldr	r2, [r5, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	0092      	lsls	r2, r2, #2
 8007c2a:	189b      	adds	r3, r3, r2
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	602a      	str	r2, [r5, #0]
 8007c30:	601d      	str	r5, [r3, #0]
 8007c32:	bd70      	pop	{r4, r5, r6, pc}

08007c34 <__multadd>:
 8007c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c36:	001e      	movs	r6, r3
 8007c38:	2314      	movs	r3, #20
 8007c3a:	469c      	mov	ip, r3
 8007c3c:	0007      	movs	r7, r0
 8007c3e:	000c      	movs	r4, r1
 8007c40:	2000      	movs	r0, #0
 8007c42:	690d      	ldr	r5, [r1, #16]
 8007c44:	448c      	add	ip, r1
 8007c46:	4663      	mov	r3, ip
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	b299      	uxth	r1, r3
 8007c4e:	4663      	mov	r3, ip
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4351      	muls	r1, r2
 8007c54:	0c1b      	lsrs	r3, r3, #16
 8007c56:	4353      	muls	r3, r2
 8007c58:	1989      	adds	r1, r1, r6
 8007c5a:	0c0e      	lsrs	r6, r1, #16
 8007c5c:	199b      	adds	r3, r3, r6
 8007c5e:	b289      	uxth	r1, r1
 8007c60:	0c1e      	lsrs	r6, r3, #16
 8007c62:	041b      	lsls	r3, r3, #16
 8007c64:	185b      	adds	r3, r3, r1
 8007c66:	4661      	mov	r1, ip
 8007c68:	c108      	stmia	r1!, {r3}
 8007c6a:	468c      	mov	ip, r1
 8007c6c:	4285      	cmp	r5, r0
 8007c6e:	dcea      	bgt.n	8007c46 <__multadd+0x12>
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	d01b      	beq.n	8007cac <__multadd+0x78>
 8007c74:	68a3      	ldr	r3, [r4, #8]
 8007c76:	42ab      	cmp	r3, r5
 8007c78:	dc12      	bgt.n	8007ca0 <__multadd+0x6c>
 8007c7a:	6863      	ldr	r3, [r4, #4]
 8007c7c:	0038      	movs	r0, r7
 8007c7e:	1c59      	adds	r1, r3, #1
 8007c80:	f7ff ff87 	bl	8007b92 <_Balloc>
 8007c84:	0021      	movs	r1, r4
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	9001      	str	r0, [sp, #4]
 8007c8a:	1c9a      	adds	r2, r3, #2
 8007c8c:	0092      	lsls	r2, r2, #2
 8007c8e:	310c      	adds	r1, #12
 8007c90:	300c      	adds	r0, #12
 8007c92:	f7ff ff75 	bl	8007b80 <memcpy>
 8007c96:	0021      	movs	r1, r4
 8007c98:	0038      	movs	r0, r7
 8007c9a:	f7ff ffb2 	bl	8007c02 <_Bfree>
 8007c9e:	9c01      	ldr	r4, [sp, #4]
 8007ca0:	1d2b      	adds	r3, r5, #4
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	18e3      	adds	r3, r4, r3
 8007ca6:	3501      	adds	r5, #1
 8007ca8:	605e      	str	r6, [r3, #4]
 8007caa:	6125      	str	r5, [r4, #16]
 8007cac:	0020      	movs	r0, r4
 8007cae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08007cb0 <__hi0bits>:
 8007cb0:	0003      	movs	r3, r0
 8007cb2:	0c02      	lsrs	r2, r0, #16
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	4282      	cmp	r2, r0
 8007cb8:	d101      	bne.n	8007cbe <__hi0bits+0xe>
 8007cba:	041b      	lsls	r3, r3, #16
 8007cbc:	3010      	adds	r0, #16
 8007cbe:	0e1a      	lsrs	r2, r3, #24
 8007cc0:	d101      	bne.n	8007cc6 <__hi0bits+0x16>
 8007cc2:	3008      	adds	r0, #8
 8007cc4:	021b      	lsls	r3, r3, #8
 8007cc6:	0f1a      	lsrs	r2, r3, #28
 8007cc8:	d101      	bne.n	8007cce <__hi0bits+0x1e>
 8007cca:	3004      	adds	r0, #4
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	0f9a      	lsrs	r2, r3, #30
 8007cd0:	d101      	bne.n	8007cd6 <__hi0bits+0x26>
 8007cd2:	3002      	adds	r0, #2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	db03      	blt.n	8007ce2 <__hi0bits+0x32>
 8007cda:	3001      	adds	r0, #1
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	d400      	bmi.n	8007ce2 <__hi0bits+0x32>
 8007ce0:	2020      	movs	r0, #32
 8007ce2:	4770      	bx	lr

08007ce4 <__lo0bits>:
 8007ce4:	2207      	movs	r2, #7
 8007ce6:	6803      	ldr	r3, [r0, #0]
 8007ce8:	b510      	push	{r4, lr}
 8007cea:	0001      	movs	r1, r0
 8007cec:	401a      	ands	r2, r3
 8007cee:	d00d      	beq.n	8007d0c <__lo0bits+0x28>
 8007cf0:	2401      	movs	r4, #1
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	4223      	tst	r3, r4
 8007cf6:	d105      	bne.n	8007d04 <__lo0bits+0x20>
 8007cf8:	3002      	adds	r0, #2
 8007cfa:	4203      	tst	r3, r0
 8007cfc:	d003      	beq.n	8007d06 <__lo0bits+0x22>
 8007cfe:	40e3      	lsrs	r3, r4
 8007d00:	0020      	movs	r0, r4
 8007d02:	600b      	str	r3, [r1, #0]
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	089b      	lsrs	r3, r3, #2
 8007d08:	600b      	str	r3, [r1, #0]
 8007d0a:	e7fb      	b.n	8007d04 <__lo0bits+0x20>
 8007d0c:	b29c      	uxth	r4, r3
 8007d0e:	0010      	movs	r0, r2
 8007d10:	2c00      	cmp	r4, #0
 8007d12:	d101      	bne.n	8007d18 <__lo0bits+0x34>
 8007d14:	2010      	movs	r0, #16
 8007d16:	0c1b      	lsrs	r3, r3, #16
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	2a00      	cmp	r2, #0
 8007d1c:	d101      	bne.n	8007d22 <__lo0bits+0x3e>
 8007d1e:	3008      	adds	r0, #8
 8007d20:	0a1b      	lsrs	r3, r3, #8
 8007d22:	071a      	lsls	r2, r3, #28
 8007d24:	d101      	bne.n	8007d2a <__lo0bits+0x46>
 8007d26:	3004      	adds	r0, #4
 8007d28:	091b      	lsrs	r3, r3, #4
 8007d2a:	079a      	lsls	r2, r3, #30
 8007d2c:	d101      	bne.n	8007d32 <__lo0bits+0x4e>
 8007d2e:	3002      	adds	r0, #2
 8007d30:	089b      	lsrs	r3, r3, #2
 8007d32:	07da      	lsls	r2, r3, #31
 8007d34:	d4e8      	bmi.n	8007d08 <__lo0bits+0x24>
 8007d36:	085b      	lsrs	r3, r3, #1
 8007d38:	d001      	beq.n	8007d3e <__lo0bits+0x5a>
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	e7e4      	b.n	8007d08 <__lo0bits+0x24>
 8007d3e:	2020      	movs	r0, #32
 8007d40:	e7e0      	b.n	8007d04 <__lo0bits+0x20>

08007d42 <__i2b>:
 8007d42:	b510      	push	{r4, lr}
 8007d44:	000c      	movs	r4, r1
 8007d46:	2101      	movs	r1, #1
 8007d48:	f7ff ff23 	bl	8007b92 <_Balloc>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	6144      	str	r4, [r0, #20]
 8007d50:	6103      	str	r3, [r0, #16]
 8007d52:	bd10      	pop	{r4, pc}

08007d54 <__multiply>:
 8007d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d56:	690b      	ldr	r3, [r1, #16]
 8007d58:	0014      	movs	r4, r2
 8007d5a:	6912      	ldr	r2, [r2, #16]
 8007d5c:	b089      	sub	sp, #36	; 0x24
 8007d5e:	000d      	movs	r5, r1
 8007d60:	4293      	cmp	r3, r2
 8007d62:	da01      	bge.n	8007d68 <__multiply+0x14>
 8007d64:	0025      	movs	r5, r4
 8007d66:	000c      	movs	r4, r1
 8007d68:	692f      	ldr	r7, [r5, #16]
 8007d6a:	6926      	ldr	r6, [r4, #16]
 8007d6c:	6869      	ldr	r1, [r5, #4]
 8007d6e:	19bb      	adds	r3, r7, r6
 8007d70:	9302      	str	r3, [sp, #8]
 8007d72:	68ab      	ldr	r3, [r5, #8]
 8007d74:	19ba      	adds	r2, r7, r6
 8007d76:	4293      	cmp	r3, r2
 8007d78:	da00      	bge.n	8007d7c <__multiply+0x28>
 8007d7a:	3101      	adds	r1, #1
 8007d7c:	f7ff ff09 	bl	8007b92 <_Balloc>
 8007d80:	0002      	movs	r2, r0
 8007d82:	19bb      	adds	r3, r7, r6
 8007d84:	3214      	adds	r2, #20
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	18d3      	adds	r3, r2, r3
 8007d8a:	469c      	mov	ip, r3
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	0013      	movs	r3, r2
 8007d90:	9004      	str	r0, [sp, #16]
 8007d92:	4563      	cmp	r3, ip
 8007d94:	d31d      	bcc.n	8007dd2 <__multiply+0x7e>
 8007d96:	3514      	adds	r5, #20
 8007d98:	00bf      	lsls	r7, r7, #2
 8007d9a:	19eb      	adds	r3, r5, r7
 8007d9c:	3414      	adds	r4, #20
 8007d9e:	00b6      	lsls	r6, r6, #2
 8007da0:	9305      	str	r3, [sp, #20]
 8007da2:	19a3      	adds	r3, r4, r6
 8007da4:	9503      	str	r5, [sp, #12]
 8007da6:	9401      	str	r4, [sp, #4]
 8007da8:	9307      	str	r3, [sp, #28]
 8007daa:	9b07      	ldr	r3, [sp, #28]
 8007dac:	9901      	ldr	r1, [sp, #4]
 8007dae:	4299      	cmp	r1, r3
 8007db0:	d311      	bcc.n	8007dd6 <__multiply+0x82>
 8007db2:	9b02      	ldr	r3, [sp, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	dd06      	ble.n	8007dc6 <__multiply+0x72>
 8007db8:	2304      	movs	r3, #4
 8007dba:	425b      	negs	r3, r3
 8007dbc:	449c      	add	ip, r3
 8007dbe:	4663      	mov	r3, ip
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d051      	beq.n	8007e6a <__multiply+0x116>
 8007dc6:	9b04      	ldr	r3, [sp, #16]
 8007dc8:	9a02      	ldr	r2, [sp, #8]
 8007dca:	0018      	movs	r0, r3
 8007dcc:	611a      	str	r2, [r3, #16]
 8007dce:	b009      	add	sp, #36	; 0x24
 8007dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd2:	c302      	stmia	r3!, {r1}
 8007dd4:	e7dd      	b.n	8007d92 <__multiply+0x3e>
 8007dd6:	9b01      	ldr	r3, [sp, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	b298      	uxth	r0, r3
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d01c      	beq.n	8007e1a <__multiply+0xc6>
 8007de0:	0015      	movs	r5, r2
 8007de2:	2600      	movs	r6, #0
 8007de4:	9f03      	ldr	r7, [sp, #12]
 8007de6:	cf02      	ldmia	r7!, {r1}
 8007de8:	682c      	ldr	r4, [r5, #0]
 8007dea:	b28b      	uxth	r3, r1
 8007dec:	4343      	muls	r3, r0
 8007dee:	0c09      	lsrs	r1, r1, #16
 8007df0:	4341      	muls	r1, r0
 8007df2:	b2a4      	uxth	r4, r4
 8007df4:	191b      	adds	r3, r3, r4
 8007df6:	199b      	adds	r3, r3, r6
 8007df8:	000e      	movs	r6, r1
 8007dfa:	6829      	ldr	r1, [r5, #0]
 8007dfc:	9506      	str	r5, [sp, #24]
 8007dfe:	0c09      	lsrs	r1, r1, #16
 8007e00:	1871      	adds	r1, r6, r1
 8007e02:	0c1e      	lsrs	r6, r3, #16
 8007e04:	1989      	adds	r1, r1, r6
 8007e06:	0c0e      	lsrs	r6, r1, #16
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	0409      	lsls	r1, r1, #16
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	c508      	stmia	r5!, {r3}
 8007e10:	9b05      	ldr	r3, [sp, #20]
 8007e12:	42bb      	cmp	r3, r7
 8007e14:	d8e7      	bhi.n	8007de6 <__multiply+0x92>
 8007e16:	9b06      	ldr	r3, [sp, #24]
 8007e18:	605e      	str	r6, [r3, #4]
 8007e1a:	9b01      	ldr	r3, [sp, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	0c1d      	lsrs	r5, r3, #16
 8007e20:	d01e      	beq.n	8007e60 <__multiply+0x10c>
 8007e22:	0010      	movs	r0, r2
 8007e24:	2700      	movs	r7, #0
 8007e26:	6813      	ldr	r3, [r2, #0]
 8007e28:	9e03      	ldr	r6, [sp, #12]
 8007e2a:	6831      	ldr	r1, [r6, #0]
 8007e2c:	6804      	ldr	r4, [r0, #0]
 8007e2e:	b289      	uxth	r1, r1
 8007e30:	4369      	muls	r1, r5
 8007e32:	0c24      	lsrs	r4, r4, #16
 8007e34:	1909      	adds	r1, r1, r4
 8007e36:	19c9      	adds	r1, r1, r7
 8007e38:	040f      	lsls	r7, r1, #16
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	433b      	orrs	r3, r7
 8007e3e:	6003      	str	r3, [r0, #0]
 8007e40:	ce80      	ldmia	r6!, {r7}
 8007e42:	6843      	ldr	r3, [r0, #4]
 8007e44:	0c3f      	lsrs	r7, r7, #16
 8007e46:	436f      	muls	r7, r5
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	18fb      	adds	r3, r7, r3
 8007e4c:	0c09      	lsrs	r1, r1, #16
 8007e4e:	185b      	adds	r3, r3, r1
 8007e50:	9905      	ldr	r1, [sp, #20]
 8007e52:	9006      	str	r0, [sp, #24]
 8007e54:	0c1f      	lsrs	r7, r3, #16
 8007e56:	3004      	adds	r0, #4
 8007e58:	42b1      	cmp	r1, r6
 8007e5a:	d8e6      	bhi.n	8007e2a <__multiply+0xd6>
 8007e5c:	9906      	ldr	r1, [sp, #24]
 8007e5e:	604b      	str	r3, [r1, #4]
 8007e60:	9b01      	ldr	r3, [sp, #4]
 8007e62:	3204      	adds	r2, #4
 8007e64:	3304      	adds	r3, #4
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	e79f      	b.n	8007daa <__multiply+0x56>
 8007e6a:	9b02      	ldr	r3, [sp, #8]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	9302      	str	r3, [sp, #8]
 8007e70:	e79f      	b.n	8007db2 <__multiply+0x5e>
	...

08007e74 <__pow5mult>:
 8007e74:	2303      	movs	r3, #3
 8007e76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e78:	4013      	ands	r3, r2
 8007e7a:	0005      	movs	r5, r0
 8007e7c:	000e      	movs	r6, r1
 8007e7e:	0014      	movs	r4, r2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d008      	beq.n	8007e96 <__pow5mult+0x22>
 8007e84:	4922      	ldr	r1, [pc, #136]	; (8007f10 <__pow5mult+0x9c>)
 8007e86:	3b01      	subs	r3, #1
 8007e88:	009a      	lsls	r2, r3, #2
 8007e8a:	5852      	ldr	r2, [r2, r1]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	0031      	movs	r1, r6
 8007e90:	f7ff fed0 	bl	8007c34 <__multadd>
 8007e94:	0006      	movs	r6, r0
 8007e96:	10a3      	asrs	r3, r4, #2
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	d036      	beq.n	8007f0a <__pow5mult+0x96>
 8007e9c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8007e9e:	2c00      	cmp	r4, #0
 8007ea0:	d107      	bne.n	8007eb2 <__pow5mult+0x3e>
 8007ea2:	2010      	movs	r0, #16
 8007ea4:	f7ff fe62 	bl	8007b6c <malloc>
 8007ea8:	6268      	str	r0, [r5, #36]	; 0x24
 8007eaa:	6044      	str	r4, [r0, #4]
 8007eac:	6084      	str	r4, [r0, #8]
 8007eae:	6004      	str	r4, [r0, #0]
 8007eb0:	60c4      	str	r4, [r0, #12]
 8007eb2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8007eb4:	68bc      	ldr	r4, [r7, #8]
 8007eb6:	2c00      	cmp	r4, #0
 8007eb8:	d107      	bne.n	8007eca <__pow5mult+0x56>
 8007eba:	4916      	ldr	r1, [pc, #88]	; (8007f14 <__pow5mult+0xa0>)
 8007ebc:	0028      	movs	r0, r5
 8007ebe:	f7ff ff40 	bl	8007d42 <__i2b>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	0004      	movs	r4, r0
 8007ec6:	60b8      	str	r0, [r7, #8]
 8007ec8:	6003      	str	r3, [r0, #0]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	9b01      	ldr	r3, [sp, #4]
 8007ece:	4213      	tst	r3, r2
 8007ed0:	d00a      	beq.n	8007ee8 <__pow5mult+0x74>
 8007ed2:	0031      	movs	r1, r6
 8007ed4:	0022      	movs	r2, r4
 8007ed6:	0028      	movs	r0, r5
 8007ed8:	f7ff ff3c 	bl	8007d54 <__multiply>
 8007edc:	0007      	movs	r7, r0
 8007ede:	0031      	movs	r1, r6
 8007ee0:	0028      	movs	r0, r5
 8007ee2:	f7ff fe8e 	bl	8007c02 <_Bfree>
 8007ee6:	003e      	movs	r6, r7
 8007ee8:	9b01      	ldr	r3, [sp, #4]
 8007eea:	105b      	asrs	r3, r3, #1
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	d00c      	beq.n	8007f0a <__pow5mult+0x96>
 8007ef0:	6820      	ldr	r0, [r4, #0]
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d107      	bne.n	8007f06 <__pow5mult+0x92>
 8007ef6:	0022      	movs	r2, r4
 8007ef8:	0021      	movs	r1, r4
 8007efa:	0028      	movs	r0, r5
 8007efc:	f7ff ff2a 	bl	8007d54 <__multiply>
 8007f00:	2300      	movs	r3, #0
 8007f02:	6020      	str	r0, [r4, #0]
 8007f04:	6003      	str	r3, [r0, #0]
 8007f06:	0004      	movs	r4, r0
 8007f08:	e7df      	b.n	8007eca <__pow5mult+0x56>
 8007f0a:	0030      	movs	r0, r6
 8007f0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f0e:	46c0      	nop			; (mov r8, r8)
 8007f10:	080091e8 	.word	0x080091e8
 8007f14:	00000271 	.word	0x00000271

08007f18 <__lshift>:
 8007f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f1a:	000d      	movs	r5, r1
 8007f1c:	0017      	movs	r7, r2
 8007f1e:	692b      	ldr	r3, [r5, #16]
 8007f20:	1154      	asrs	r4, r2, #5
 8007f22:	b085      	sub	sp, #20
 8007f24:	18e3      	adds	r3, r4, r3
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	6849      	ldr	r1, [r1, #4]
 8007f2e:	68ab      	ldr	r3, [r5, #8]
 8007f30:	9002      	str	r0, [sp, #8]
 8007f32:	9a00      	ldr	r2, [sp, #0]
 8007f34:	4293      	cmp	r3, r2
 8007f36:	db35      	blt.n	8007fa4 <__lshift+0x8c>
 8007f38:	9802      	ldr	r0, [sp, #8]
 8007f3a:	f7ff fe2a 	bl	8007b92 <_Balloc>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	0002      	movs	r2, r0
 8007f42:	0006      	movs	r6, r0
 8007f44:	0019      	movs	r1, r3
 8007f46:	3214      	adds	r2, #20
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	db2e      	blt.n	8007faa <__lshift+0x92>
 8007f4c:	43e3      	mvns	r3, r4
 8007f4e:	17db      	asrs	r3, r3, #31
 8007f50:	401c      	ands	r4, r3
 8007f52:	002b      	movs	r3, r5
 8007f54:	00a4      	lsls	r4, r4, #2
 8007f56:	1914      	adds	r4, r2, r4
 8007f58:	692a      	ldr	r2, [r5, #16]
 8007f5a:	3314      	adds	r3, #20
 8007f5c:	0092      	lsls	r2, r2, #2
 8007f5e:	189a      	adds	r2, r3, r2
 8007f60:	4694      	mov	ip, r2
 8007f62:	221f      	movs	r2, #31
 8007f64:	4017      	ands	r7, r2
 8007f66:	d024      	beq.n	8007fb2 <__lshift+0x9a>
 8007f68:	3201      	adds	r2, #1
 8007f6a:	1bd2      	subs	r2, r2, r7
 8007f6c:	9203      	str	r2, [sp, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	6819      	ldr	r1, [r3, #0]
 8007f72:	0020      	movs	r0, r4
 8007f74:	40b9      	lsls	r1, r7
 8007f76:	430a      	orrs	r2, r1
 8007f78:	c404      	stmia	r4!, {r2}
 8007f7a:	cb04      	ldmia	r3!, {r2}
 8007f7c:	9903      	ldr	r1, [sp, #12]
 8007f7e:	40ca      	lsrs	r2, r1
 8007f80:	459c      	cmp	ip, r3
 8007f82:	d8f5      	bhi.n	8007f70 <__lshift+0x58>
 8007f84:	6042      	str	r2, [r0, #4]
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	d002      	beq.n	8007f90 <__lshift+0x78>
 8007f8a:	9b01      	ldr	r3, [sp, #4]
 8007f8c:	3302      	adds	r3, #2
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	9b00      	ldr	r3, [sp, #0]
 8007f92:	9802      	ldr	r0, [sp, #8]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	6133      	str	r3, [r6, #16]
 8007f98:	0029      	movs	r1, r5
 8007f9a:	f7ff fe32 	bl	8007c02 <_Bfree>
 8007f9e:	0030      	movs	r0, r6
 8007fa0:	b005      	add	sp, #20
 8007fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa4:	3101      	adds	r1, #1
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	e7c3      	b.n	8007f32 <__lshift+0x1a>
 8007faa:	0098      	lsls	r0, r3, #2
 8007fac:	5011      	str	r1, [r2, r0]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	e7ca      	b.n	8007f48 <__lshift+0x30>
 8007fb2:	cb04      	ldmia	r3!, {r2}
 8007fb4:	c404      	stmia	r4!, {r2}
 8007fb6:	459c      	cmp	ip, r3
 8007fb8:	d8fb      	bhi.n	8007fb2 <__lshift+0x9a>
 8007fba:	e7e9      	b.n	8007f90 <__lshift+0x78>

08007fbc <__mcmp>:
 8007fbc:	690a      	ldr	r2, [r1, #16]
 8007fbe:	6903      	ldr	r3, [r0, #16]
 8007fc0:	b530      	push	{r4, r5, lr}
 8007fc2:	1a9b      	subs	r3, r3, r2
 8007fc4:	d10d      	bne.n	8007fe2 <__mcmp+0x26>
 8007fc6:	0092      	lsls	r2, r2, #2
 8007fc8:	3014      	adds	r0, #20
 8007fca:	3114      	adds	r1, #20
 8007fcc:	1884      	adds	r4, r0, r2
 8007fce:	1889      	adds	r1, r1, r2
 8007fd0:	3c04      	subs	r4, #4
 8007fd2:	3904      	subs	r1, #4
 8007fd4:	6825      	ldr	r5, [r4, #0]
 8007fd6:	680a      	ldr	r2, [r1, #0]
 8007fd8:	4295      	cmp	r5, r2
 8007fda:	d004      	beq.n	8007fe6 <__mcmp+0x2a>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	4295      	cmp	r5, r2
 8007fe0:	d304      	bcc.n	8007fec <__mcmp+0x30>
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	bd30      	pop	{r4, r5, pc}
 8007fe6:	42a0      	cmp	r0, r4
 8007fe8:	d3f2      	bcc.n	8007fd0 <__mcmp+0x14>
 8007fea:	e7fa      	b.n	8007fe2 <__mcmp+0x26>
 8007fec:	425b      	negs	r3, r3
 8007fee:	e7f8      	b.n	8007fe2 <__mcmp+0x26>

08007ff0 <__mdiff>:
 8007ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ff2:	000d      	movs	r5, r1
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	0007      	movs	r7, r0
 8007ff8:	0011      	movs	r1, r2
 8007ffa:	0028      	movs	r0, r5
 8007ffc:	0014      	movs	r4, r2
 8007ffe:	f7ff ffdd 	bl	8007fbc <__mcmp>
 8008002:	1e06      	subs	r6, r0, #0
 8008004:	d108      	bne.n	8008018 <__mdiff+0x28>
 8008006:	0001      	movs	r1, r0
 8008008:	0038      	movs	r0, r7
 800800a:	f7ff fdc2 	bl	8007b92 <_Balloc>
 800800e:	2301      	movs	r3, #1
 8008010:	6146      	str	r6, [r0, #20]
 8008012:	6103      	str	r3, [r0, #16]
 8008014:	b005      	add	sp, #20
 8008016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008018:	2301      	movs	r3, #1
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	2800      	cmp	r0, #0
 800801e:	db04      	blt.n	800802a <__mdiff+0x3a>
 8008020:	0023      	movs	r3, r4
 8008022:	002c      	movs	r4, r5
 8008024:	001d      	movs	r5, r3
 8008026:	2300      	movs	r3, #0
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	6861      	ldr	r1, [r4, #4]
 800802c:	0038      	movs	r0, r7
 800802e:	f7ff fdb0 	bl	8007b92 <_Balloc>
 8008032:	002f      	movs	r7, r5
 8008034:	2200      	movs	r2, #0
 8008036:	9b01      	ldr	r3, [sp, #4]
 8008038:	6926      	ldr	r6, [r4, #16]
 800803a:	60c3      	str	r3, [r0, #12]
 800803c:	3414      	adds	r4, #20
 800803e:	00b3      	lsls	r3, r6, #2
 8008040:	18e3      	adds	r3, r4, r3
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	692b      	ldr	r3, [r5, #16]
 8008046:	3714      	adds	r7, #20
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	9303      	str	r3, [sp, #12]
 800804e:	0003      	movs	r3, r0
 8008050:	4694      	mov	ip, r2
 8008052:	3314      	adds	r3, #20
 8008054:	cc20      	ldmia	r4!, {r5}
 8008056:	cf04      	ldmia	r7!, {r2}
 8008058:	9201      	str	r2, [sp, #4]
 800805a:	b2aa      	uxth	r2, r5
 800805c:	4494      	add	ip, r2
 800805e:	466a      	mov	r2, sp
 8008060:	4661      	mov	r1, ip
 8008062:	8892      	ldrh	r2, [r2, #4]
 8008064:	0c2d      	lsrs	r5, r5, #16
 8008066:	1a8a      	subs	r2, r1, r2
 8008068:	9901      	ldr	r1, [sp, #4]
 800806a:	0c09      	lsrs	r1, r1, #16
 800806c:	1a69      	subs	r1, r5, r1
 800806e:	1415      	asrs	r5, r2, #16
 8008070:	1949      	adds	r1, r1, r5
 8008072:	140d      	asrs	r5, r1, #16
 8008074:	b292      	uxth	r2, r2
 8008076:	0409      	lsls	r1, r1, #16
 8008078:	430a      	orrs	r2, r1
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	9a03      	ldr	r2, [sp, #12]
 800807e:	46ac      	mov	ip, r5
 8008080:	3304      	adds	r3, #4
 8008082:	42ba      	cmp	r2, r7
 8008084:	d8e6      	bhi.n	8008054 <__mdiff+0x64>
 8008086:	9902      	ldr	r1, [sp, #8]
 8008088:	001a      	movs	r2, r3
 800808a:	428c      	cmp	r4, r1
 800808c:	d305      	bcc.n	800809a <__mdiff+0xaa>
 800808e:	3a04      	subs	r2, #4
 8008090:	6813      	ldr	r3, [r2, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00e      	beq.n	80080b4 <__mdiff+0xc4>
 8008096:	6106      	str	r6, [r0, #16]
 8008098:	e7bc      	b.n	8008014 <__mdiff+0x24>
 800809a:	cc04      	ldmia	r4!, {r2}
 800809c:	b291      	uxth	r1, r2
 800809e:	4461      	add	r1, ip
 80080a0:	140d      	asrs	r5, r1, #16
 80080a2:	0c12      	lsrs	r2, r2, #16
 80080a4:	1952      	adds	r2, r2, r5
 80080a6:	1415      	asrs	r5, r2, #16
 80080a8:	b289      	uxth	r1, r1
 80080aa:	0412      	lsls	r2, r2, #16
 80080ac:	430a      	orrs	r2, r1
 80080ae:	46ac      	mov	ip, r5
 80080b0:	c304      	stmia	r3!, {r2}
 80080b2:	e7e8      	b.n	8008086 <__mdiff+0x96>
 80080b4:	3e01      	subs	r6, #1
 80080b6:	e7ea      	b.n	800808e <__mdiff+0x9e>

080080b8 <__d2b>:
 80080b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080ba:	001d      	movs	r5, r3
 80080bc:	2101      	movs	r1, #1
 80080be:	0014      	movs	r4, r2
 80080c0:	9f08      	ldr	r7, [sp, #32]
 80080c2:	f7ff fd66 	bl	8007b92 <_Balloc>
 80080c6:	032b      	lsls	r3, r5, #12
 80080c8:	006d      	lsls	r5, r5, #1
 80080ca:	0006      	movs	r6, r0
 80080cc:	0b1b      	lsrs	r3, r3, #12
 80080ce:	0d6d      	lsrs	r5, r5, #21
 80080d0:	d124      	bne.n	800811c <__d2b+0x64>
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	2c00      	cmp	r4, #0
 80080d6:	d027      	beq.n	8008128 <__d2b+0x70>
 80080d8:	4668      	mov	r0, sp
 80080da:	9400      	str	r4, [sp, #0]
 80080dc:	f7ff fe02 	bl	8007ce4 <__lo0bits>
 80080e0:	9c00      	ldr	r4, [sp, #0]
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d01e      	beq.n	8008124 <__d2b+0x6c>
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	2120      	movs	r1, #32
 80080ea:	001a      	movs	r2, r3
 80080ec:	1a09      	subs	r1, r1, r0
 80080ee:	408a      	lsls	r2, r1
 80080f0:	40c3      	lsrs	r3, r0
 80080f2:	4322      	orrs	r2, r4
 80080f4:	6172      	str	r2, [r6, #20]
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	9c01      	ldr	r4, [sp, #4]
 80080fa:	61b4      	str	r4, [r6, #24]
 80080fc:	1e63      	subs	r3, r4, #1
 80080fe:	419c      	sbcs	r4, r3
 8008100:	3401      	adds	r4, #1
 8008102:	6134      	str	r4, [r6, #16]
 8008104:	2d00      	cmp	r5, #0
 8008106:	d018      	beq.n	800813a <__d2b+0x82>
 8008108:	4b12      	ldr	r3, [pc, #72]	; (8008154 <__d2b+0x9c>)
 800810a:	18ed      	adds	r5, r5, r3
 800810c:	2335      	movs	r3, #53	; 0x35
 800810e:	182d      	adds	r5, r5, r0
 8008110:	603d      	str	r5, [r7, #0]
 8008112:	1a18      	subs	r0, r3, r0
 8008114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008116:	6018      	str	r0, [r3, #0]
 8008118:	0030      	movs	r0, r6
 800811a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800811c:	2280      	movs	r2, #128	; 0x80
 800811e:	0352      	lsls	r2, r2, #13
 8008120:	4313      	orrs	r3, r2
 8008122:	e7d6      	b.n	80080d2 <__d2b+0x1a>
 8008124:	6174      	str	r4, [r6, #20]
 8008126:	e7e7      	b.n	80080f8 <__d2b+0x40>
 8008128:	a801      	add	r0, sp, #4
 800812a:	f7ff fddb 	bl	8007ce4 <__lo0bits>
 800812e:	2401      	movs	r4, #1
 8008130:	9b01      	ldr	r3, [sp, #4]
 8008132:	6134      	str	r4, [r6, #16]
 8008134:	6173      	str	r3, [r6, #20]
 8008136:	3020      	adds	r0, #32
 8008138:	e7e4      	b.n	8008104 <__d2b+0x4c>
 800813a:	4b07      	ldr	r3, [pc, #28]	; (8008158 <__d2b+0xa0>)
 800813c:	18c0      	adds	r0, r0, r3
 800813e:	4b07      	ldr	r3, [pc, #28]	; (800815c <__d2b+0xa4>)
 8008140:	6038      	str	r0, [r7, #0]
 8008142:	18e3      	adds	r3, r4, r3
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	18f3      	adds	r3, r6, r3
 8008148:	6958      	ldr	r0, [r3, #20]
 800814a:	f7ff fdb1 	bl	8007cb0 <__hi0bits>
 800814e:	0164      	lsls	r4, r4, #5
 8008150:	1a20      	subs	r0, r4, r0
 8008152:	e7df      	b.n	8008114 <__d2b+0x5c>
 8008154:	fffffbcd 	.word	0xfffffbcd
 8008158:	fffffbce 	.word	0xfffffbce
 800815c:	3fffffff 	.word	0x3fffffff

08008160 <_calloc_r>:
 8008160:	434a      	muls	r2, r1
 8008162:	b570      	push	{r4, r5, r6, lr}
 8008164:	0011      	movs	r1, r2
 8008166:	0014      	movs	r4, r2
 8008168:	f000 f808 	bl	800817c <_malloc_r>
 800816c:	1e05      	subs	r5, r0, #0
 800816e:	d003      	beq.n	8008178 <_calloc_r+0x18>
 8008170:	0022      	movs	r2, r4
 8008172:	2100      	movs	r1, #0
 8008174:	f7fe fb2a 	bl	80067cc <memset>
 8008178:	0028      	movs	r0, r5
 800817a:	bd70      	pop	{r4, r5, r6, pc}

0800817c <_malloc_r>:
 800817c:	2303      	movs	r3, #3
 800817e:	b570      	push	{r4, r5, r6, lr}
 8008180:	1ccd      	adds	r5, r1, #3
 8008182:	439d      	bics	r5, r3
 8008184:	3508      	adds	r5, #8
 8008186:	0006      	movs	r6, r0
 8008188:	2d0c      	cmp	r5, #12
 800818a:	d21e      	bcs.n	80081ca <_malloc_r+0x4e>
 800818c:	250c      	movs	r5, #12
 800818e:	42a9      	cmp	r1, r5
 8008190:	d81d      	bhi.n	80081ce <_malloc_r+0x52>
 8008192:	0030      	movs	r0, r6
 8008194:	f000 f874 	bl	8008280 <__malloc_lock>
 8008198:	4a25      	ldr	r2, [pc, #148]	; (8008230 <_malloc_r+0xb4>)
 800819a:	6814      	ldr	r4, [r2, #0]
 800819c:	0021      	movs	r1, r4
 800819e:	2900      	cmp	r1, #0
 80081a0:	d119      	bne.n	80081d6 <_malloc_r+0x5a>
 80081a2:	4c24      	ldr	r4, [pc, #144]	; (8008234 <_malloc_r+0xb8>)
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d103      	bne.n	80081b2 <_malloc_r+0x36>
 80081aa:	0030      	movs	r0, r6
 80081ac:	f000 f844 	bl	8008238 <_sbrk_r>
 80081b0:	6020      	str	r0, [r4, #0]
 80081b2:	0029      	movs	r1, r5
 80081b4:	0030      	movs	r0, r6
 80081b6:	f000 f83f 	bl	8008238 <_sbrk_r>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	d12b      	bne.n	8008216 <_malloc_r+0x9a>
 80081be:	230c      	movs	r3, #12
 80081c0:	0030      	movs	r0, r6
 80081c2:	6033      	str	r3, [r6, #0]
 80081c4:	f000 f85d 	bl	8008282 <__malloc_unlock>
 80081c8:	e003      	b.n	80081d2 <_malloc_r+0x56>
 80081ca:	2d00      	cmp	r5, #0
 80081cc:	dadf      	bge.n	800818e <_malloc_r+0x12>
 80081ce:	230c      	movs	r3, #12
 80081d0:	6033      	str	r3, [r6, #0]
 80081d2:	2000      	movs	r0, #0
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
 80081d6:	680b      	ldr	r3, [r1, #0]
 80081d8:	1b5b      	subs	r3, r3, r5
 80081da:	d419      	bmi.n	8008210 <_malloc_r+0x94>
 80081dc:	2b0b      	cmp	r3, #11
 80081de:	d903      	bls.n	80081e8 <_malloc_r+0x6c>
 80081e0:	600b      	str	r3, [r1, #0]
 80081e2:	18cc      	adds	r4, r1, r3
 80081e4:	6025      	str	r5, [r4, #0]
 80081e6:	e003      	b.n	80081f0 <_malloc_r+0x74>
 80081e8:	684b      	ldr	r3, [r1, #4]
 80081ea:	428c      	cmp	r4, r1
 80081ec:	d10d      	bne.n	800820a <_malloc_r+0x8e>
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	0030      	movs	r0, r6
 80081f2:	f000 f846 	bl	8008282 <__malloc_unlock>
 80081f6:	0020      	movs	r0, r4
 80081f8:	2207      	movs	r2, #7
 80081fa:	300b      	adds	r0, #11
 80081fc:	1d23      	adds	r3, r4, #4
 80081fe:	4390      	bics	r0, r2
 8008200:	1ac3      	subs	r3, r0, r3
 8008202:	d0e7      	beq.n	80081d4 <_malloc_r+0x58>
 8008204:	425a      	negs	r2, r3
 8008206:	50e2      	str	r2, [r4, r3]
 8008208:	e7e4      	b.n	80081d4 <_malloc_r+0x58>
 800820a:	6063      	str	r3, [r4, #4]
 800820c:	000c      	movs	r4, r1
 800820e:	e7ef      	b.n	80081f0 <_malloc_r+0x74>
 8008210:	000c      	movs	r4, r1
 8008212:	6849      	ldr	r1, [r1, #4]
 8008214:	e7c3      	b.n	800819e <_malloc_r+0x22>
 8008216:	2303      	movs	r3, #3
 8008218:	1cc4      	adds	r4, r0, #3
 800821a:	439c      	bics	r4, r3
 800821c:	42a0      	cmp	r0, r4
 800821e:	d0e1      	beq.n	80081e4 <_malloc_r+0x68>
 8008220:	1a21      	subs	r1, r4, r0
 8008222:	0030      	movs	r0, r6
 8008224:	f000 f808 	bl	8008238 <_sbrk_r>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d1db      	bne.n	80081e4 <_malloc_r+0x68>
 800822c:	e7c7      	b.n	80081be <_malloc_r+0x42>
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	20000414 	.word	0x20000414
 8008234:	20000418 	.word	0x20000418

08008238 <_sbrk_r>:
 8008238:	2300      	movs	r3, #0
 800823a:	b570      	push	{r4, r5, r6, lr}
 800823c:	4c06      	ldr	r4, [pc, #24]	; (8008258 <_sbrk_r+0x20>)
 800823e:	0005      	movs	r5, r0
 8008240:	0008      	movs	r0, r1
 8008242:	6023      	str	r3, [r4, #0]
 8008244:	f7fa fed2 	bl	8002fec <_sbrk>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d103      	bne.n	8008254 <_sbrk_r+0x1c>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d000      	beq.n	8008254 <_sbrk_r+0x1c>
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	bd70      	pop	{r4, r5, r6, pc}
 8008256:	46c0      	nop			; (mov r8, r8)
 8008258:	20000688 	.word	0x20000688

0800825c <__ascii_mbtowc>:
 800825c:	b082      	sub	sp, #8
 800825e:	2900      	cmp	r1, #0
 8008260:	d100      	bne.n	8008264 <__ascii_mbtowc+0x8>
 8008262:	a901      	add	r1, sp, #4
 8008264:	1e10      	subs	r0, r2, #0
 8008266:	d006      	beq.n	8008276 <__ascii_mbtowc+0x1a>
 8008268:	2b00      	cmp	r3, #0
 800826a:	d006      	beq.n	800827a <__ascii_mbtowc+0x1e>
 800826c:	7813      	ldrb	r3, [r2, #0]
 800826e:	600b      	str	r3, [r1, #0]
 8008270:	7810      	ldrb	r0, [r2, #0]
 8008272:	1e43      	subs	r3, r0, #1
 8008274:	4198      	sbcs	r0, r3
 8008276:	b002      	add	sp, #8
 8008278:	4770      	bx	lr
 800827a:	2002      	movs	r0, #2
 800827c:	4240      	negs	r0, r0
 800827e:	e7fa      	b.n	8008276 <__ascii_mbtowc+0x1a>

08008280 <__malloc_lock>:
 8008280:	4770      	bx	lr

08008282 <__malloc_unlock>:
 8008282:	4770      	bx	lr

08008284 <__ascii_wctomb>:
 8008284:	1e0b      	subs	r3, r1, #0
 8008286:	d004      	beq.n	8008292 <__ascii_wctomb+0xe>
 8008288:	2aff      	cmp	r2, #255	; 0xff
 800828a:	d904      	bls.n	8008296 <__ascii_wctomb+0x12>
 800828c:	238a      	movs	r3, #138	; 0x8a
 800828e:	6003      	str	r3, [r0, #0]
 8008290:	3b8b      	subs	r3, #139	; 0x8b
 8008292:	0018      	movs	r0, r3
 8008294:	4770      	bx	lr
 8008296:	700a      	strb	r2, [r1, #0]
 8008298:	2301      	movs	r3, #1
 800829a:	e7fa      	b.n	8008292 <__ascii_wctomb+0xe>

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
