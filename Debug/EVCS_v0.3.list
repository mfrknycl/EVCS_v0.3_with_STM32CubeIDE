
EVCS_v0.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000873c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a0  08008800  08008800  00018800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a0  080098a0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080098a0  080098a0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098a0  080098a0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098a4  080098a4  000198a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080098a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200001e4  08009a8c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  08009a8c  0002064c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d6a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028c4  00000000  00000000  00032f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  00035840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f68  00000000  00000000  00036908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000eeee  00000000  00000000  00037870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e37e  00000000  00000000  0004675e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00051890  00000000  00000000  00054adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a636c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000441c  00000000  00000000  000a63e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080087e4 	.word	0x080087e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	080087e4 	.word	0x080087e4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fef1 	bl	8001210 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe49 	bl	80010d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fee3 	bl	8001210 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fed9 	bl	8001210 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe6b 	bl	8001148 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe61 	bl	8001148 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000c      	movs	r4, r1
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	0f47      	lsrs	r7, r0, #29
 80004a6:	005e      	lsls	r6, r3, #1
 80004a8:	4339      	orrs	r1, r7
 80004aa:	031f      	lsls	r7, r3, #12
 80004ac:	0fdb      	lsrs	r3, r3, #31
 80004ae:	469c      	mov	ip, r3
 80004b0:	0065      	lsls	r5, r4, #1
 80004b2:	0a7b      	lsrs	r3, r7, #9
 80004b4:	0f57      	lsrs	r7, r2, #29
 80004b6:	431f      	orrs	r7, r3
 80004b8:	0d6d      	lsrs	r5, r5, #21
 80004ba:	0fe4      	lsrs	r4, r4, #31
 80004bc:	0d76      	lsrs	r6, r6, #21
 80004be:	46a1      	mov	r9, r4
 80004c0:	00c0      	lsls	r0, r0, #3
 80004c2:	46b8      	mov	r8, r7
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	1bab      	subs	r3, r5, r6
 80004c8:	4564      	cmp	r4, ip
 80004ca:	d07b      	beq.n	80005c4 <__aeabi_dadd+0x130>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd5f      	ble.n	8000590 <__aeabi_dadd+0xfc>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x42>
 80004d4:	e0a4      	b.n	8000620 <__aeabi_dadd+0x18c>
 80004d6:	003e      	movs	r6, r7
 80004d8:	4316      	orrs	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e112      	b.n	8000704 <__aeabi_dadd+0x270>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e19e      	b.n	8000824 <__aeabi_dadd+0x390>
 80004e6:	1a87      	subs	r7, r0, r2
 80004e8:	4643      	mov	r3, r8
 80004ea:	42b8      	cmp	r0, r7
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	2501      	movs	r5, #1
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	4240      	negs	r0, r0
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	020b      	lsls	r3, r1, #8
 80004f8:	d400      	bmi.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e131      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	0a4e      	lsrs	r6, r1, #9
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e16e      	b.n	80007e4 <__aeabi_dadd+0x350>
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fd62 	bl	8001fd0 <__clzsi2>
 800050c:	0003      	movs	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	2b1f      	cmp	r3, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x82>
 8000514:	e161      	b.n	80007da <__aeabi_dadd+0x346>
 8000516:	2220      	movs	r2, #32
 8000518:	0039      	movs	r1, r7
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	409e      	lsls	r6, r3
 800051e:	40d1      	lsrs	r1, r2
 8000520:	409f      	lsls	r7, r3
 8000522:	430e      	orrs	r6, r1
 8000524:	429d      	cmp	r5, r3
 8000526:	dd00      	ble.n	800052a <__aeabi_dadd+0x96>
 8000528:	e151      	b.n	80007ce <__aeabi_dadd+0x33a>
 800052a:	1b5d      	subs	r5, r3, r5
 800052c:	1c6b      	adds	r3, r5, #1
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0xa0>
 8000532:	e17c      	b.n	800082e <__aeabi_dadd+0x39a>
 8000534:	2120      	movs	r1, #32
 8000536:	1ac9      	subs	r1, r1, r3
 8000538:	003d      	movs	r5, r7
 800053a:	0030      	movs	r0, r6
 800053c:	408f      	lsls	r7, r1
 800053e:	4088      	lsls	r0, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	1e79      	subs	r1, r7, #1
 8000544:	418f      	sbcs	r7, r1
 8000546:	0031      	movs	r1, r6
 8000548:	2207      	movs	r2, #7
 800054a:	4328      	orrs	r0, r5
 800054c:	40d9      	lsrs	r1, r3
 800054e:	2500      	movs	r5, #0
 8000550:	4307      	orrs	r7, r0
 8000552:	403a      	ands	r2, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	d009      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000558:	230f      	movs	r3, #15
 800055a:	403b      	ands	r3, r7
 800055c:	2b04      	cmp	r3, #4
 800055e:	d005      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	42bb      	cmp	r3, r7
 8000564:	41bf      	sbcs	r7, r7
 8000566:	427f      	negs	r7, r7
 8000568:	19c9      	adds	r1, r1, r7
 800056a:	001f      	movs	r7, r3
 800056c:	020b      	lsls	r3, r1, #8
 800056e:	d400      	bmi.n	8000572 <__aeabi_dadd+0xde>
 8000570:	e226      	b.n	80009c0 <__aeabi_dadd+0x52c>
 8000572:	1c6a      	adds	r2, r5, #1
 8000574:	4bc6      	ldr	r3, [pc, #792]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000576:	0555      	lsls	r5, r2, #21
 8000578:	0d6d      	lsrs	r5, r5, #21
 800057a:	429a      	cmp	r2, r3
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0xec>
 800057e:	e106      	b.n	800078e <__aeabi_dadd+0x2fa>
 8000580:	4ac4      	ldr	r2, [pc, #784]	; (8000894 <__aeabi_dadd+0x400>)
 8000582:	08ff      	lsrs	r7, r7, #3
 8000584:	400a      	ands	r2, r1
 8000586:	0753      	lsls	r3, r2, #29
 8000588:	0252      	lsls	r2, r2, #9
 800058a:	433b      	orrs	r3, r7
 800058c:	0b12      	lsrs	r2, r2, #12
 800058e:	e08e      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x102>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x274>
 8000596:	1c6b      	adds	r3, r5, #1
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	0d5b      	lsrs	r3, r3, #21
 800059c:	2b01      	cmp	r3, #1
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dadd+0x10e>
 80005a0:	e130      	b.n	8000804 <__aeabi_dadd+0x370>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	41b6      	sbcs	r6, r6
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	4276      	negs	r6, r6
 80005ae:	1b9e      	subs	r6, r3, r6
 80005b0:	0233      	lsls	r3, r6, #8
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_dadd+0x122>
 80005b4:	e14c      	b.n	8000850 <__aeabi_dadd+0x3bc>
 80005b6:	003b      	movs	r3, r7
 80005b8:	4333      	orrs	r3, r6
 80005ba:	d1a1      	bne.n	8000500 <__aeabi_dadd+0x6c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	e070      	b.n	80006a6 <__aeabi_dadd+0x212>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x136>
 80005c8:	e0e5      	b.n	8000796 <__aeabi_dadd+0x302>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x13c>
 80005ce:	e083      	b.n	80006d8 <__aeabi_dadd+0x244>
 80005d0:	4eaf      	ldr	r6, [pc, #700]	; (8000890 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d060      	beq.n	8000698 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dc00      	bgt.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e13e      	b.n	8000862 <__aeabi_dadd+0x3ce>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	001f      	movs	r7, r3
 80005ea:	1e7a      	subs	r2, r7, #1
 80005ec:	4197      	sbcs	r7, r2
 80005ee:	183f      	adds	r7, r7, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	4180      	sbcs	r0, r0
 80005f4:	4240      	negs	r0, r0
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	020b      	lsls	r3, r1, #8
 80005fa:	d400      	bmi.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e0b0      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000600:	3501      	adds	r5, #1
 8000602:	429d      	cmp	r5, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x174>
 8000606:	e0c3      	b.n	8000790 <__aeabi_dadd+0x2fc>
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <__aeabi_dadd+0x400>)
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	400a      	ands	r2, r1
 800060e:	2101      	movs	r1, #1
 8000610:	400f      	ands	r7, r1
 8000612:	431f      	orrs	r7, r3
 8000614:	0851      	lsrs	r1, r2, #1
 8000616:	07d3      	lsls	r3, r2, #31
 8000618:	2207      	movs	r2, #7
 800061a:	431f      	orrs	r7, r3
 800061c:	403a      	ands	r2, r7
 800061e:	e799      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000620:	4e9b      	ldr	r6, [pc, #620]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d038      	beq.n	8000698 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_dadd+0x1a0>
 8000632:	e0dc      	b.n	80007ee <__aeabi_dadd+0x35a>
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x1a6>
 8000638:	e130      	b.n	800089c <__aeabi_dadd+0x408>
 800063a:	001e      	movs	r6, r3
 800063c:	4647      	mov	r7, r8
 800063e:	3e20      	subs	r6, #32
 8000640:	40f7      	lsrs	r7, r6
 8000642:	46bc      	mov	ip, r7
 8000644:	2b20      	cmp	r3, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_dadd+0x1be>
 8000648:	2640      	movs	r6, #64	; 0x40
 800064a:	1af3      	subs	r3, r6, r3
 800064c:	4646      	mov	r6, r8
 800064e:	409e      	lsls	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0017      	movs	r7, r2
 8000654:	4663      	mov	r3, ip
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	431f      	orrs	r7, r3
 800065c:	e0cc      	b.n	80007f8 <__aeabi_dadd+0x364>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1d0>
 8000662:	e204      	b.n	8000a6e <__aeabi_dadd+0x5da>
 8000664:	4643      	mov	r3, r8
 8000666:	4313      	orrs	r3, r2
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1d8>
 800066a:	e159      	b.n	8000920 <__aeabi_dadd+0x48c>
 800066c:	074b      	lsls	r3, r1, #29
 800066e:	08c0      	lsrs	r0, r0, #3
 8000670:	4318      	orrs	r0, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	08c9      	lsrs	r1, r1, #3
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4219      	tst	r1, r3
 800067a:	d008      	beq.n	800068e <__aeabi_dadd+0x1fa>
 800067c:	4645      	mov	r5, r8
 800067e:	08ed      	lsrs	r5, r5, #3
 8000680:	421d      	tst	r5, r3
 8000682:	d104      	bne.n	800068e <__aeabi_dadd+0x1fa>
 8000684:	4643      	mov	r3, r8
 8000686:	08d0      	lsrs	r0, r2, #3
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	4308      	orrs	r0, r1
 800068c:	0029      	movs	r1, r5
 800068e:	0f42      	lsrs	r2, r0, #29
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	4d7f      	ldr	r5, [pc, #508]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000694:	4311      	orrs	r1, r2
 8000696:	00c0      	lsls	r0, r0, #3
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08ca      	lsrs	r2, r1, #3
 800069c:	497c      	ldr	r1, [pc, #496]	; (8000890 <__aeabi_dadd+0x3fc>)
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	428d      	cmp	r5, r1
 80006a4:	d068      	beq.n	8000778 <__aeabi_dadd+0x2e4>
 80006a6:	0312      	lsls	r2, r2, #12
 80006a8:	056d      	lsls	r5, r5, #21
 80006aa:	0b12      	lsrs	r2, r2, #12
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	2100      	movs	r1, #0
 80006b0:	0312      	lsls	r2, r2, #12
 80006b2:	0018      	movs	r0, r3
 80006b4:	0b13      	lsrs	r3, r2, #12
 80006b6:	0d0a      	lsrs	r2, r1, #20
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	431a      	orrs	r2, r3
 80006bc:	4b76      	ldr	r3, [pc, #472]	; (8000898 <__aeabi_dadd+0x404>)
 80006be:	052d      	lsls	r5, r5, #20
 80006c0:	4013      	ands	r3, r2
 80006c2:	432b      	orrs	r3, r5
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	07e4      	lsls	r4, r4, #31
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	4323      	orrs	r3, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	bc1c      	pop	{r2, r3, r4}
 80006d0:	4690      	mov	r8, r2
 80006d2:	4699      	mov	r9, r3
 80006d4:	46a2      	mov	sl, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	003e      	movs	r6, r7
 80006da:	4316      	orrs	r6, r2
 80006dc:	d012      	beq.n	8000704 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x252>
 80006e4:	e100      	b.n	80008e8 <__aeabi_dadd+0x454>
 80006e6:	1887      	adds	r7, r0, r2
 80006e8:	4287      	cmp	r7, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4441      	add	r1, r8
 80006ee:	4240      	negs	r0, r0
 80006f0:	1809      	adds	r1, r1, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	020b      	lsls	r3, r1, #8
 80006f6:	d533      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006f8:	2502      	movs	r5, #2
 80006fa:	e785      	b.n	8000608 <__aeabi_dadd+0x174>
 80006fc:	4664      	mov	r4, ip
 80006fe:	0033      	movs	r3, r6
 8000700:	4641      	mov	r1, r8
 8000702:	0010      	movs	r0, r2
 8000704:	001d      	movs	r5, r3
 8000706:	e7c7      	b.n	8000698 <__aeabi_dadd+0x204>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e0da      	b.n	80008c4 <__aeabi_dadd+0x430>
 800070e:	000c      	movs	r4, r1
 8000710:	4304      	orrs	r4, r0
 8000712:	d0f3      	beq.n	80006fc <__aeabi_dadd+0x268>
 8000714:	1c5c      	adds	r4, r3, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x286>
 8000718:	e19f      	b.n	8000a5a <__aeabi_dadd+0x5c6>
 800071a:	4c5d      	ldr	r4, [pc, #372]	; (8000890 <__aeabi_dadd+0x3fc>)
 800071c:	42a6      	cmp	r6, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x28e>
 8000720:	e12f      	b.n	8000982 <__aeabi_dadd+0x4ee>
 8000722:	43db      	mvns	r3, r3
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x296>
 8000728:	e166      	b.n	80009f8 <__aeabi_dadd+0x564>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x29c>
 800072e:	e183      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000730:	2420      	movs	r4, #32
 8000732:	0005      	movs	r5, r0
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	000f      	movs	r7, r1
 8000738:	40dd      	lsrs	r5, r3
 800073a:	40d9      	lsrs	r1, r3
 800073c:	40a0      	lsls	r0, r4
 800073e:	4643      	mov	r3, r8
 8000740:	40a7      	lsls	r7, r4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	1e44      	subs	r4, r0, #1
 8000746:	41a0      	sbcs	r0, r4
 8000748:	4698      	mov	r8, r3
 800074a:	432f      	orrs	r7, r5
 800074c:	4338      	orrs	r0, r7
 800074e:	1a17      	subs	r7, r2, r0
 8000750:	42ba      	cmp	r2, r7
 8000752:	4192      	sbcs	r2, r2
 8000754:	4643      	mov	r3, r8
 8000756:	4252      	negs	r2, r2
 8000758:	1a99      	subs	r1, r3, r2
 800075a:	4664      	mov	r4, ip
 800075c:	0035      	movs	r5, r6
 800075e:	e6ca      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000760:	2207      	movs	r2, #7
 8000762:	403a      	ands	r2, r7
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e6f6      	b.n	8000558 <__aeabi_dadd+0xc4>
 800076a:	074b      	lsls	r3, r1, #29
 800076c:	08ca      	lsrs	r2, r1, #3
 800076e:	4948      	ldr	r1, [pc, #288]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000770:	08ff      	lsrs	r7, r7, #3
 8000772:	433b      	orrs	r3, r7
 8000774:	428d      	cmp	r5, r1
 8000776:	d196      	bne.n	80006a6 <__aeabi_dadd+0x212>
 8000778:	0019      	movs	r1, r3
 800077a:	4311      	orrs	r1, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x2ec>
 800077e:	e19e      	b.n	8000abe <__aeabi_dadd+0x62a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0309      	lsls	r1, r1, #12
 8000784:	430a      	orrs	r2, r1
 8000786:	0312      	lsls	r2, r2, #12
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	4d41      	ldr	r5, [pc, #260]	; (8000890 <__aeabi_dadd+0x3fc>)
 800078c:	e78f      	b.n	80006ae <__aeabi_dadd+0x21a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e78b      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x308>
 800079a:	e0c7      	b.n	800092c <__aeabi_dadd+0x498>
 800079c:	1c6b      	adds	r3, r5, #1
 800079e:	055f      	lsls	r7, r3, #21
 80007a0:	0d7f      	lsrs	r7, r7, #21
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x314>
 80007a6:	e0f1      	b.n	800098c <__aeabi_dadd+0x4f8>
 80007a8:	4d39      	ldr	r5, [pc, #228]	; (8000890 <__aeabi_dadd+0x3fc>)
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x31c>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dadd+0x490>
 80007b0:	1885      	adds	r5, r0, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4285      	cmp	r5, r0
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4442      	add	r2, r8
 80007ba:	4249      	negs	r1, r1
 80007bc:	1851      	adds	r1, r2, r1
 80007be:	2207      	movs	r2, #7
 80007c0:	07cf      	lsls	r7, r1, #31
 80007c2:	086d      	lsrs	r5, r5, #1
 80007c4:	432f      	orrs	r7, r5
 80007c6:	0849      	lsrs	r1, r1, #1
 80007c8:	403a      	ands	r2, r7
 80007ca:	001d      	movs	r5, r3
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	2207      	movs	r2, #7
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <__aeabi_dadd+0x400>)
 80007d2:	1aed      	subs	r5, r5, r3
 80007d4:	4031      	ands	r1, r6
 80007d6:	403a      	ands	r2, r7
 80007d8:	e6bc      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007da:	003e      	movs	r6, r7
 80007dc:	3828      	subs	r0, #40	; 0x28
 80007de:	4086      	lsls	r6, r0
 80007e0:	2700      	movs	r7, #0
 80007e2:	e69f      	b.n	8000524 <__aeabi_dadd+0x90>
 80007e4:	0038      	movs	r0, r7
 80007e6:	f001 fbf3 	bl	8001fd0 <__clzsi2>
 80007ea:	3020      	adds	r0, #32
 80007ec:	e68e      	b.n	800050c <__aeabi_dadd+0x78>
 80007ee:	4643      	mov	r3, r8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	001f      	movs	r7, r3
 80007f4:	1e7a      	subs	r2, r7, #1
 80007f6:	4197      	sbcs	r7, r2
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	4240      	negs	r0, r0
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	e678      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000804:	000e      	movs	r6, r1
 8000806:	003b      	movs	r3, r7
 8000808:	4306      	orrs	r6, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d161      	bne.n	80008d4 <__aeabi_dadd+0x440>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x382>
 8000814:	e0f4      	b.n	8000a00 <__aeabi_dadd+0x56c>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x388>
 800081a:	e11b      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 800081c:	4664      	mov	r4, ip
 800081e:	0039      	movs	r1, r7
 8000820:	0010      	movs	r0, r2
 8000822:	e739      	b.n	8000698 <__aeabi_dadd+0x204>
 8000824:	4f1a      	ldr	r7, [pc, #104]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000826:	42bb      	cmp	r3, r7
 8000828:	d07a      	beq.n	8000920 <__aeabi_dadd+0x48c>
 800082a:	0033      	movs	r3, r6
 800082c:	e6ff      	b.n	800062e <__aeabi_dadd+0x19a>
 800082e:	0030      	movs	r0, r6
 8000830:	3d1f      	subs	r5, #31
 8000832:	40e8      	lsrs	r0, r5
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x3ac>
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	409e      	lsls	r6, r3
 800083e:	4337      	orrs	r7, r6
 8000840:	1e7b      	subs	r3, r7, #1
 8000842:	419f      	sbcs	r7, r3
 8000844:	2207      	movs	r2, #7
 8000846:	4307      	orrs	r7, r0
 8000848:	403a      	ands	r2, r7
 800084a:	2100      	movs	r1, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e789      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000850:	1a17      	subs	r7, r2, r0
 8000852:	4643      	mov	r3, r8
 8000854:	42ba      	cmp	r2, r7
 8000856:	41b6      	sbcs	r6, r6
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	4276      	negs	r6, r6
 800085c:	1b8e      	subs	r6, r1, r6
 800085e:	4664      	mov	r4, ip
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x6c>
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3d4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x530>
 8000868:	2620      	movs	r6, #32
 800086a:	4647      	mov	r7, r8
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	40b7      	lsls	r7, r6
 8000870:	46b9      	mov	r9, r7
 8000872:	0017      	movs	r7, r2
 8000874:	46b2      	mov	sl, r6
 8000876:	40df      	lsrs	r7, r3
 8000878:	464e      	mov	r6, r9
 800087a:	433e      	orrs	r6, r7
 800087c:	0037      	movs	r7, r6
 800087e:	4656      	mov	r6, sl
 8000880:	40b2      	lsls	r2, r6
 8000882:	1e56      	subs	r6, r2, #1
 8000884:	41b2      	sbcs	r2, r6
 8000886:	4317      	orrs	r7, r2
 8000888:	4642      	mov	r2, r8
 800088a:	40da      	lsrs	r2, r3
 800088c:	1889      	adds	r1, r1, r2
 800088e:	e6ae      	b.n	80005ee <__aeabi_dadd+0x15a>
 8000890:	000007ff 	.word	0x000007ff
 8000894:	ff7fffff 	.word	0xff7fffff
 8000898:	800fffff 	.word	0x800fffff
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1a89      	subs	r1, r1, r2
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0x364>
 80008c4:	4c7f      	ldr	r4, [pc, #508]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d05b      	beq.n	8000982 <__aeabi_dadd+0x4ee>
 80008ca:	2480      	movs	r4, #128	; 0x80
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	425b      	negs	r3, r3
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e727      	b.n	8000724 <__aeabi_dadd+0x290>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_dadd+0x45e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x44a>
 80008dc:	e0cb      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80008de:	4664      	mov	r4, ip
 80008e0:	0039      	movs	r1, r7
 80008e2:	0010      	movs	r0, r2
 80008e4:	4d77      	ldr	r5, [pc, #476]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008e6:	e6d7      	b.n	8000698 <__aeabi_dadd+0x204>
 80008e8:	4f76      	ldr	r7, [pc, #472]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008ea:	42bb      	cmp	r3, r7
 80008ec:	d018      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008ee:	0033      	movs	r3, r6
 80008f0:	e675      	b.n	80005de <__aeabi_dadd+0x14a>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008f6:	074b      	lsls	r3, r1, #29
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	4318      	orrs	r0, r3
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	08c9      	lsrs	r1, r1, #3
 8000900:	031b      	lsls	r3, r3, #12
 8000902:	4219      	tst	r1, r3
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x482>
 8000906:	08fc      	lsrs	r4, r7, #3
 8000908:	421c      	tst	r4, r3
 800090a:	d104      	bne.n	8000916 <__aeabi_dadd+0x482>
 800090c:	0779      	lsls	r1, r7, #29
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	4308      	orrs	r0, r1
 8000912:	46e1      	mov	r9, ip
 8000914:	0021      	movs	r1, r4
 8000916:	464c      	mov	r4, r9
 8000918:	0f42      	lsrs	r2, r0, #29
 800091a:	00c9      	lsls	r1, r1, #3
 800091c:	4311      	orrs	r1, r2
 800091e:	00c0      	lsls	r0, r0, #3
 8000920:	4d68      	ldr	r5, [pc, #416]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x204>
 8000924:	001d      	movs	r5, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2300      	movs	r3, #0
 800092a:	e6c0      	b.n	80006ae <__aeabi_dadd+0x21a>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15b      	bne.n	80009e8 <__aeabi_dadd+0x554>
 8000930:	000d      	movs	r5, r1
 8000932:	4305      	orrs	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4a4>
 8000936:	e6e2      	b.n	80006fe <__aeabi_dadd+0x26a>
 8000938:	1c5d      	adds	r5, r3, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4aa>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x60c>
 800093e:	4d61      	ldr	r5, [pc, #388]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000940:	42ae      	cmp	r6, r5
 8000942:	d01f      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 8000944:	43db      	mvns	r3, r3
 8000946:	2b38      	cmp	r3, #56	; 0x38
 8000948:	dc71      	bgt.n	8000a2e <__aeabi_dadd+0x59a>
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x4bc>
 800094e:	e096      	b.n	8000a7e <__aeabi_dadd+0x5ea>
 8000950:	2520      	movs	r5, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1aed      	subs	r5, r5, r3
 8000956:	40af      	lsls	r7, r5
 8000958:	46b9      	mov	r9, r7
 800095a:	0007      	movs	r7, r0
 800095c:	46aa      	mov	sl, r5
 800095e:	40df      	lsrs	r7, r3
 8000960:	464d      	mov	r5, r9
 8000962:	433d      	orrs	r5, r7
 8000964:	002f      	movs	r7, r5
 8000966:	4655      	mov	r5, sl
 8000968:	40a8      	lsls	r0, r5
 800096a:	40d9      	lsrs	r1, r3
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	4488      	add	r8, r1
 8000972:	4307      	orrs	r7, r0
 8000974:	18bf      	adds	r7, r7, r2
 8000976:	4297      	cmp	r7, r2
 8000978:	4192      	sbcs	r2, r2
 800097a:	4251      	negs	r1, r2
 800097c:	4441      	add	r1, r8
 800097e:	0035      	movs	r5, r6
 8000980:	e63a      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000982:	4664      	mov	r4, ip
 8000984:	0035      	movs	r5, r6
 8000986:	4641      	mov	r1, r8
 8000988:	0010      	movs	r0, r2
 800098a:	e685      	b.n	8000698 <__aeabi_dadd+0x204>
 800098c:	000b      	movs	r3, r1
 800098e:	4303      	orrs	r3, r0
 8000990:	2d00      	cmp	r5, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x502>
 8000994:	e663      	b.n	800065e <__aeabi_dadd+0x1ca>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f5      	beq.n	8000986 <__aeabi_dadd+0x4f2>
 800099a:	4643      	mov	r3, r8
 800099c:	4313      	orrs	r3, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x50e>
 80009a0:	e67a      	b.n	8000698 <__aeabi_dadd+0x204>
 80009a2:	1887      	adds	r7, r0, r2
 80009a4:	4287      	cmp	r7, r0
 80009a6:	4180      	sbcs	r0, r0
 80009a8:	2207      	movs	r2, #7
 80009aa:	4441      	add	r1, r8
 80009ac:	4240      	negs	r0, r0
 80009ae:	1809      	adds	r1, r1, r0
 80009b0:	403a      	ands	r2, r7
 80009b2:	020b      	lsls	r3, r1, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x524>
 80009b6:	e6d5      	b.n	8000764 <__aeabi_dadd+0x2d0>
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x634>)
 80009ba:	3501      	adds	r5, #1
 80009bc:	4019      	ands	r1, r3
 80009be:	e5c9      	b.n	8000554 <__aeabi_dadd+0xc0>
 80009c0:	0038      	movs	r0, r7
 80009c2:	e669      	b.n	8000698 <__aeabi_dadd+0x204>
 80009c4:	001e      	movs	r6, r3
 80009c6:	4647      	mov	r7, r8
 80009c8:	3e20      	subs	r6, #32
 80009ca:	40f7      	lsrs	r7, r6
 80009cc:	46bc      	mov	ip, r7
 80009ce:	2b20      	cmp	r3, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x548>
 80009d2:	2640      	movs	r6, #64	; 0x40
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	4646      	mov	r6, r8
 80009d8:	409e      	lsls	r6, r3
 80009da:	4332      	orrs	r2, r6
 80009dc:	0017      	movs	r7, r2
 80009de:	4663      	mov	r3, ip
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e602      	b.n	80005ee <__aeabi_dadd+0x15a>
 80009e8:	4d36      	ldr	r5, [pc, #216]	; (8000ac4 <__aeabi_dadd+0x630>)
 80009ea:	42ae      	cmp	r6, r5
 80009ec:	d0ca      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 80009ee:	2580      	movs	r5, #128	; 0x80
 80009f0:	042d      	lsls	r5, r5, #16
 80009f2:	425b      	negs	r3, r3
 80009f4:	4329      	orrs	r1, r5
 80009f6:	e7a6      	b.n	8000946 <__aeabi_dadd+0x4b2>
 80009f8:	4308      	orrs	r0, r1
 80009fa:	1e41      	subs	r1, r0, #1
 80009fc:	4188      	sbcs	r0, r1
 80009fe:	e6a6      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x572>
 8000a04:	e648      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a06:	1a87      	subs	r7, r0, r2
 8000a08:	4643      	mov	r3, r8
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	41b6      	sbcs	r6, r6
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	4276      	negs	r6, r6
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	0233      	lsls	r3, r6, #8
 8000a16:	d54b      	bpl.n	8000ab0 <__aeabi_dadd+0x61c>
 8000a18:	1a17      	subs	r7, r2, r0
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1a59      	subs	r1, r3, r1
 8000a22:	4252      	negs	r2, r2
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	2207      	movs	r2, #7
 8000a28:	4664      	mov	r4, ip
 8000a2a:	403a      	ands	r2, r7
 8000a2c:	e592      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	000f      	movs	r7, r1
 8000a32:	1e79      	subs	r1, r7, #1
 8000a34:	418f      	sbcs	r7, r1
 8000a36:	e79d      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000a38:	001c      	movs	r4, r3
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	40e7      	lsrs	r7, r4
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d003      	beq.n	8000a4c <__aeabi_dadd+0x5b8>
 8000a44:	2440      	movs	r4, #64	; 0x40
 8000a46:	1ae3      	subs	r3, r4, r3
 8000a48:	4099      	lsls	r1, r3
 8000a4a:	4308      	orrs	r0, r1
 8000a4c:	1e41      	subs	r1, r0, #1
 8000a4e:	4188      	sbcs	r0, r1
 8000a50:	4338      	orrs	r0, r7
 8000a52:	e67c      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	e625      	b.n	80006a6 <__aeabi_dadd+0x212>
 8000a5a:	1a17      	subs	r7, r2, r0
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4252      	negs	r2, r2
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0035      	movs	r5, r6
 8000a6c:	e543      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	0010      	movs	r0, r2
 8000a72:	4d14      	ldr	r5, [pc, #80]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000a74:	e610      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	0312      	lsls	r2, r2, #12
 8000a7c:	e680      	b.n	8000780 <__aeabi_dadd+0x2ec>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	000f      	movs	r7, r1
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ef      	lsrs	r7, r5
 8000a86:	46bc      	mov	ip, r7
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d003      	beq.n	8000a94 <__aeabi_dadd+0x600>
 8000a8c:	2540      	movs	r5, #64	; 0x40
 8000a8e:	1aeb      	subs	r3, r5, r3
 8000a90:	4099      	lsls	r1, r3
 8000a92:	4308      	orrs	r0, r1
 8000a94:	0007      	movs	r7, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e78      	subs	r0, r7, #1
 8000a9a:	4187      	sbcs	r7, r0
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e769      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000aa0:	1887      	adds	r7, r0, r2
 8000aa2:	4297      	cmp	r7, r2
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4441      	add	r1, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	0035      	movs	r5, r6
 8000aae:	e5a3      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4333      	orrs	r3, r6
 8000ab4:	d0ce      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	0031      	movs	r1, r6
 8000aba:	403a      	ands	r2, r7
 8000abc:	e652      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	e5f4      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff

08000acc <__aeabi_ddiv>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	4657      	mov	r7, sl
 8000ad0:	46de      	mov	lr, fp
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	b5e0      	push	{r5, r6, r7, lr}
 8000ad8:	4683      	mov	fp, r0
 8000ada:	0007      	movs	r7, r0
 8000adc:	030e      	lsls	r6, r1, #12
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d40      	lsrs	r0, r0, #21
 8000aea:	0fcd      	lsrs	r5, r1, #31
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_ddiv+0x26>
 8000af0:	e09d      	b.n	8000c2e <__aeabi_ddiv+0x162>
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d039      	beq.n	8000b6c <__aeabi_ddiv+0xa0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	00f6      	lsls	r6, r6, #3
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431e      	orrs	r6, r3
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b02:	0f7b      	lsrs	r3, r7, #29
 8000b04:	4333      	orrs	r3, r6
 8000b06:	4699      	mov	r9, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	4463      	add	r3, ip
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2600      	movs	r6, #0
 8000b14:	00ff      	lsls	r7, r7, #3
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	0323      	lsls	r3, r4, #12
 8000b1a:	0b1b      	lsrs	r3, r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0063      	lsls	r3, r4, #1
 8000b20:	0fe4      	lsrs	r4, r4, #31
 8000b22:	4652      	mov	r2, sl
 8000b24:	0d5b      	lsrs	r3, r3, #21
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x60>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x1c8>
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x68>
 8000b32:	e09e      	b.n	8000c72 <__aeabi_ddiv+0x1a6>
 8000b34:	4642      	mov	r2, r8
 8000b36:	00d1      	lsls	r1, r2, #3
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0412      	lsls	r2, r2, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	4651      	mov	r1, sl
 8000b40:	0f49      	lsrs	r1, r1, #29
 8000b42:	4311      	orrs	r1, r2
 8000b44:	468b      	mov	fp, r1
 8000b46:	4981      	ldr	r1, [pc, #516]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b48:	4652      	mov	r2, sl
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4463      	add	r3, ip
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	002b      	movs	r3, r5
 8000b5a:	4063      	eors	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2e0f      	cmp	r6, #15
 8000b60:	d900      	bls.n	8000b64 <__aeabi_ddiv+0x98>
 8000b62:	e105      	b.n	8000d70 <__aeabi_ddiv+0x2a4>
 8000b64:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <__aeabi_ddiv+0x284>)
 8000b66:	00b6      	lsls	r6, r6, #2
 8000b68:	599b      	ldr	r3, [r3, r6]
 8000b6a:	469f      	mov	pc, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	4699      	mov	r9, r3
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ddiv+0xaa>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_ddiv+0x21c>
 8000b76:	2302      	movs	r3, #2
 8000b78:	2608      	movs	r6, #8
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	9000      	str	r0, [sp, #0]
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e7ca      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000b82:	46cb      	mov	fp, r9
 8000b84:	003a      	movs	r2, r7
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	9501      	str	r5, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d027      	beq.n	8000be2 <__aeabi_ddiv+0x116>
 8000b92:	2903      	cmp	r1, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0xcc>
 8000b96:	e280      	b.n	800109a <__aeabi_ddiv+0x5ce>
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d044      	beq.n	8000c26 <__aeabi_ddiv+0x15a>
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <__aeabi_ddiv+0x288>)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	dd38      	ble.n	8000c1c <__aeabi_ddiv+0x150>
 8000baa:	0753      	lsls	r3, r2, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000bae:	e213      	b.n	8000fd8 <__aeabi_ddiv+0x50c>
 8000bb0:	08d2      	lsrs	r2, r2, #3
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	d509      	bpl.n	8000bcc <__aeabi_ddiv+0x100>
 8000bb8:	4659      	mov	r1, fp
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <__aeabi_ddiv+0x28c>)
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	468b      	mov	fp, r1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	00c9      	lsls	r1, r1, #3
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	4463      	add	r3, ip
 8000bca:	001c      	movs	r4, r3
 8000bcc:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <__aeabi_ddiv+0x290>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	dc07      	bgt.n	8000be2 <__aeabi_ddiv+0x116>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	0564      	lsls	r4, r4, #21
 8000bd6:	075f      	lsls	r7, r3, #29
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b1b      	lsrs	r3, r3, #12
 8000bde:	0d62      	lsrs	r2, r4, #21
 8000be0:	e002      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2700      	movs	r7, #0
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	031b      	lsls	r3, r3, #12
 8000bec:	0b1c      	lsrs	r4, r3, #12
 8000bee:	0d0b      	lsrs	r3, r1, #20
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	0514      	lsls	r4, r2, #20
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <__aeabi_ddiv+0x294>)
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	0064      	lsls	r4, r4, #1
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	0864      	lsrs	r4, r4, #1
 8000c06:	431c      	orrs	r4, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	b005      	add	sp, #20
 8000c0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4699      	mov	r9, r3
 8000c12:	46a2      	mov	sl, r4
 8000c14:	46ab      	mov	fp, r5
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	2b38      	cmp	r3, #56	; 0x38
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_ddiv+0x15a>
 8000c24:	e1ad      	b.n	8000f82 <__aeabi_ddiv+0x4b6>
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	e7dc      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000c2e:	465b      	mov	r3, fp
 8000c30:	4333      	orrs	r3, r6
 8000c32:	4699      	mov	r9, r3
 8000c34:	d05e      	beq.n	8000cf4 <__aeabi_ddiv+0x228>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x170>
 8000c3a:	e18a      	b.n	8000f52 <__aeabi_ddiv+0x486>
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f001 f9c7 	bl	8001fd0 <__clzsi2>
 8000c42:	0003      	movs	r3, r0
 8000c44:	3b0b      	subs	r3, #11
 8000c46:	2b1c      	cmp	r3, #28
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_ddiv+0x180>
 8000c4a:	e17b      	b.n	8000f44 <__aeabi_ddiv+0x478>
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	465a      	mov	r2, fp
 8000c52:	0001      	movs	r1, r0
 8000c54:	40da      	lsrs	r2, r3
 8000c56:	3908      	subs	r1, #8
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	465f      	mov	r7, fp
 8000c5e:	4333      	orrs	r3, r6
 8000c60:	4699      	mov	r9, r3
 8000c62:	408f      	lsls	r7, r1
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <__aeabi_ddiv+0x298>)
 8000c66:	2600      	movs	r6, #0
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	e752      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000c72:	4641      	mov	r1, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	430b      	orrs	r3, r1
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <__aeabi_ddiv+0x29c>)
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	465b      	mov	r3, fp
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d13b      	bne.n	8000d02 <__aeabi_ddiv+0x236>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	2102      	movs	r1, #2
 8000c92:	e761      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	d037      	beq.n	8000d0c <__aeabi_ddiv+0x240>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x1d8>
 8000ca2:	e162      	b.n	8000f6a <__aeabi_ddiv+0x49e>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	f001 f993 	bl	8001fd0 <__clzsi2>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3b0b      	subs	r3, #11
 8000cae:	2b1c      	cmp	r3, #28
 8000cb0:	dd00      	ble.n	8000cb4 <__aeabi_ddiv+0x1e8>
 8000cb2:	e153      	b.n	8000f5c <__aeabi_ddiv+0x490>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	211d      	movs	r1, #29
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	4641      	mov	r1, r8
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	4925      	ldr	r1, [pc, #148]	; (8000d6c <__aeabi_ddiv+0x2a0>)
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	0003      	movs	r3, r0
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e737      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	46b1      	mov	r9, r6
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	260c      	movs	r6, #12
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e711      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	e70a      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	46c3      	mov	fp, r8
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	e725      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	031b      	lsls	r3, r3, #12
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d22:	e761      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4649      	mov	r1, r9
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x264>
 8000d2e:	e0e2      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4219      	tst	r1, r3
 8000d34:	d000      	beq.n	8000d38 <__aeabi_ddiv+0x26c>
 8000d36:	e0de      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	0017      	movs	r7, r2
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	46a2      	mov	sl, r4
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d44:	e750      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	fffffc01 	.word	0xfffffc01
 8000d50:	08008868 	.word	0x08008868
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	feffffff 	.word	0xfeffffff
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	800fffff 	.word	0x800fffff
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	fffff801 	.word	0xfffff801
 8000d6c:	000003f3 	.word	0x000003f3
 8000d70:	45d9      	cmp	r9, fp
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x2aa>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_ddiv+0x442>
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000d78:	e0c6      	b.n	8000f08 <__aeabi_ddiv+0x43c>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	465b      	mov	r3, fp
 8000d88:	0e16      	lsrs	r6, r2, #24
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0213      	lsls	r3, r2, #8
 8000d90:	4698      	mov	r8, r3
 8000d92:	0433      	lsls	r3, r6, #16
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	4699      	mov	r9, r3
 8000d98:	0c31      	lsrs	r1, r6, #16
 8000d9a:	9101      	str	r1, [sp, #4]
 8000d9c:	f7ff fa4c 	bl	8000238 <__aeabi_uidivmod>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4342      	muls	r2, r0
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	0005      	movs	r5, r0
 8000daa:	4319      	orrs	r1, r3
 8000dac:	428a      	cmp	r2, r1
 8000dae:	d907      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	3d01      	subs	r5, #1
 8000db4:	428e      	cmp	r6, r1
 8000db6:	d803      	bhi.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d901      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000dbc:	1e85      	subs	r5, r0, #2
 8000dbe:	1989      	adds	r1, r1, r6
 8000dc0:	1a88      	subs	r0, r1, r2
 8000dc2:	9901      	ldr	r1, [sp, #4]
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_uidivmod>
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	468c      	mov	ip, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0421      	lsls	r1, r4, #16
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d904      	bls.n	8000de8 <__aeabi_ddiv+0x31c>
 8000dde:	1989      	adds	r1, r1, r6
 8000de0:	3b01      	subs	r3, #1
 8000de2:	428e      	cmp	r6, r1
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x31c>
 8000de6:	e0f1      	b.n	8000fcc <__aeabi_ddiv+0x500>
 8000de8:	042d      	lsls	r5, r5, #16
 8000dea:	431d      	orrs	r5, r3
 8000dec:	46ab      	mov	fp, r5
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a89      	subs	r1, r1, r2
 8000df2:	4642      	mov	r2, r8
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	0c1d      	lsrs	r5, r3, #16
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	0c14      	lsrs	r4, r2, #16
 8000dfe:	0022      	movs	r2, r4
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435a      	muls	r2, r3
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	9502      	str	r5, [sp, #8]
 8000e0e:	4368      	muls	r0, r5
 8000e10:	191b      	adds	r3, r3, r4
 8000e12:	0c15      	lsrs	r5, r2, #16
 8000e14:	18eb      	adds	r3, r5, r3
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d903      	bls.n	8000e22 <__aeabi_ddiv+0x356>
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	46a4      	mov	ip, r4
 8000e20:	4460      	add	r0, ip
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	0415      	lsls	r5, r2, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c2d      	lsrs	r5, r5, #16
 8000e2a:	1820      	adds	r0, r4, r0
 8000e2c:	195d      	adds	r5, r3, r5
 8000e2e:	4281      	cmp	r1, r0
 8000e30:	d377      	bcc.n	8000f22 <__aeabi_ddiv+0x456>
 8000e32:	d073      	beq.n	8000f1c <__aeabi_ddiv+0x450>
 8000e34:	1a0c      	subs	r4, r1, r0
 8000e36:	4aa2      	ldr	r2, [pc, #648]	; (80010c0 <__aeabi_ddiv+0x5f4>)
 8000e38:	1b7d      	subs	r5, r7, r5
 8000e3a:	42af      	cmp	r7, r5
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4694      	mov	ip, r2
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	427f      	negs	r7, r7
 8000e44:	4463      	add	r3, ip
 8000e46:	1be0      	subs	r0, r4, r7
 8000e48:	001c      	movs	r4, r3
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x384>
 8000e4e:	e0db      	b.n	8001008 <__aeabi_ddiv+0x53c>
 8000e50:	9901      	ldr	r1, [sp, #4]
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	464a      	mov	r2, r9
 8000e58:	4342      	muls	r2, r0
 8000e5a:	040b      	lsls	r3, r1, #16
 8000e5c:	0c29      	lsrs	r1, r5, #16
 8000e5e:	0007      	movs	r7, r0
 8000e60:	4319      	orrs	r1, r3
 8000e62:	428a      	cmp	r2, r1
 8000e64:	d907      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e66:	1989      	adds	r1, r1, r6
 8000e68:	3f01      	subs	r7, #1
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d803      	bhi.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d901      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e72:	1e87      	subs	r7, r0, #2
 8000e74:	1989      	adds	r1, r1, r6
 8000e76:	1a88      	subs	r0, r1, r2
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	f7ff f9dd 	bl	8000238 <__aeabi_uidivmod>
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	464a      	mov	r2, r9
 8000e82:	4689      	mov	r9, r1
 8000e84:	0429      	lsls	r1, r5, #16
 8000e86:	464d      	mov	r5, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0c09      	lsrs	r1, r1, #16
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4329      	orrs	r1, r5
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d907      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e94:	1989      	adds	r1, r1, r6
 8000e96:	3b01      	subs	r3, #1
 8000e98:	428e      	cmp	r6, r1
 8000e9a:	d803      	bhi.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d901      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	9f03      	ldr	r7, [sp, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0038      	movs	r0, r7
 8000eb0:	0413      	lsls	r3, r2, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	4358      	muls	r0, r3
 8000eb6:	4681      	mov	r9, r0
 8000eb8:	9802      	ldr	r0, [sp, #8]
 8000eba:	0c15      	lsrs	r5, r2, #16
 8000ebc:	436f      	muls	r7, r5
 8000ebe:	4343      	muls	r3, r0
 8000ec0:	4345      	muls	r5, r0
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	0c00      	lsrs	r0, r0, #16
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	429f      	cmp	r7, r3
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_ddiv+0x40c>
 8000ed0:	2080      	movs	r0, #128	; 0x80
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4465      	add	r5, ip
 8000ed8:	4648      	mov	r0, r9
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c00      	lsrs	r0, r0, #16
 8000ee2:	197d      	adds	r5, r7, r5
 8000ee4:	1818      	adds	r0, r3, r0
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x420>
 8000eea:	e084      	b.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x424>
 8000eee:	e07f      	b.n	8000ff0 <__aeabi_ddiv+0x524>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	e657      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	464a      	mov	r2, r9
 8000efa:	031b      	lsls	r3, r3, #12
 8000efc:	4313      	orrs	r3, r2
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	0b1b      	lsrs	r3, r3, #12
 8000f02:	46aa      	mov	sl, r5
 8000f04:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 8000f06:	e66f      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000f08:	42ba      	cmp	r2, r7
 8000f0a:	d900      	bls.n	8000f0e <__aeabi_ddiv+0x442>
 8000f0c:	e735      	b.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	07dc      	lsls	r4, r3, #31
 8000f12:	0858      	lsrs	r0, r3, #1
 8000f14:	087b      	lsrs	r3, r7, #1
 8000f16:	431c      	orrs	r4, r3
 8000f18:	07ff      	lsls	r7, r7, #31
 8000f1a:	e734      	b.n	8000d86 <__aeabi_ddiv+0x2ba>
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	42af      	cmp	r7, r5
 8000f20:	d289      	bcs.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f22:	4447      	add	r7, r8
 8000f24:	4547      	cmp	r7, r8
 8000f26:	41a4      	sbcs	r4, r4
 8000f28:	465b      	mov	r3, fp
 8000f2a:	4264      	negs	r4, r4
 8000f2c:	19a4      	adds	r4, r4, r6
 8000f2e:	1864      	adds	r4, r4, r1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d21e      	bcs.n	8000f74 <__aeabi_ddiv+0x4a8>
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	d86d      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f3c:	e0b6      	b.n	80010ac <__aeabi_ddiv+0x5e0>
 8000f3e:	1a24      	subs	r4, r4, r0
 8000f40:	469b      	mov	fp, r3
 8000f42:	e778      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	465a      	mov	r2, fp
 8000f48:	3b28      	subs	r3, #40	; 0x28
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	4691      	mov	r9, r2
 8000f50:	e688      	b.n	8000c64 <__aeabi_ddiv+0x198>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 f83c 	bl	8001fd0 <__clzsi2>
 8000f58:	3020      	adds	r0, #32
 8000f5a:	e672      	b.n	8000c42 <__aeabi_ddiv+0x176>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4693      	mov	fp, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b4      	b.n	8000cd4 <__aeabi_ddiv+0x208>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	f001 f830 	bl	8001fd0 <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e69a      	b.n	8000caa <__aeabi_ddiv+0x1de>
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d1e2      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f78:	45b8      	cmp	r8, r7
 8000f7a:	d9dc      	bls.n	8000f36 <__aeabi_ddiv+0x46a>
 8000f7c:	1a34      	subs	r4, r6, r0
 8000f7e:	469b      	mov	fp, r3
 8000f80:	e759      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc65      	bgt.n	8001052 <__aeabi_ddiv+0x586>
 8000f86:	4c50      	ldr	r4, [pc, #320]	; (80010c8 <__aeabi_ddiv+0x5fc>)
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	46a4      	mov	ip, r4
 8000f8c:	465c      	mov	r4, fp
 8000f8e:	4461      	add	r1, ip
 8000f90:	0008      	movs	r0, r1
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0011      	movs	r1, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	1e50      	subs	r0, r2, #1
 8000f9c:	4182      	sbcs	r2, r0
 8000f9e:	430c      	orrs	r4, r1
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	465a      	mov	r2, fp
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	d009      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fac:	220f      	movs	r2, #15
 8000fae:	4022      	ands	r2, r4
 8000fb0:	2a04      	cmp	r2, #4
 8000fb2:	d005      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	1d14      	adds	r4, r2, #4
 8000fb8:	4294      	cmp	r4, r2
 8000fba:	4189      	sbcs	r1, r1
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	d562      	bpl.n	800108a <__aeabi_ddiv+0x5be>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	e60d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x506>
 8000fd0:	e70a      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd2:	1e83      	subs	r3, r0, #2
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	e707      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x516>
 8000fe0:	e5e6      	b.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000fe2:	1d17      	adds	r7, r2, #4
 8000fe4:	4297      	cmp	r7, r2
 8000fe6:	4192      	sbcs	r2, r2
 8000fe8:	4253      	negs	r3, r2
 8000fea:	449b      	add	fp, r3
 8000fec:	08fa      	lsrs	r2, r7, #3
 8000fee:	e5e0      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000ff4:	e5d7      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ff6:	1871      	adds	r1, r6, r1
 8000ff8:	1e53      	subs	r3, r2, #1
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d327      	bcc.n	800104e <__aeabi_ddiv+0x582>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d315      	bcc.n	800102e <__aeabi_ddiv+0x562>
 8001002:	d058      	beq.n	80010b6 <__aeabi_ddiv+0x5ea>
 8001004:	001a      	movs	r2, r3
 8001006:	e773      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x542>
 800100c:	e604      	b.n	8000c18 <__aeabi_ddiv+0x14c>
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	449b      	add	fp, r3
 8001014:	e5cd      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8001016:	2302      	movs	r3, #2
 8001018:	4447      	add	r7, r8
 800101a:	4547      	cmp	r7, r8
 800101c:	4189      	sbcs	r1, r1
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	4249      	negs	r1, r1
 8001024:	1989      	adds	r1, r1, r6
 8001026:	190c      	adds	r4, r1, r4
 8001028:	44e3      	add	fp, ip
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	e703      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 800102e:	4643      	mov	r3, r8
 8001030:	005f      	lsls	r7, r3, #1
 8001032:	4547      	cmp	r7, r8
 8001034:	419b      	sbcs	r3, r3
 8001036:	46b8      	mov	r8, r7
 8001038:	425b      	negs	r3, r3
 800103a:	199e      	adds	r6, r3, r6
 800103c:	3a02      	subs	r2, #2
 800103e:	1989      	adds	r1, r1, r6
 8001040:	42a9      	cmp	r1, r5
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x57a>
 8001044:	e754      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001046:	4540      	cmp	r0, r8
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0x580>
 800104a:	e751      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 800104c:	e5ab      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 800104e:	001a      	movs	r2, r3
 8001050:	e7f6      	b.n	8001040 <__aeabi_ddiv+0x574>
 8001052:	211f      	movs	r1, #31
 8001054:	465f      	mov	r7, fp
 8001056:	4249      	negs	r1, r1
 8001058:	1b0c      	subs	r4, r1, r4
 800105a:	40e7      	lsrs	r7, r4
 800105c:	2b20      	cmp	r3, #32
 800105e:	d007      	beq.n	8001070 <__aeabi_ddiv+0x5a4>
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <__aeabi_ddiv+0x600>)
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	468c      	mov	ip, r1
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	465b      	mov	r3, fp
 800106c:	4083      	lsls	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	1e50      	subs	r0, r2, #1
 8001072:	4182      	sbcs	r2, r0
 8001074:	433a      	orrs	r2, r7
 8001076:	2707      	movs	r7, #7
 8001078:	2300      	movs	r3, #0
 800107a:	4017      	ands	r7, r2
 800107c:	d009      	beq.n	8001092 <__aeabi_ddiv+0x5c6>
 800107e:	210f      	movs	r1, #15
 8001080:	2300      	movs	r3, #0
 8001082:	4011      	ands	r1, r2
 8001084:	0014      	movs	r4, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d195      	bne.n	8000fb6 <__aeabi_ddiv+0x4ea>
 800108a:	0022      	movs	r2, r4
 800108c:	075f      	lsls	r7, r3, #29
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	0b1b      	lsrs	r3, r3, #12
 8001092:	08d2      	lsrs	r2, r2, #3
 8001094:	4317      	orrs	r7, r2
 8001096:	2200      	movs	r2, #0
 8001098:	e5a6      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	4659      	mov	r1, fp
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	0017      	movs	r7, r2
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 80010aa:	e59d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 80010ac:	42bd      	cmp	r5, r7
 80010ae:	d8b2      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 80010b0:	469b      	mov	fp, r3
 80010b2:	2400      	movs	r4, #0
 80010b4:	e6bf      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 80010b6:	4580      	cmp	r8, r0
 80010b8:	d3b9      	bcc.n	800102e <__aeabi_ddiv+0x562>
 80010ba:	001a      	movs	r2, r3
 80010bc:	e7c3      	b.n	8001046 <__aeabi_ddiv+0x57a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	0000043e 	.word	0x0000043e

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464f      	mov	r7, r9
 80010d4:	4646      	mov	r6, r8
 80010d6:	46d6      	mov	lr, sl
 80010d8:	4684      	mov	ip, r0
 80010da:	b5c0      	push	{r6, r7, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4e19      	ldr	r6, [pc, #100]	; (8001144 <__eqdf2+0x74>)
 80010e0:	0318      	lsls	r0, r3, #12
 80010e2:	030f      	lsls	r7, r1, #12
 80010e4:	004d      	lsls	r5, r1, #1
 80010e6:	0b00      	lsrs	r0, r0, #12
 80010e8:	005c      	lsls	r4, r3, #1
 80010ea:	4682      	mov	sl, r0
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d6d      	lsrs	r5, r5, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	4691      	mov	r9, r2
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	2001      	movs	r0, #1
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d00a      	beq.n	8001114 <__eqdf2+0x44>
 80010fe:	42b4      	cmp	r4, r6
 8001100:	d003      	beq.n	800110a <__eqdf2+0x3a>
 8001102:	42a5      	cmp	r5, r4
 8001104:	d101      	bne.n	800110a <__eqdf2+0x3a>
 8001106:	4557      	cmp	r7, sl
 8001108:	d00c      	beq.n	8001124 <__eqdf2+0x54>
 800110a:	bc1c      	pop	{r2, r3, r4}
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	46a2      	mov	sl, r4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	4666      	mov	r6, ip
 8001116:	433e      	orrs	r6, r7
 8001118:	d1f7      	bne.n	800110a <__eqdf2+0x3a>
 800111a:	42ac      	cmp	r4, r5
 800111c:	d1f5      	bne.n	800110a <__eqdf2+0x3a>
 800111e:	4654      	mov	r4, sl
 8001120:	4314      	orrs	r4, r2
 8001122:	d1f2      	bne.n	800110a <__eqdf2+0x3a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c8      	cmp	r8, r9
 8001128:	d1ef      	bne.n	800110a <__eqdf2+0x3a>
 800112a:	4299      	cmp	r1, r3
 800112c:	d007      	beq.n	800113e <__eqdf2+0x6e>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d1eb      	bne.n	800110a <__eqdf2+0x3a>
 8001132:	4663      	mov	r3, ip
 8001134:	431f      	orrs	r7, r3
 8001136:	0038      	movs	r0, r7
 8001138:	1e47      	subs	r7, r0, #1
 800113a:	41b8      	sbcs	r0, r7
 800113c:	e7e5      	b.n	800110a <__eqdf2+0x3a>
 800113e:	2000      	movs	r0, #0
 8001140:	e7e3      	b.n	800110a <__eqdf2+0x3a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff

08001148 <__gedf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	004d      	lsls	r5, r1, #1
 8001152:	b5c0      	push	{r6, r7, lr}
 8001154:	030e      	lsls	r6, r1, #12
 8001156:	0fc9      	lsrs	r1, r1, #31
 8001158:	468a      	mov	sl, r1
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <__gedf2+0xc4>)
 800115c:	031f      	lsls	r7, r3, #12
 800115e:	005c      	lsls	r4, r3, #1
 8001160:	4680      	mov	r8, r0
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d6d      	lsrs	r5, r5, #21
 8001166:	4691      	mov	r9, r2
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	0fdb      	lsrs	r3, r3, #31
 800116e:	428d      	cmp	r5, r1
 8001170:	d01e      	beq.n	80011b0 <__gedf2+0x68>
 8001172:	428c      	cmp	r4, r1
 8001174:	d016      	beq.n	80011a4 <__gedf2+0x5c>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d11e      	bne.n	80011b8 <__gedf2+0x70>
 800117a:	4330      	orrs	r0, r6
 800117c:	4684      	mov	ip, r0
 800117e:	2c00      	cmp	r4, #0
 8001180:	d101      	bne.n	8001186 <__gedf2+0x3e>
 8001182:	433a      	orrs	r2, r7
 8001184:	d023      	beq.n	80011ce <__gedf2+0x86>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d01a      	beq.n	80011c2 <__gedf2+0x7a>
 800118c:	459a      	cmp	sl, r3
 800118e:	d029      	beq.n	80011e4 <__gedf2+0x9c>
 8001190:	4651      	mov	r1, sl
 8001192:	2002      	movs	r0, #2
 8001194:	3901      	subs	r1, #1
 8001196:	4008      	ands	r0, r1
 8001198:	3801      	subs	r0, #1
 800119a:	bc1c      	pop	{r2, r3, r4}
 800119c:	4690      	mov	r8, r2
 800119e:	4699      	mov	r9, r3
 80011a0:	46a2      	mov	sl, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	0039      	movs	r1, r7
 80011a6:	4311      	orrs	r1, r2
 80011a8:	d0e5      	beq.n	8001176 <__gedf2+0x2e>
 80011aa:	2002      	movs	r0, #2
 80011ac:	4240      	negs	r0, r0
 80011ae:	e7f4      	b.n	800119a <__gedf2+0x52>
 80011b0:	4330      	orrs	r0, r6
 80011b2:	d1fa      	bne.n	80011aa <__gedf2+0x62>
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d00f      	beq.n	80011d8 <__gedf2+0x90>
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d10f      	bne.n	80011dc <__gedf2+0x94>
 80011bc:	433a      	orrs	r2, r7
 80011be:	d0e7      	beq.n	8001190 <__gedf2+0x48>
 80011c0:	e00c      	b.n	80011dc <__gedf2+0x94>
 80011c2:	2201      	movs	r2, #1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4393      	bics	r3, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	3001      	adds	r0, #1
 80011cc:	e7e5      	b.n	800119a <__gedf2+0x52>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0e1      	beq.n	800119a <__gedf2+0x52>
 80011d6:	e7db      	b.n	8001190 <__gedf2+0x48>
 80011d8:	433a      	orrs	r2, r7
 80011da:	d1e6      	bne.n	80011aa <__gedf2+0x62>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d1d7      	bne.n	8001190 <__gedf2+0x48>
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	dcd5      	bgt.n	8001190 <__gedf2+0x48>
 80011e4:	42a5      	cmp	r5, r4
 80011e6:	db05      	blt.n	80011f4 <__gedf2+0xac>
 80011e8:	42be      	cmp	r6, r7
 80011ea:	d8d1      	bhi.n	8001190 <__gedf2+0x48>
 80011ec:	d008      	beq.n	8001200 <__gedf2+0xb8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	42be      	cmp	r6, r7
 80011f2:	d2d2      	bcs.n	800119a <__gedf2+0x52>
 80011f4:	4650      	mov	r0, sl
 80011f6:	2301      	movs	r3, #1
 80011f8:	3801      	subs	r0, #1
 80011fa:	4398      	bics	r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	e7cc      	b.n	800119a <__gedf2+0x52>
 8001200:	45c8      	cmp	r8, r9
 8001202:	d8c5      	bhi.n	8001190 <__gedf2+0x48>
 8001204:	2000      	movs	r0, #0
 8001206:	45c8      	cmp	r8, r9
 8001208:	d3f4      	bcc.n	80011f4 <__gedf2+0xac>
 800120a:	e7c6      	b.n	800119a <__gedf2+0x52>
 800120c:	000007ff 	.word	0x000007ff

08001210 <__ledf2>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	4646      	mov	r6, r8
 8001216:	46d6      	mov	lr, sl
 8001218:	004d      	lsls	r5, r1, #1
 800121a:	b5c0      	push	{r6, r7, lr}
 800121c:	030e      	lsls	r6, r1, #12
 800121e:	0fc9      	lsrs	r1, r1, #31
 8001220:	468a      	mov	sl, r1
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <__ledf2+0xcc>)
 8001224:	031f      	lsls	r7, r3, #12
 8001226:	005c      	lsls	r4, r3, #1
 8001228:	4680      	mov	r8, r0
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	4691      	mov	r9, r2
 8001230:	0b3f      	lsrs	r7, r7, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	428d      	cmp	r5, r1
 8001238:	d018      	beq.n	800126c <__ledf2+0x5c>
 800123a:	428c      	cmp	r4, r1
 800123c:	d011      	beq.n	8001262 <__ledf2+0x52>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d118      	bne.n	8001274 <__ledf2+0x64>
 8001242:	4330      	orrs	r0, r6
 8001244:	4684      	mov	ip, r0
 8001246:	2c00      	cmp	r4, #0
 8001248:	d11e      	bne.n	8001288 <__ledf2+0x78>
 800124a:	433a      	orrs	r2, r7
 800124c:	d11c      	bne.n	8001288 <__ledf2+0x78>
 800124e:	4663      	mov	r3, ip
 8001250:	2000      	movs	r0, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d030      	beq.n	80012b8 <__ledf2+0xa8>
 8001256:	4651      	mov	r1, sl
 8001258:	2002      	movs	r0, #2
 800125a:	3901      	subs	r1, #1
 800125c:	4008      	ands	r0, r1
 800125e:	3801      	subs	r0, #1
 8001260:	e02a      	b.n	80012b8 <__ledf2+0xa8>
 8001262:	0039      	movs	r1, r7
 8001264:	4311      	orrs	r1, r2
 8001266:	d0ea      	beq.n	800123e <__ledf2+0x2e>
 8001268:	2002      	movs	r0, #2
 800126a:	e025      	b.n	80012b8 <__ledf2+0xa8>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fb      	bne.n	8001268 <__ledf2+0x58>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d026      	beq.n	80012c2 <__ledf2+0xb2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d126      	bne.n	80012c6 <__ledf2+0xb6>
 8001278:	433a      	orrs	r2, r7
 800127a:	d124      	bne.n	80012c6 <__ledf2+0xb6>
 800127c:	4651      	mov	r1, sl
 800127e:	2002      	movs	r0, #2
 8001280:	3901      	subs	r1, #1
 8001282:	4008      	ands	r0, r1
 8001284:	3801      	subs	r0, #1
 8001286:	e017      	b.n	80012b8 <__ledf2+0xa8>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d00f      	beq.n	80012ae <__ledf2+0x9e>
 800128e:	459a      	cmp	sl, r3
 8001290:	d1e1      	bne.n	8001256 <__ledf2+0x46>
 8001292:	42a5      	cmp	r5, r4
 8001294:	db05      	blt.n	80012a2 <__ledf2+0x92>
 8001296:	42be      	cmp	r6, r7
 8001298:	d8dd      	bhi.n	8001256 <__ledf2+0x46>
 800129a:	d019      	beq.n	80012d0 <__ledf2+0xc0>
 800129c:	2000      	movs	r0, #0
 800129e:	42be      	cmp	r6, r7
 80012a0:	d20a      	bcs.n	80012b8 <__ledf2+0xa8>
 80012a2:	4650      	mov	r0, sl
 80012a4:	2301      	movs	r3, #1
 80012a6:	3801      	subs	r0, #1
 80012a8:	4398      	bics	r0, r3
 80012aa:	3001      	adds	r0, #1
 80012ac:	e004      	b.n	80012b8 <__ledf2+0xa8>
 80012ae:	2201      	movs	r2, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4393      	bics	r3, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	3001      	adds	r0, #1
 80012b8:	bc1c      	pop	{r2, r3, r4}
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	46a2      	mov	sl, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	433a      	orrs	r2, r7
 80012c4:	d1d0      	bne.n	8001268 <__ledf2+0x58>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1c5      	bne.n	8001256 <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	dcc3      	bgt.n	8001256 <__ledf2+0x46>
 80012ce:	e7e0      	b.n	8001292 <__ledf2+0x82>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8c0      	bhi.n	8001256 <__ledf2+0x46>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d3e3      	bcc.n	80012a2 <__ledf2+0x92>
 80012da:	e7ed      	b.n	80012b8 <__ledf2+0xa8>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4657      	mov	r7, sl
 80012e4:	46de      	mov	lr, fp
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	b5e0      	push	{r5, r6, r7, lr}
 80012ec:	4683      	mov	fp, r0
 80012ee:	0006      	movs	r6, r0
 80012f0:	030f      	lsls	r7, r1, #12
 80012f2:	0048      	lsls	r0, r1, #1
 80012f4:	b087      	sub	sp, #28
 80012f6:	4692      	mov	sl, r2
 80012f8:	001d      	movs	r5, r3
 80012fa:	0b3f      	lsrs	r7, r7, #12
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	0fcc      	lsrs	r4, r1, #31
 8001300:	2800      	cmp	r0, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x26>
 8001304:	e06f      	b.n	80013e6 <__aeabi_dmul+0x106>
 8001306:	4bde      	ldr	r3, [pc, #888]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d038      	beq.n	800137e <__aeabi_dmul+0x9e>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00ff      	lsls	r7, r7, #3
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431f      	orrs	r7, r3
 8001314:	0f73      	lsrs	r3, r6, #29
 8001316:	433b      	orrs	r3, r7
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4bda      	ldr	r3, [pc, #872]	; (8001684 <__aeabi_dmul+0x3a4>)
 800131c:	2700      	movs	r7, #0
 800131e:	4699      	mov	r9, r3
 8001320:	2300      	movs	r3, #0
 8001322:	469b      	mov	fp, r3
 8001324:	00f6      	lsls	r6, r6, #3
 8001326:	4481      	add	r9, r0
 8001328:	032b      	lsls	r3, r5, #12
 800132a:	0069      	lsls	r1, r5, #1
 800132c:	0b1b      	lsrs	r3, r3, #12
 800132e:	4652      	mov	r2, sl
 8001330:	4698      	mov	r8, r3
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	0fed      	lsrs	r5, r5, #31
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x5c>
 800133a:	e085      	b.n	8001448 <__aeabi_dmul+0x168>
 800133c:	4bd0      	ldr	r3, [pc, #832]	; (8001680 <__aeabi_dmul+0x3a0>)
 800133e:	4299      	cmp	r1, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e073      	b.n	800142c <__aeabi_dmul+0x14c>
 8001344:	4643      	mov	r3, r8
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4313      	orrs	r3, r2
 800134e:	4652      	mov	r2, sl
 8001350:	48cc      	ldr	r0, [pc, #816]	; (8001684 <__aeabi_dmul+0x3a4>)
 8001352:	0f52      	lsrs	r2, r2, #29
 8001354:	4684      	mov	ip, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	4652      	mov	r2, sl
 800135a:	2000      	movs	r0, #0
 800135c:	4461      	add	r1, ip
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	4489      	add	r9, r1
 8001362:	0021      	movs	r1, r4
 8001364:	4069      	eors	r1, r5
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	468c      	mov	ip, r1
 800136a:	2101      	movs	r1, #1
 800136c:	4449      	add	r1, r9
 800136e:	468a      	mov	sl, r1
 8001370:	2f0f      	cmp	r7, #15
 8001372:	d900      	bls.n	8001376 <__aeabi_dmul+0x96>
 8001374:	e090      	b.n	8001498 <__aeabi_dmul+0x1b8>
 8001376:	49c4      	ldr	r1, [pc, #784]	; (8001688 <__aeabi_dmul+0x3a8>)
 8001378:	00bf      	lsls	r7, r7, #2
 800137a:	59cf      	ldr	r7, [r1, r7]
 800137c:	46bf      	mov	pc, r7
 800137e:	465b      	mov	r3, fp
 8001380:	433b      	orrs	r3, r7
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	d000      	beq.n	8001388 <__aeabi_dmul+0xa8>
 8001386:	e16a      	b.n	800165e <__aeabi_dmul+0x37e>
 8001388:	2302      	movs	r3, #2
 800138a:	2708      	movs	r7, #8
 800138c:	2600      	movs	r6, #0
 800138e:	4681      	mov	r9, r0
 8001390:	469b      	mov	fp, r3
 8001392:	e7c9      	b.n	8001328 <__aeabi_dmul+0x48>
 8001394:	0032      	movs	r2, r6
 8001396:	4658      	mov	r0, fp
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	4661      	mov	r1, ip
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	2802      	cmp	r0, #2
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0xc4>
 80013a2:	e075      	b.n	8001490 <__aeabi_dmul+0x1b0>
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dmul+0xca>
 80013a8:	e1fe      	b.n	80017a8 <__aeabi_dmul+0x4c8>
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dmul+0xd0>
 80013ae:	e12c      	b.n	800160a <__aeabi_dmul+0x32a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2700      	movs	r7, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	2500      	movs	r5, #0
 80013b8:	033f      	lsls	r7, r7, #12
 80013ba:	0d2a      	lsrs	r2, r5, #20
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	48b3      	ldr	r0, [pc, #716]	; (800168c <__aeabi_dmul+0x3ac>)
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	433a      	orrs	r2, r7
 80013c4:	4002      	ands	r2, r0
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	4313      	orrs	r3, r2
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	430b      	orrs	r3, r1
 80013d4:	0030      	movs	r0, r6
 80013d6:	0019      	movs	r1, r3
 80013d8:	b007      	add	sp, #28
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	465b      	mov	r3, fp
 80013e8:	433b      	orrs	r3, r7
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x110>
 80013ee:	e12f      	b.n	8001650 <__aeabi_dmul+0x370>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x116>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dmul+0x462>
 80013f6:	0038      	movs	r0, r7
 80013f8:	f000 fdea 	bl	8001fd0 <__clzsi2>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3b0b      	subs	r3, #11
 8001400:	2b1c      	cmp	r3, #28
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x126>
 8001404:	e196      	b.n	8001734 <__aeabi_dmul+0x454>
 8001406:	221d      	movs	r2, #29
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	465a      	mov	r2, fp
 800140c:	0001      	movs	r1, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	465e      	mov	r6, fp
 8001412:	3908      	subs	r1, #8
 8001414:	408f      	lsls	r7, r1
 8001416:	0013      	movs	r3, r2
 8001418:	408e      	lsls	r6, r1
 800141a:	433b      	orrs	r3, r7
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001420:	2700      	movs	r7, #0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	e77d      	b.n	8001328 <__aeabi_dmul+0x48>
 800142c:	4641      	mov	r1, r8
 800142e:	4653      	mov	r3, sl
 8001430:	430b      	orrs	r3, r1
 8001432:	4993      	ldr	r1, [pc, #588]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001434:	468c      	mov	ip, r1
 8001436:	44e1      	add	r9, ip
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0x15e>
 800143c:	e11a      	b.n	8001674 <__aeabi_dmul+0x394>
 800143e:	2202      	movs	r2, #2
 8001440:	2002      	movs	r0, #2
 8001442:	4317      	orrs	r7, r2
 8001444:	2200      	movs	r2, #0
 8001446:	e78c      	b.n	8001362 <__aeabi_dmul+0x82>
 8001448:	4313      	orrs	r3, r2
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x16e>
 800144c:	e10d      	b.n	800166a <__aeabi_dmul+0x38a>
 800144e:	4643      	mov	r3, r8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x176>
 8001454:	e181      	b.n	800175a <__aeabi_dmul+0x47a>
 8001456:	4640      	mov	r0, r8
 8001458:	f000 fdba 	bl	8001fd0 <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	2a1c      	cmp	r2, #28
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x186>
 8001464:	e172      	b.n	800174c <__aeabi_dmul+0x46c>
 8001466:	0001      	movs	r1, r0
 8001468:	4643      	mov	r3, r8
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	4698      	mov	r8, r3
 8001470:	231d      	movs	r3, #29
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	4653      	mov	r3, sl
 8001476:	40d3      	lsrs	r3, r2
 8001478:	001a      	movs	r2, r3
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	4652      	mov	r2, sl
 8001480:	408a      	lsls	r2, r1
 8001482:	4649      	mov	r1, r9
 8001484:	1a08      	subs	r0, r1, r0
 8001486:	4982      	ldr	r1, [pc, #520]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001488:	4689      	mov	r9, r1
 800148a:	4481      	add	r9, r0
 800148c:	2000      	movs	r0, #0
 800148e:	e768      	b.n	8001362 <__aeabi_dmul+0x82>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001492:	2700      	movs	r7, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e78e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001498:	0c14      	lsrs	r4, r2, #16
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	0011      	movs	r1, r2
 80014a0:	0c37      	lsrs	r7, r6, #16
 80014a2:	0436      	lsls	r6, r6, #16
 80014a4:	0c35      	lsrs	r5, r6, #16
 80014a6:	4379      	muls	r1, r7
 80014a8:	0028      	movs	r0, r5
 80014aa:	468c      	mov	ip, r1
 80014ac:	002e      	movs	r6, r5
 80014ae:	4360      	muls	r0, r4
 80014b0:	4460      	add	r0, ip
 80014b2:	4683      	mov	fp, r0
 80014b4:	4356      	muls	r6, r2
 80014b6:	0021      	movs	r1, r4
 80014b8:	0c30      	lsrs	r0, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4658      	mov	r0, fp
 80014be:	4379      	muls	r1, r7
 80014c0:	4440      	add	r0, r8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	4584      	cmp	ip, r0
 80014c6:	d906      	bls.n	80014d6 <__aeabi_dmul+0x1f6>
 80014c8:	4688      	mov	r8, r1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	468c      	mov	ip, r1
 80014d0:	44e0      	add	r8, ip
 80014d2:	4641      	mov	r1, r8
 80014d4:	9102      	str	r1, [sp, #8]
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0400      	lsls	r0, r0, #16
 80014de:	468b      	mov	fp, r1
 80014e0:	1981      	adds	r1, r0, r6
 80014e2:	0c1e      	lsrs	r6, r3, #16
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	0019      	movs	r1, r3
 80014ec:	4379      	muls	r1, r7
 80014ee:	468c      	mov	ip, r1
 80014f0:	0028      	movs	r0, r5
 80014f2:	4375      	muls	r5, r6
 80014f4:	4465      	add	r5, ip
 80014f6:	46a8      	mov	r8, r5
 80014f8:	4358      	muls	r0, r3
 80014fa:	0c05      	lsrs	r5, r0, #16
 80014fc:	4445      	add	r5, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	42a9      	cmp	r1, r5
 8001502:	d903      	bls.n	800150c <__aeabi_dmul+0x22c>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	468c      	mov	ip, r1
 800150a:	4467      	add	r7, ip
 800150c:	0c29      	lsrs	r1, r5, #16
 800150e:	468c      	mov	ip, r1
 8001510:	0039      	movs	r1, r7
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	042d      	lsls	r5, r5, #16
 8001518:	182d      	adds	r5, r5, r0
 800151a:	4461      	add	r1, ip
 800151c:	44ab      	add	fp, r5
 800151e:	9105      	str	r1, [sp, #20]
 8001520:	4659      	mov	r1, fp
 8001522:	9104      	str	r1, [sp, #16]
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	040f      	lsls	r7, r1, #16
 8001528:	0c3f      	lsrs	r7, r7, #16
 800152a:	0c08      	lsrs	r0, r1, #16
 800152c:	0039      	movs	r1, r7
 800152e:	4351      	muls	r1, r2
 8001530:	4342      	muls	r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	0002      	movs	r2, r0
 8001536:	468c      	mov	ip, r1
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	468b      	mov	fp, r1
 800153c:	4362      	muls	r2, r4
 800153e:	437c      	muls	r4, r7
 8001540:	4444      	add	r4, r8
 8001542:	445c      	add	r4, fp
 8001544:	45a0      	cmp	r8, r4
 8001546:	d903      	bls.n	8001550 <__aeabi_dmul+0x270>
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	4688      	mov	r8, r1
 800154e:	4442      	add	r2, r8
 8001550:	0c21      	lsrs	r1, r4, #16
 8001552:	4688      	mov	r8, r1
 8001554:	4661      	mov	r1, ip
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	468c      	mov	ip, r1
 800155c:	0039      	movs	r1, r7
 800155e:	4359      	muls	r1, r3
 8001560:	4343      	muls	r3, r0
 8001562:	4370      	muls	r0, r6
 8001564:	437e      	muls	r6, r7
 8001566:	0c0f      	lsrs	r7, r1, #16
 8001568:	18f6      	adds	r6, r6, r3
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	19be      	adds	r6, r7, r6
 800156e:	4464      	add	r4, ip
 8001570:	4442      	add	r2, r8
 8001572:	468c      	mov	ip, r1
 8001574:	42b3      	cmp	r3, r6
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x2a0>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4698      	mov	r8, r3
 800157e:	4440      	add	r0, r8
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	4661      	mov	r1, ip
 8001584:	4698      	mov	r8, r3
 8001586:	9b04      	ldr	r3, [sp, #16]
 8001588:	0437      	lsls	r7, r6, #16
 800158a:	4443      	add	r3, r8
 800158c:	469b      	mov	fp, r3
 800158e:	45ab      	cmp	fp, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426b      	negs	r3, r5
 8001594:	040d      	lsls	r5, r1, #16
 8001596:	9905      	ldr	r1, [sp, #20]
 8001598:	0c2d      	lsrs	r5, r5, #16
 800159a:	468c      	mov	ip, r1
 800159c:	197f      	adds	r7, r7, r5
 800159e:	4467      	add	r7, ip
 80015a0:	18fd      	adds	r5, r7, r3
 80015a2:	46a8      	mov	r8, r5
 80015a4:	465d      	mov	r5, fp
 80015a6:	192d      	adds	r5, r5, r4
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	41a4      	sbcs	r4, r4
 80015ac:	4693      	mov	fp, r2
 80015ae:	4264      	negs	r4, r4
 80015b0:	46a4      	mov	ip, r4
 80015b2:	44c3      	add	fp, r8
 80015b4:	44dc      	add	ip, fp
 80015b6:	428f      	cmp	r7, r1
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	4598      	cmp	r8, r3
 80015bc:	419b      	sbcs	r3, r3
 80015be:	4593      	cmp	fp, r2
 80015c0:	4192      	sbcs	r2, r2
 80015c2:	45a4      	cmp	ip, r4
 80015c4:	41a4      	sbcs	r4, r4
 80015c6:	425b      	negs	r3, r3
 80015c8:	427f      	negs	r7, r7
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c36      	lsrs	r6, r6, #16
 80015ce:	4252      	negs	r2, r2
 80015d0:	4264      	negs	r4, r4
 80015d2:	19bf      	adds	r7, r7, r6
 80015d4:	4322      	orrs	r2, r4
 80015d6:	18bf      	adds	r7, r7, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	0243      	lsls	r3, r0, #9
 80015de:	0dd2      	lsrs	r2, r2, #23
 80015e0:	9903      	ldr	r1, [sp, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	026a      	lsls	r2, r5, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	1e50      	subs	r0, r2, #1
 80015ea:	4182      	sbcs	r2, r0
 80015ec:	4661      	mov	r1, ip
 80015ee:	0ded      	lsrs	r5, r5, #23
 80015f0:	432a      	orrs	r2, r5
 80015f2:	024e      	lsls	r6, r1, #9
 80015f4:	4332      	orrs	r2, r6
 80015f6:	01d9      	lsls	r1, r3, #7
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dmul+0x31c>
 80015fa:	e0b3      	b.n	8001764 <__aeabi_dmul+0x484>
 80015fc:	2601      	movs	r6, #1
 80015fe:	0850      	lsrs	r0, r2, #1
 8001600:	4032      	ands	r2, r6
 8001602:	4302      	orrs	r2, r0
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	4332      	orrs	r2, r6
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <__aeabi_dmul+0x3b4>)
 800160c:	4454      	add	r4, sl
 800160e:	2c00      	cmp	r4, #0
 8001610:	dd62      	ble.n	80016d8 <__aeabi_dmul+0x3f8>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d009      	beq.n	800162a <__aeabi_dmul+0x34a>
 8001616:	200f      	movs	r0, #15
 8001618:	4010      	ands	r0, r2
 800161a:	2804      	cmp	r0, #4
 800161c:	d005      	beq.n	800162a <__aeabi_dmul+0x34a>
 800161e:	1d10      	adds	r0, r2, #4
 8001620:	4290      	cmp	r0, r2
 8001622:	4192      	sbcs	r2, r2
 8001624:	4252      	negs	r2, r2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	0002      	movs	r2, r0
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d504      	bpl.n	8001638 <__aeabi_dmul+0x358>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <__aeabi_dmul+0x3b8>)
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4003      	ands	r3, r0
 8001636:	4454      	add	r4, sl
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <__aeabi_dmul+0x3bc>)
 800163a:	4284      	cmp	r4, r0
 800163c:	dd00      	ble.n	8001640 <__aeabi_dmul+0x360>
 800163e:	e727      	b.n	8001490 <__aeabi_dmul+0x1b0>
 8001640:	075e      	lsls	r6, r3, #29
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	0b1f      	lsrs	r7, r3, #12
 8001648:	0563      	lsls	r3, r4, #21
 800164a:	4316      	orrs	r6, r2
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	e6b2      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	3301      	adds	r3, #1
 8001656:	2704      	movs	r7, #4
 8001658:	2600      	movs	r6, #0
 800165a:	469b      	mov	fp, r3
 800165c:	e664      	b.n	8001328 <__aeabi_dmul+0x48>
 800165e:	2303      	movs	r3, #3
 8001660:	9701      	str	r7, [sp, #4]
 8001662:	4681      	mov	r9, r0
 8001664:	270c      	movs	r7, #12
 8001666:	469b      	mov	fp, r3
 8001668:	e65e      	b.n	8001328 <__aeabi_dmul+0x48>
 800166a:	2201      	movs	r2, #1
 800166c:	2001      	movs	r0, #1
 800166e:	4317      	orrs	r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	e676      	b.n	8001362 <__aeabi_dmul+0x82>
 8001674:	2303      	movs	r3, #3
 8001676:	2003      	movs	r0, #3
 8001678:	431f      	orrs	r7, r3
 800167a:	4643      	mov	r3, r8
 800167c:	e671      	b.n	8001362 <__aeabi_dmul+0x82>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc01 	.word	0xfffffc01
 8001688:	080088a8 	.word	0x080088a8
 800168c:	800fffff 	.word	0x800fffff
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	2300      	movs	r3, #0
 80016a2:	2780      	movs	r7, #128	; 0x80
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	033f      	lsls	r7, r7, #12
 80016a8:	2600      	movs	r6, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016ac:	e683      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	0032      	movs	r2, r6
 80016b2:	46a4      	mov	ip, r4
 80016b4:	4658      	mov	r0, fp
 80016b6:	e670      	b.n	800139a <__aeabi_dmul+0xba>
 80016b8:	46ac      	mov	ip, r5
 80016ba:	e66e      	b.n	800139a <__aeabi_dmul+0xba>
 80016bc:	2780      	movs	r7, #128	; 0x80
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	033f      	lsls	r7, r7, #12
 80016c2:	4239      	tst	r1, r7
 80016c4:	d02d      	beq.n	8001722 <__aeabi_dmul+0x442>
 80016c6:	423b      	tst	r3, r7
 80016c8:	d12b      	bne.n	8001722 <__aeabi_dmul+0x442>
 80016ca:	431f      	orrs	r7, r3
 80016cc:	033f      	lsls	r7, r7, #12
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	0016      	movs	r6, r2
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016d8:	2501      	movs	r5, #1
 80016da:	1b2d      	subs	r5, r5, r4
 80016dc:	2d38      	cmp	r5, #56	; 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x402>
 80016e0:	e666      	b.n	80013b0 <__aeabi_dmul+0xd0>
 80016e2:	2d1f      	cmp	r5, #31
 80016e4:	dc40      	bgt.n	8001768 <__aeabi_dmul+0x488>
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <__aeabi_dmul+0x4dc>)
 80016e8:	001c      	movs	r4, r3
 80016ea:	4450      	add	r0, sl
 80016ec:	0016      	movs	r6, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	40ee      	lsrs	r6, r5
 80016f4:	1e50      	subs	r0, r2, #1
 80016f6:	4182      	sbcs	r2, r0
 80016f8:	4334      	orrs	r4, r6
 80016fa:	4314      	orrs	r4, r2
 80016fc:	40eb      	lsrs	r3, r5
 80016fe:	0762      	lsls	r2, r4, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_dmul+0x436>
 8001702:	220f      	movs	r2, #15
 8001704:	4022      	ands	r2, r4
 8001706:	2a04      	cmp	r2, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_dmul+0x436>
 800170a:	0022      	movs	r2, r4
 800170c:	1d14      	adds	r4, r2, #4
 800170e:	4294      	cmp	r4, r2
 8001710:	4180      	sbcs	r0, r0
 8001712:	4240      	negs	r0, r0
 8001714:	181b      	adds	r3, r3, r0
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	d53e      	bpl.n	8001798 <__aeabi_dmul+0x4b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2700      	movs	r7, #0
 800171e:	2600      	movs	r6, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001722:	2780      	movs	r7, #128	; 0x80
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	033f      	lsls	r7, r7, #12
 8001728:	431f      	orrs	r7, r3
 800172a:	033f      	lsls	r7, r7, #12
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4d8>)
 8001732:	e640      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001734:	0003      	movs	r3, r0
 8001736:	465a      	mov	r2, fp
 8001738:	3b28      	subs	r3, #40	; 0x28
 800173a:	409a      	lsls	r2, r3
 800173c:	2600      	movs	r6, #0
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	e66d      	b.n	800141e <__aeabi_dmul+0x13e>
 8001742:	4658      	mov	r0, fp
 8001744:	f000 fc44 	bl	8001fd0 <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e657      	b.n	80013fc <__aeabi_dmul+0x11c>
 800174c:	0003      	movs	r3, r0
 800174e:	4652      	mov	r2, sl
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	e693      	b.n	8001482 <__aeabi_dmul+0x1a2>
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fc38 	bl	8001fd0 <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e67b      	b.n	800145c <__aeabi_dmul+0x17c>
 8001764:	46ca      	mov	sl, r9
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x32a>
 8001768:	201f      	movs	r0, #31
 800176a:	001e      	movs	r6, r3
 800176c:	4240      	negs	r0, r0
 800176e:	1b04      	subs	r4, r0, r4
 8001770:	40e6      	lsrs	r6, r4
 8001772:	2d20      	cmp	r5, #32
 8001774:	d003      	beq.n	800177e <__aeabi_dmul+0x49e>
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4e0>)
 8001778:	4454      	add	r4, sl
 800177a:	40a3      	lsls	r3, r4
 800177c:	431a      	orrs	r2, r3
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4332      	orrs	r2, r6
 8001784:	2607      	movs	r6, #7
 8001786:	2700      	movs	r7, #0
 8001788:	4016      	ands	r6, r2
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x4c0>
 800178c:	200f      	movs	r0, #15
 800178e:	2300      	movs	r3, #0
 8001790:	4010      	ands	r0, r2
 8001792:	0014      	movs	r4, r2
 8001794:	2804      	cmp	r0, #4
 8001796:	d1b9      	bne.n	800170c <__aeabi_dmul+0x42c>
 8001798:	0022      	movs	r2, r4
 800179a:	075e      	lsls	r6, r3, #29
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	0b1f      	lsrs	r7, r3, #12
 80017a0:	08d2      	lsrs	r2, r2, #3
 80017a2:	4316      	orrs	r6, r2
 80017a4:	2300      	movs	r3, #0
 80017a6:	e606      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017a8:	2780      	movs	r7, #128	; 0x80
 80017aa:	033f      	lsls	r7, r7, #12
 80017ac:	431f      	orrs	r7, r3
 80017ae:	033f      	lsls	r7, r7, #12
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	4b00      	ldr	r3, [pc, #0]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80017b6:	e5fe      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	0000043e 	.word	0x0000043e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	000c      	movs	r4, r1
 80017d0:	0309      	lsls	r1, r1, #12
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	0a49      	lsrs	r1, r1, #9
 80017d6:	0f46      	lsrs	r6, r0, #29
 80017d8:	005f      	lsls	r7, r3, #1
 80017da:	4331      	orrs	r1, r6
 80017dc:	031e      	lsls	r6, r3, #12
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	0a76      	lsrs	r6, r6, #9
 80017e2:	469b      	mov	fp, r3
 80017e4:	0f53      	lsrs	r3, r2, #29
 80017e6:	4333      	orrs	r3, r6
 80017e8:	4ec8      	ldr	r6, [pc, #800]	; (8001b0c <__aeabi_dsub+0x348>)
 80017ea:	0065      	lsls	r5, r4, #1
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	0fe4      	lsrs	r4, r4, #31
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	0d6d      	lsrs	r5, r5, #21
 80017f4:	46a2      	mov	sl, r4
 80017f6:	4681      	mov	r9, r0
 80017f8:	0d7f      	lsrs	r7, r7, #21
 80017fa:	469c      	mov	ip, r3
 80017fc:	4690      	mov	r8, r2
 80017fe:	42b7      	cmp	r7, r6
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b9      	b.n	8001978 <__aeabi_dsub+0x1b4>
 8001804:	465b      	mov	r3, fp
 8001806:	2601      	movs	r6, #1
 8001808:	4073      	eors	r3, r6
 800180a:	469b      	mov	fp, r3
 800180c:	1bee      	subs	r6, r5, r7
 800180e:	45a3      	cmp	fp, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x50>
 8001812:	e083      	b.n	800191c <__aeabi_dsub+0x158>
 8001814:	2e00      	cmp	r6, #0
 8001816:	dd63      	ble.n	80018e0 <__aeabi_dsub+0x11c>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x5a>
 800181c:	e0b1      	b.n	8001982 <__aeabi_dsub+0x1be>
 800181e:	4663      	mov	r3, ip
 8001820:	4313      	orrs	r3, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e123      	b.n	8001a6e <__aeabi_dsub+0x2aa>
 8001826:	1e73      	subs	r3, r6, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e1ba      	b.n	8001ba4 <__aeabi_dsub+0x3e0>
 800182e:	1a86      	subs	r6, r0, r2
 8001830:	4663      	mov	r3, ip
 8001832:	42b0      	cmp	r0, r6
 8001834:	4180      	sbcs	r0, r0
 8001836:	2501      	movs	r5, #1
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	4240      	negs	r0, r0
 800183c:	1a09      	subs	r1, r1, r0
 800183e:	020b      	lsls	r3, r1, #8
 8001840:	d400      	bmi.n	8001844 <__aeabi_dsub+0x80>
 8001842:	e147      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	0a4b      	lsrs	r3, r1, #9
 8001848:	4698      	mov	r8, r3
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x8e>
 8001850:	e189      	b.n	8001b66 <__aeabi_dsub+0x3a2>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fbbc 	bl	8001fd0 <__clzsi2>
 8001858:	0003      	movs	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd00      	ble.n	8001862 <__aeabi_dsub+0x9e>
 8001860:	e17c      	b.n	8001b5c <__aeabi_dsub+0x398>
 8001862:	2220      	movs	r2, #32
 8001864:	0030      	movs	r0, r6
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	4641      	mov	r1, r8
 800186a:	40d0      	lsrs	r0, r2
 800186c:	4099      	lsls	r1, r3
 800186e:	0002      	movs	r2, r0
 8001870:	409e      	lsls	r6, r3
 8001872:	430a      	orrs	r2, r1
 8001874:	429d      	cmp	r5, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0xb6>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dsub+0x38c>
 800187a:	1b5d      	subs	r5, r3, r5
 800187c:	1c6b      	adds	r3, r5, #1
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xc0>
 8001882:	e194      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001884:	2120      	movs	r1, #32
 8001886:	0010      	movs	r0, r2
 8001888:	0035      	movs	r5, r6
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	408e      	lsls	r6, r1
 800188e:	40da      	lsrs	r2, r3
 8001890:	4088      	lsls	r0, r1
 8001892:	40dd      	lsrs	r5, r3
 8001894:	1e71      	subs	r1, r6, #1
 8001896:	418e      	sbcs	r6, r1
 8001898:	0011      	movs	r1, r2
 800189a:	2207      	movs	r2, #7
 800189c:	4328      	orrs	r0, r5
 800189e:	2500      	movs	r5, #0
 80018a0:	4306      	orrs	r6, r0
 80018a2:	4032      	ands	r2, r6
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d009      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018a8:	230f      	movs	r3, #15
 80018aa:	4033      	ands	r3, r6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	41b6      	sbcs	r6, r6
 80018b6:	4276      	negs	r6, r6
 80018b8:	1989      	adds	r1, r1, r6
 80018ba:	001e      	movs	r6, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xfe>
 80018c0:	e23d      	b.n	8001d3e <__aeabi_dsub+0x57a>
 80018c2:	1c6a      	adds	r2, r5, #1
 80018c4:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <__aeabi_dsub+0x348>)
 80018c6:	0555      	lsls	r5, r2, #21
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x10c>
 80018ce:	e119      	b.n	8001b04 <__aeabi_dsub+0x340>
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <__aeabi_dsub+0x34c>)
 80018d2:	08f6      	lsrs	r6, r6, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	0757      	lsls	r7, r2, #29
 80018d8:	0252      	lsls	r2, r2, #9
 80018da:	4337      	orrs	r7, r6
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	e09b      	b.n	8001a18 <__aeabi_dsub+0x254>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x122>
 80018e4:	e0c5      	b.n	8001a72 <__aeabi_dsub+0x2ae>
 80018e6:	1c6e      	adds	r6, r5, #1
 80018e8:	0576      	lsls	r6, r6, #21
 80018ea:	0d76      	lsrs	r6, r6, #21
 80018ec:	2e01      	cmp	r6, #1
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dsub+0x12e>
 80018f0:	e148      	b.n	8001b84 <__aeabi_dsub+0x3c0>
 80018f2:	4667      	mov	r7, ip
 80018f4:	1a86      	subs	r6, r0, r2
 80018f6:	1bcb      	subs	r3, r1, r7
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	41bf      	sbcs	r7, r7
 80018fc:	427f      	negs	r7, r7
 80018fe:	46b8      	mov	r8, r7
 8001900:	001f      	movs	r7, r3
 8001902:	4643      	mov	r3, r8
 8001904:	1aff      	subs	r7, r7, r3
 8001906:	003b      	movs	r3, r7
 8001908:	46b8      	mov	r8, r7
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d500      	bpl.n	8001910 <__aeabi_dsub+0x14c>
 800190e:	e15f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001910:	4337      	orrs	r7, r6
 8001912:	d19a      	bne.n	800184a <__aeabi_dsub+0x86>
 8001914:	2200      	movs	r2, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e079      	b.n	8001a10 <__aeabi_dsub+0x24c>
 800191c:	2e00      	cmp	r6, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x15e>
 8001920:	e0fa      	b.n	8001b18 <__aeabi_dsub+0x354>
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x164>
 8001926:	e08d      	b.n	8001a44 <__aeabi_dsub+0x280>
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <__aeabi_dsub+0x348>)
 800192a:	429d      	cmp	r5, r3
 800192c:	d067      	beq.n	80019fe <__aeabi_dsub+0x23a>
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	4667      	mov	r7, ip
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431f      	orrs	r7, r3
 8001936:	46bc      	mov	ip, r7
 8001938:	2e38      	cmp	r6, #56	; 0x38
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x17a>
 800193c:	e152      	b.n	8001be4 <__aeabi_dsub+0x420>
 800193e:	4663      	mov	r3, ip
 8001940:	4313      	orrs	r3, r2
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	4193      	sbcs	r3, r2
 8001946:	181e      	adds	r6, r3, r0
 8001948:	4286      	cmp	r6, r0
 800194a:	4180      	sbcs	r0, r0
 800194c:	4240      	negs	r0, r0
 800194e:	1809      	adds	r1, r1, r0
 8001950:	020b      	lsls	r3, r1, #8
 8001952:	d400      	bmi.n	8001956 <__aeabi_dsub+0x192>
 8001954:	e0be      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <__aeabi_dsub+0x348>)
 8001958:	3501      	adds	r5, #1
 800195a:	429d      	cmp	r5, r3
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x19c>
 800195e:	e0d2      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <__aeabi_dsub+0x34c>)
 8001962:	0873      	lsrs	r3, r6, #1
 8001964:	400a      	ands	r2, r1
 8001966:	2101      	movs	r1, #1
 8001968:	400e      	ands	r6, r1
 800196a:	431e      	orrs	r6, r3
 800196c:	0851      	lsrs	r1, r2, #1
 800196e:	07d3      	lsls	r3, r2, #31
 8001970:	2207      	movs	r2, #7
 8001972:	431e      	orrs	r6, r3
 8001974:	4032      	ands	r2, r6
 8001976:	e795      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001978:	001e      	movs	r6, r3
 800197a:	4316      	orrs	r6, r2
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1bc>
 800197e:	e745      	b.n	800180c <__aeabi_dsub+0x48>
 8001980:	e740      	b.n	8001804 <__aeabi_dsub+0x40>
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_dsub+0x348>)
 8001984:	429d      	cmp	r5, r3
 8001986:	d03a      	beq.n	80019fe <__aeabi_dsub+0x23a>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	4667      	mov	r7, ip
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431f      	orrs	r7, r3
 8001990:	46bc      	mov	ip, r7
 8001992:	2e38      	cmp	r6, #56	; 0x38
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e0eb      	b.n	8001b70 <__aeabi_dsub+0x3ac>
 8001998:	2e1f      	cmp	r6, #31
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x1da>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x450>
 800199e:	0033      	movs	r3, r6
 80019a0:	4667      	mov	r7, ip
 80019a2:	3b20      	subs	r3, #32
 80019a4:	40df      	lsrs	r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	2e20      	cmp	r6, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dsub+0x1f4>
 80019ac:	2740      	movs	r7, #64	; 0x40
 80019ae:	1bbf      	subs	r7, r7, r6
 80019b0:	4666      	mov	r6, ip
 80019b2:	40be      	lsls	r6, r7
 80019b4:	4332      	orrs	r2, r6
 80019b6:	4690      	mov	r8, r2
 80019b8:	4646      	mov	r6, r8
 80019ba:	1e72      	subs	r2, r6, #1
 80019bc:	4196      	sbcs	r6, r2
 80019be:	4333      	orrs	r3, r6
 80019c0:	e0da      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x204>
 80019c6:	e214      	b.n	8001df2 <__aeabi_dsub+0x62e>
 80019c8:	4663      	mov	r3, ip
 80019ca:	4313      	orrs	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e168      	b.n	8001ca2 <__aeabi_dsub+0x4de>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	074e      	lsls	r6, r1, #29
 80019d4:	08c0      	lsrs	r0, r0, #3
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4306      	orrs	r6, r0
 80019dc:	4219      	tst	r1, r3
 80019de:	d008      	beq.n	80019f2 <__aeabi_dsub+0x22e>
 80019e0:	4660      	mov	r0, ip
 80019e2:	08c0      	lsrs	r0, r0, #3
 80019e4:	4218      	tst	r0, r3
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dsub+0x22e>
 80019e8:	4663      	mov	r3, ip
 80019ea:	0001      	movs	r1, r0
 80019ec:	08d2      	lsrs	r2, r2, #3
 80019ee:	075e      	lsls	r6, r3, #29
 80019f0:	4316      	orrs	r6, r2
 80019f2:	00f3      	lsls	r3, r6, #3
 80019f4:	4699      	mov	r9, r3
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	4d44      	ldr	r5, [pc, #272]	; (8001b0c <__aeabi_dsub+0x348>)
 80019fc:	4311      	orrs	r1, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	08de      	lsrs	r6, r3, #3
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a04:	074f      	lsls	r7, r1, #29
 8001a06:	4337      	orrs	r7, r6
 8001a08:	08ca      	lsrs	r2, r1, #3
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x24c>
 8001a0e:	e06e      	b.n	8001aee <__aeabi_dsub+0x32a>
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	056d      	lsls	r5, r5, #21
 8001a14:	0b12      	lsrs	r2, r2, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	0b13      	lsrs	r3, r2, #12
 8001a1e:	0d0a      	lsrs	r2, r1, #20
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	431a      	orrs	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <__aeabi_dsub+0x350>)
 8001a26:	052d      	lsls	r5, r5, #20
 8001a28:	4013      	ands	r3, r2
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0038      	movs	r0, r7
 8001a36:	0019      	movs	r1, r3
 8001a38:	bc3c      	pop	{r2, r3, r4, r5}
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	46ab      	mov	fp, r5
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d011      	beq.n	8001a6e <__aeabi_dsub+0x2aa>
 8001a4a:	1e73      	subs	r3, r6, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x28e>
 8001a50:	e107      	b.n	8001c62 <__aeabi_dsub+0x49e>
 8001a52:	1886      	adds	r6, r0, r2
 8001a54:	4286      	cmp	r6, r0
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4461      	add	r1, ip
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1809      	adds	r1, r1, r0
 8001a5e:	2501      	movs	r5, #1
 8001a60:	020b      	lsls	r3, r1, #8
 8001a62:	d537      	bpl.n	8001ad4 <__aeabi_dsub+0x310>
 8001a64:	2502      	movs	r5, #2
 8001a66:	e77b      	b.n	8001960 <__aeabi_dsub+0x19c>
 8001a68:	003e      	movs	r6, r7
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	0035      	movs	r5, r6
 8001a70:	e7c5      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001a72:	465c      	mov	r4, fp
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2b6>
 8001a78:	e0e1      	b.n	8001c3e <__aeabi_dsub+0x47a>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	d0f3      	beq.n	8001a68 <__aeabi_dsub+0x2a4>
 8001a80:	1c73      	adds	r3, r6, #1
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2c2>
 8001a84:	e1ac      	b.n	8001de0 <__aeabi_dsub+0x61c>
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a88:	429f      	cmp	r7, r3
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e13a      	b.n	8001d04 <__aeabi_dsub+0x540>
 8001a8e:	43f3      	mvns	r3, r6
 8001a90:	2b38      	cmp	r3, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x2d2>
 8001a94:	e16f      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x2d8>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_dsub+0x5f2>
 8001a9c:	2520      	movs	r5, #32
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	1aed      	subs	r5, r5, r3
 8001aa2:	40ae      	lsls	r6, r5
 8001aa4:	46b0      	mov	r8, r6
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	46aa      	mov	sl, r5
 8001aaa:	40de      	lsrs	r6, r3
 8001aac:	4645      	mov	r5, r8
 8001aae:	4335      	orrs	r5, r6
 8001ab0:	002e      	movs	r6, r5
 8001ab2:	4655      	mov	r5, sl
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	40a8      	lsls	r0, r5
 8001ab8:	4663      	mov	r3, ip
 8001aba:	1e45      	subs	r5, r0, #1
 8001abc:	41a8      	sbcs	r0, r5
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	1a16      	subs	r6, r2, r0
 8001ac6:	42b2      	cmp	r2, r6
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	4663      	mov	r3, ip
 8001acc:	4252      	negs	r2, r2
 8001ace:	1a99      	subs	r1, r3, r2
 8001ad0:	003d      	movs	r5, r7
 8001ad2:	e6b4      	b.n	800183e <__aeabi_dsub+0x7a>
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4032      	ands	r2, r6
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_dsub+0xe4>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__aeabi_dsub+0x348>)
 8001ae0:	08f6      	lsrs	r6, r6, #3
 8001ae2:	074f      	lsls	r7, r1, #29
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	08ca      	lsrs	r2, r1, #3
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x32a>
 8001aec:	e790      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001aee:	003b      	movs	r3, r7
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x332>
 8001af4:	e1a6      	b.n	8001e44 <__aeabi_dsub+0x680>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	4d02      	ldr	r5, [pc, #8]	; (8001b0c <__aeabi_dsub+0x348>)
 8001b02:	e789      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b04:	0015      	movs	r5, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	e785      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	800fffff 	.word	0x800fffff
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x35a>
 8001b1c:	e0c7      	b.n	8001cae <__aeabi_dsub+0x4ea>
 8001b1e:	1c6b      	adds	r3, r5, #1
 8001b20:	055e      	lsls	r6, r3, #21
 8001b22:	0d76      	lsrs	r6, r6, #21
 8001b24:	2e01      	cmp	r6, #1
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x366>
 8001b28:	e0f0      	b.n	8001d0c <__aeabi_dsub+0x548>
 8001b2a:	4dc8      	ldr	r5, [pc, #800]	; (8001e4c <__aeabi_dsub+0x688>)
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x36e>
 8001b30:	e0b9      	b.n	8001ca6 <__aeabi_dsub+0x4e2>
 8001b32:	1885      	adds	r5, r0, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	4285      	cmp	r5, r0
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	1851      	adds	r1, r2, r1
 8001b40:	2207      	movs	r2, #7
 8001b42:	07ce      	lsls	r6, r1, #31
 8001b44:	086d      	lsrs	r5, r5, #1
 8001b46:	432e      	orrs	r6, r5
 8001b48:	0849      	lsrs	r1, r1, #1
 8001b4a:	4032      	ands	r2, r6
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	e6a9      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b50:	49bf      	ldr	r1, [pc, #764]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001b52:	1aed      	subs	r5, r5, r3
 8001b54:	4011      	ands	r1, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	4032      	ands	r2, r6
 8001b5a:	e6a3      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	3828      	subs	r0, #40	; 0x28
 8001b60:	4082      	lsls	r2, r0
 8001b62:	2600      	movs	r6, #0
 8001b64:	e686      	b.n	8001874 <__aeabi_dsub+0xb0>
 8001b66:	0030      	movs	r0, r6
 8001b68:	f000 fa32 	bl	8001fd0 <__clzsi2>
 8001b6c:	3020      	adds	r0, #32
 8001b6e:	e673      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b70:	4663      	mov	r3, ip
 8001b72:	4313      	orrs	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	4193      	sbcs	r3, r2
 8001b78:	1ac6      	subs	r6, r0, r3
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	e65c      	b.n	800183e <__aeabi_dsub+0x7a>
 8001b84:	000e      	movs	r6, r1
 8001b86:	4667      	mov	r7, ip
 8001b88:	4306      	orrs	r6, r0
 8001b8a:	4317      	orrs	r7, r2
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d15e      	bne.n	8001c4e <__aeabi_dsub+0x48a>
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3d2>
 8001b94:	e0f3      	b.n	8001d7e <__aeabi_dsub+0x5ba>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x3d8>
 8001b9a:	e11e      	b.n	8001dda <__aeabi_dsub+0x616>
 8001b9c:	465c      	mov	r4, fp
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	e72c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ba4:	4fa9      	ldr	r7, [pc, #676]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ba6:	42be      	cmp	r6, r7
 8001ba8:	d07b      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001baa:	001e      	movs	r6, r3
 8001bac:	e6f1      	b.n	8001992 <__aeabi_dsub+0x1ce>
 8001bae:	0010      	movs	r0, r2
 8001bb0:	3d1f      	subs	r5, #31
 8001bb2:	40e8      	lsrs	r0, r5
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4316      	orrs	r6, r2
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	419e      	sbcs	r6, r3
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4032      	ands	r2, r6
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e783      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd0:	1a16      	subs	r6, r2, r0
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	42b2      	cmp	r2, r6
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	1a59      	subs	r1, r3, r1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1a0b      	subs	r3, r1, r0
 8001bde:	4698      	mov	r8, r3
 8001be0:	465c      	mov	r4, fp
 8001be2:	e632      	b.n	800184a <__aeabi_dsub+0x86>
 8001be4:	2e1f      	cmp	r6, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0ab      	b.n	8001d42 <__aeabi_dsub+0x57e>
 8001bea:	2720      	movs	r7, #32
 8001bec:	1bbb      	subs	r3, r7, r6
 8001bee:	469a      	mov	sl, r3
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	40bb      	lsls	r3, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	464f      	mov	r7, r9
 8001bfc:	40f3      	lsrs	r3, r6
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	4657      	mov	r7, sl
 8001c04:	40ba      	lsls	r2, r7
 8001c06:	1e57      	subs	r7, r2, #1
 8001c08:	41ba      	sbcs	r2, r7
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4662      	mov	r2, ip
 8001c0e:	40f2      	lsrs	r2, r6
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	e698      	b.n	8001946 <__aeabi_dsub+0x182>
 8001c14:	2720      	movs	r7, #32
 8001c16:	1bbb      	subs	r3, r7, r6
 8001c18:	469a      	mov	sl, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	40bb      	lsls	r3, r7
 8001c20:	4699      	mov	r9, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	464f      	mov	r7, r9
 8001c26:	40f3      	lsrs	r3, r6
 8001c28:	431f      	orrs	r7, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4657      	mov	r7, sl
 8001c2e:	40ba      	lsls	r2, r7
 8001c30:	1e57      	subs	r7, r2, #1
 8001c32:	41ba      	sbcs	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4662      	mov	r2, ip
 8001c38:	40f2      	lsrs	r2, r6
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	e79c      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d05f      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001c44:	2580      	movs	r5, #128	; 0x80
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	e720      	b.n	8001a90 <__aeabi_dsub+0x2cc>
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x494>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_dsub+0x636>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	4d7b      	ldr	r5, [pc, #492]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c60:	e6cd      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001c62:	4f7a      	ldr	r7, [pc, #488]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c64:	42be      	cmp	r6, r7
 8001c66:	d01c      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e665      	b.n	8001938 <__aeabi_dsub+0x174>
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d018      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	074e      	lsls	r6, r1, #29
 8001c74:	4306      	orrs	r6, r0
 8001c76:	2080      	movs	r0, #128	; 0x80
 8001c78:	08c9      	lsrs	r1, r1, #3
 8001c7a:	0300      	lsls	r0, r0, #12
 8001c7c:	4201      	tst	r1, r0
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c80:	4663      	mov	r3, ip
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	4204      	tst	r4, r0
 8001c86:	d104      	bne.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c88:	0021      	movs	r1, r4
 8001c8a:	46da      	mov	sl, fp
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	075e      	lsls	r6, r3, #29
 8001c90:	4316      	orrs	r6, r2
 8001c92:	00f3      	lsls	r3, r6, #3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2401      	movs	r4, #1
 8001c98:	4653      	mov	r3, sl
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	4d6a      	ldr	r5, [pc, #424]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ca4:	e6ab      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2700      	movs	r7, #0
 8001cac:	e6b4      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d159      	bne.n	8001d66 <__aeabi_dsub+0x5a2>
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x4f6>
 8001cb8:	e6d6      	b.n	8001a68 <__aeabi_dsub+0x2a4>
 8001cba:	1c73      	adds	r3, r6, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4fc>
 8001cbe:	e0b2      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <__aeabi_dsub+0x688>)
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	d01e      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001cc6:	43f3      	mvns	r3, r6
 8001cc8:	2b38      	cmp	r3, #56	; 0x38
 8001cca:	dc6f      	bgt.n	8001dac <__aeabi_dsub+0x5e8>
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e097      	b.n	8001e02 <__aeabi_dsub+0x63e>
 8001cd2:	2520      	movs	r5, #32
 8001cd4:	000e      	movs	r6, r1
 8001cd6:	1aed      	subs	r5, r5, r3
 8001cd8:	40ae      	lsls	r6, r5
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0006      	movs	r6, r0
 8001cde:	46aa      	mov	sl, r5
 8001ce0:	40de      	lsrs	r6, r3
 8001ce2:	4645      	mov	r5, r8
 8001ce4:	4335      	orrs	r5, r6
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	4655      	mov	r5, sl
 8001cea:	40a8      	lsls	r0, r5
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	1e45      	subs	r5, r0, #1
 8001cf0:	41a8      	sbcs	r0, r5
 8001cf2:	448c      	add	ip, r1
 8001cf4:	4306      	orrs	r6, r0
 8001cf6:	18b6      	adds	r6, r6, r2
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4251      	negs	r1, r2
 8001cfe:	4461      	add	r1, ip
 8001d00:	003d      	movs	r5, r7
 8001d02:	e625      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001d04:	003d      	movs	r5, r7
 8001d06:	4661      	mov	r1, ip
 8001d08:	4691      	mov	r9, r2
 8001d0a:	e678      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x552>
 8001d14:	e655      	b.n	80019c2 <__aeabi_dsub+0x1fe>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <__aeabi_dsub+0x542>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x55e>
 8001d20:	e66d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d22:	1886      	adds	r6, r0, r2
 8001d24:	4286      	cmp	r6, r0
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	4461      	add	r1, ip
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1809      	adds	r1, r1, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	020b      	lsls	r3, r1, #8
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dsub+0x572>
 8001d34:	e6d0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001d38:	3501      	adds	r5, #1
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	e5b2      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001d3e:	46b1      	mov	r9, r6
 8001d40:	e65d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d42:	0033      	movs	r3, r6
 8001d44:	4667      	mov	r7, ip
 8001d46:	3b20      	subs	r3, #32
 8001d48:	40df      	lsrs	r7, r3
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2e20      	cmp	r6, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dsub+0x598>
 8001d50:	2740      	movs	r7, #64	; 0x40
 8001d52:	1bbf      	subs	r7, r7, r6
 8001d54:	4666      	mov	r6, ip
 8001d56:	40be      	lsls	r6, r7
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4646      	mov	r6, r8
 8001d5e:	1e72      	subs	r2, r6, #1
 8001d60:	4196      	sbcs	r6, r2
 8001d62:	4333      	orrs	r3, r6
 8001d64:	e5ef      	b.n	8001946 <__aeabi_dsub+0x182>
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <__aeabi_dsub+0x688>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d0cb      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001d6c:	2580      	movs	r5, #128	; 0x80
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	4273      	negs	r3, r6
 8001d72:	4329      	orrs	r1, r5
 8001d74:	e7a8      	b.n	8001cc8 <__aeabi_dsub+0x504>
 8001d76:	4308      	orrs	r0, r1
 8001d78:	1e41      	subs	r1, r0, #1
 8001d7a:	4188      	sbcs	r0, r1
 8001d7c:	e6a2      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x5c0>
 8001d82:	e63c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d84:	4663      	mov	r3, ip
 8001d86:	1a86      	subs	r6, r0, r2
 8001d88:	1acf      	subs	r7, r1, r3
 8001d8a:	42b0      	cmp	r0, r6
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	425b      	negs	r3, r3
 8001d90:	1afb      	subs	r3, r7, r3
 8001d92:	4698      	mov	r8, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	d54e      	bpl.n	8001e36 <__aeabi_dsub+0x672>
 8001d98:	1a16      	subs	r6, r2, r0
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	1a59      	subs	r1, r3, r1
 8001da2:	4252      	negs	r2, r2
 8001da4:	1a89      	subs	r1, r1, r2
 8001da6:	465c      	mov	r4, fp
 8001da8:	2200      	movs	r2, #0
 8001daa:	e57b      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001dac:	4301      	orrs	r1, r0
 8001dae:	000e      	movs	r6, r1
 8001db0:	1e71      	subs	r1, r6, #1
 8001db2:	418e      	sbcs	r6, r1
 8001db4:	e79f      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001db6:	001d      	movs	r5, r3
 8001db8:	000e      	movs	r6, r1
 8001dba:	3d20      	subs	r5, #32
 8001dbc:	40ee      	lsrs	r6, r5
 8001dbe:	46b0      	mov	r8, r6
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d004      	beq.n	8001dce <__aeabi_dsub+0x60a>
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	4099      	lsls	r1, r3
 8001dca:	4308      	orrs	r0, r1
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4648      	mov	r0, r9
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	1e41      	subs	r1, r0, #1
 8001dd4:	4188      	sbcs	r0, r1
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	e674      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e617      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001de0:	1a16      	subs	r6, r2, r0
 8001de2:	4663      	mov	r3, ip
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	1a59      	subs	r1, r3, r1
 8001dea:	4252      	negs	r2, r2
 8001dec:	1a89      	subs	r1, r1, r2
 8001dee:	003d      	movs	r5, r7
 8001df0:	e525      	b.n	800183e <__aeabi_dsub+0x7a>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4691      	mov	r9, r2
 8001df6:	4d15      	ldr	r5, [pc, #84]	; (8001e4c <__aeabi_dsub+0x688>)
 8001df8:	e601      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	e679      	b.n	8001af6 <__aeabi_dsub+0x332>
 8001e02:	001d      	movs	r5, r3
 8001e04:	000e      	movs	r6, r1
 8001e06:	3d20      	subs	r5, #32
 8001e08:	40ee      	lsrs	r6, r5
 8001e0a:	46b0      	mov	r8, r6
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <__aeabi_dsub+0x656>
 8001e10:	2540      	movs	r5, #64	; 0x40
 8001e12:	1aeb      	subs	r3, r5, r3
 8001e14:	4099      	lsls	r1, r3
 8001e16:	4308      	orrs	r0, r1
 8001e18:	4681      	mov	r9, r0
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	1e71      	subs	r1, r6, #1
 8001e20:	418e      	sbcs	r6, r1
 8001e22:	431e      	orrs	r6, r3
 8001e24:	e767      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001e26:	1886      	adds	r6, r0, r2
 8001e28:	4296      	cmp	r6, r2
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18c9      	adds	r1, r1, r3
 8001e32:	003d      	movs	r5, r7
 8001e34:	e58c      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001e36:	4647      	mov	r7, r8
 8001e38:	4337      	orrs	r7, r6
 8001e3a:	d0ce      	beq.n	8001dda <__aeabi_dsub+0x616>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4641      	mov	r1, r8
 8001e40:	4032      	ands	r2, r6
 8001e42:	e649      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e44:	2700      	movs	r7, #0
 8001e46:	003a      	movs	r2, r7
 8001e48:	e5e6      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff

08001e54 <__aeabi_dcmpun>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0c      	ldr	r6, [pc, #48]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e58:	030d      	lsls	r5, r1, #12
 8001e5a:	031c      	lsls	r4, r3, #12
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	0b2d      	lsrs	r5, r5, #12
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	42b1      	cmp	r1, r6
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dcmpun+0x2a>
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d103      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0020      	movs	r0, r4
 8001e78:	1e44      	subs	r4, r0, #1
 8001e7a:	41a0      	sbcs	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	4305      	orrs	r5, r0
 8001e80:	2001      	movs	r0, #1
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1fa      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e86:	e7f1      	b.n	8001e6c <__aeabi_dcmpun+0x18>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f862 	bl	8001fd0 <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f82d 	bl	8001fd0 <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__clzsi2>:
 8001fd0:	211c      	movs	r1, #28
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d301      	bcc.n	8001fde <__clzsi2+0xe>
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	3910      	subs	r1, #16
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d301      	bcc.n	8001fe8 <__clzsi2+0x18>
 8001fe4:	0a00      	lsrs	r0, r0, #8
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d301      	bcc.n	8001ff2 <__clzsi2+0x22>
 8001fee:	0900      	lsrs	r0, r0, #4
 8001ff0:	3904      	subs	r1, #4
 8001ff2:	a202      	add	r2, pc, #8	; (adr r2, 8001ffc <__clzsi2+0x2c>)
 8001ff4:	5c10      	ldrb	r0, [r2, r0]
 8001ff6:	1840      	adds	r0, r0, r1
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	02020304 	.word	0x02020304
 8002000:	01010101 	.word	0x01010101
	...

0800200c <isCAP1203Ready>:

/**
 *		@brief	Check it if the device is ready
 *		@return true
 */
bool isCAP1203Ready(){
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, CAP1203_I2C_ADDR, 2, 10) != HAL_OK){
 8002010:	4806      	ldr	r0, [pc, #24]	; (800202c <isCAP1203Ready+0x20>)
 8002012:	230a      	movs	r3, #10
 8002014:	2202      	movs	r2, #2
 8002016:	2150      	movs	r1, #80	; 0x50
 8002018:	f002 fc2a 	bl	8004870 <HAL_I2C_IsDeviceReady>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d001      	beq.n	8002024 <isCAP1203Ready+0x18>
		return false;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <isCAP1203Ready+0x1a>
	}
	return true;
 8002024:	2301      	movs	r3, #1
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000434 	.word	0x20000434

08002030 <init>:

/**
 *    @brief  init function
 *    @return True if initialization was successful, otherwise false.
 */
bool init() {
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0

  if (read16(MCP9808_REG_MANUF_ID) != 0x0054)
 8002034:	2006      	movs	r0, #6
 8002036:	f000 f865 	bl	8002104 <read16>
 800203a:	0003      	movs	r3, r0
 800203c:	2b54      	cmp	r3, #84	; 0x54
 800203e:	d001      	beq.n	8002044 <init+0x14>
    return false;
 8002040:	2300      	movs	r3, #0
 8002042:	e00f      	b.n	8002064 <init+0x34>
  if (read16(MCP9808_REG_DEVICE_ID) != 0x0400)
 8002044:	2007      	movs	r0, #7
 8002046:	f000 f85d 	bl	8002104 <read16>
 800204a:	0003      	movs	r3, r0
 800204c:	001a      	movs	r2, r3
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <init+0x2a>
    return false;
 8002056:	2300      	movs	r3, #0
 8002058:	e004      	b.n	8002064 <init+0x34>
  write16(MCP9808_REG_CONFIG, 0x0);
 800205a:	2100      	movs	r1, #0
 800205c:	2001      	movs	r0, #1
 800205e:	f000 f835 	bl	80020cc <write16>
  return true;
 8002062:	2301      	movs	r3, #1
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <setResolution>:

/**
 *   @brief  Set Resolution Value
 *   @param  value
 */
void setResolution(uint8_t value){
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	0002      	movs	r2, r0
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	701a      	strb	r2, [r3, #0]
  write8(MCP9808_REG_RESOLUTION, value & 0x03); //why & 0x03
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2203      	movs	r2, #3
 800207c:	4013      	ands	r3, r2
 800207e:	b2db      	uxtb	r3, r3
 8002080:	0019      	movs	r1, r3
 8002082:	2008      	movs	r0, #8
 8002084:	f000 f804 	bl	8002090 <write8>
}
 8002088:	46c0      	nop			; (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}

08002090 <write8>:
/**
 *    @brief  Low level 8 bit write procedure
 *    @param  reg
 *    @param  value
 */
void write8(uint8_t reg, uint8_t value){
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af04      	add	r7, sp, #16
 8002096:	0002      	movs	r2, r0
 8002098:	1dfb      	adds	r3, r7, #7
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	1dbb      	adds	r3, r7, #6
 800209e:	1c0a      	adds	r2, r1, #0
 80020a0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MCP9808_I2CADDR_DEFAULT, reg, 1, &value, 1, 10);
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4807      	ldr	r0, [pc, #28]	; (80020c8 <write8+0x38>)
 80020aa:	230a      	movs	r3, #10
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	1dbb      	adds	r3, r7, #6
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2301      	movs	r3, #1
 80020b8:	2130      	movs	r1, #48	; 0x30
 80020ba:	f002 f977 	bl	80043ac <HAL_I2C_Mem_Write>
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	20000434 	.word	0x20000434

080020cc <write16>:
/**
 *    @brief  Low level 16 bit write procedure
 *    @param  reg
 *    @param  data
 */
void write16(uint8_t reg, uint8_t *data){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af04      	add	r7, sp, #16
 80020d2:	0002      	movs	r2, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MCP9808_I2CADDR_DEFAULT, reg, 1, data, 2, 10);
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <write16+0x34>)
 80020e2:	230a      	movs	r3, #10
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	2302      	movs	r3, #2
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2301      	movs	r3, #1
 80020f0:	2130      	movs	r1, #48	; 0x30
 80020f2:	f002 f95b 	bl	80043ac <HAL_I2C_Mem_Write>
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	20000434 	.word	0x20000434

08002104 <read16>:
/**
 *    @brief  Low level 16 bit read procedure
 *    @param  reg
 *    @return result
 */
uint16_t read16(uint8_t reg){	
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af04      	add	r7, sp, #16
 800210a:	0002      	movs	r2, r0
 800210c:	1dfb      	adds	r3, r7, #7
 800210e:	701a      	strb	r2, [r3, #0]
		uint16_t result;
		if(HAL_I2C_Mem_Read(&hi2c1, MCP9808_I2CADDR_DEFAULT, reg, 1, buff16, 2, 10) == HAL_OK){
 8002110:	1dfb      	adds	r3, r7, #7
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b29a      	uxth	r2, r3
 8002116:	4810      	ldr	r0, [pc, #64]	; (8002158 <read16+0x54>)
 8002118:	230a      	movs	r3, #10
 800211a:	9302      	str	r3, [sp, #8]
 800211c:	2302      	movs	r3, #2
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <read16+0x58>)
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2301      	movs	r3, #1
 8002126:	2130      	movs	r1, #48	; 0x30
 8002128:	f002 fa6e 	bl	8004608 <HAL_I2C_Mem_Read>
 800212c:	1e03      	subs	r3, r0, #0
 800212e:	d10e      	bne.n	800214e <read16+0x4a>
			result = (buff16[0]<<8) | buff16[1];
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <read16+0x58>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	b21a      	sxth	r2, r3
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <read16+0x58>)
 800213a:	785b      	ldrb	r3, [r3, #1]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21a      	sxth	r2, r3
 8002142:	210e      	movs	r1, #14
 8002144:	187b      	adds	r3, r7, r1
 8002146:	801a      	strh	r2, [r3, #0]
			return result;
 8002148:	187b      	adds	r3, r7, r1
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	e000      	b.n	8002150 <read16+0x4c>
		}
		else{
			return 0;
 800214e:	2300      	movs	r3, #0
		}
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	b004      	add	sp, #16
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000434 	.word	0x20000434
 800215c:	20000424 	.word	0x20000424

08002160 <isMCP98083Ready>:

/**
 *	@brief	Check it if the device is ready
 *	@return true
 */
bool isMCP98083Ready(){
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MCP9808_I2CADDR_DEFAULT, 2, 10) != HAL_OK){
 8002164:	4806      	ldr	r0, [pc, #24]	; (8002180 <isMCP98083Ready+0x20>)
 8002166:	230a      	movs	r3, #10
 8002168:	2202      	movs	r2, #2
 800216a:	2130      	movs	r1, #48	; 0x30
 800216c:	f002 fb80 	bl	8004870 <HAL_I2C_IsDeviceReady>
 8002170:	1e03      	subs	r3, r0, #0
 8002172:	d001      	beq.n	8002178 <isMCP98083Ready+0x18>
		return false;
 8002174:	2300      	movs	r3, #0
 8002176:	e000      	b.n	800217a <isMCP98083Ready+0x1a>
	}
	return true;
 8002178:	2301      	movs	r3, #1
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000434 	.word	0x20000434

08002184 <getState>:

/**
 *	  @brief  get states for the pilot line
 *    @return EVSE_StatusTypeDef
 */
EVSE_StatusTypeDef getState(){
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	  if ((analog_value >= 240) && (analog_value <= 255)){
 8002188:	4b37      	ldr	r3, [pc, #220]	; (8002268 <getState+0xe4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2bef      	cmp	r3, #239	; 0xef
 800218e:	d90a      	bls.n	80021a6 <getState+0x22>
 8002190:	4b35      	ldr	r3, [pc, #212]	; (8002268 <getState+0xe4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2bff      	cmp	r3, #255	; 0xff
 8002196:	d806      	bhi.n	80021a6 <getState+0x22>
		  htim3.Instance->CCR1 = 1000;
 8002198:	4b34      	ldr	r3, [pc, #208]	; (800226c <getState+0xe8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	22fa      	movs	r2, #250	; 0xfa
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
		  return State_A;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e05c      	b.n	8002260 <getState+0xdc>
	  }
	  HAL_Delay(200);
 80021a6:	20c8      	movs	r0, #200	; 0xc8
 80021a8:	f001 f912 	bl	80033d0 <HAL_Delay>

	  if ((analog_value >= 117) && (analog_value <= 125)){
 80021ac:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <getState+0xe4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b74      	cmp	r3, #116	; 0x74
 80021b2:	d90a      	bls.n	80021ca <getState+0x46>
 80021b4:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <getState+0xe4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b7d      	cmp	r3, #125	; 0x7d
 80021ba:	d806      	bhi.n	80021ca <getState+0x46>
		  htim3.Instance->CCR1 = 1000;
 80021bc:	4b2b      	ldr	r3, [pc, #172]	; (800226c <getState+0xe8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	22fa      	movs	r2, #250	; 0xfa
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
		  return State_A;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e04a      	b.n	8002260 <getState+0xdc>
	  }

	  if ((analog_value >= 210) && (analog_value <= 220)){
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <getState+0xe4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2bd1      	cmp	r3, #209	; 0xd1
 80021d0:	d90a      	bls.n	80021e8 <getState+0x64>
 80021d2:	4b25      	ldr	r3, [pc, #148]	; (8002268 <getState+0xe4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2bdc      	cmp	r3, #220	; 0xdc
 80021d8:	d806      	bhi.n	80021e8 <getState+0x64>
	  	  htim3.Instance->CCR1 = 500;
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <getState+0xe8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	22fa      	movs	r2, #250	; 0xfa
 80021e0:	0052      	lsls	r2, r2, #1
 80021e2:	635a      	str	r2, [r3, #52]	; 0x34
	  	  return State_B;
 80021e4:	2302      	movs	r3, #2
 80021e6:	e03b      	b.n	8002260 <getState+0xdc>

	  }

	  if ((analog_value >= 100) && (analog_value <= 108)){
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <getState+0xe4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b63      	cmp	r3, #99	; 0x63
 80021ee:	d90a      	bls.n	8002206 <getState+0x82>
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <getState+0xe4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b6c      	cmp	r3, #108	; 0x6c
 80021f6:	d806      	bhi.n	8002206 <getState+0x82>
		  htim3.Instance->CCR1 = 500;
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <getState+0xe8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	22fa      	movs	r2, #250	; 0xfa
 80021fe:	0052      	lsls	r2, r2, #1
 8002200:	635a      	str	r2, [r3, #52]	; 0x34
		  return State_B;
 8002202:	2302      	movs	r3, #2
 8002204:	e02c      	b.n	8002260 <getState+0xdc>
	  	}


	  if((analog_value >= 80) && (analog_value <= 89)){
 8002206:	4b18      	ldr	r3, [pc, #96]	; (8002268 <getState+0xe4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b4f      	cmp	r3, #79	; 0x4f
 800220c:	d90a      	bls.n	8002224 <getState+0xa0>
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <getState+0xe4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b59      	cmp	r3, #89	; 0x59
 8002214:	d806      	bhi.n	8002224 <getState+0xa0>
		  htim3.Instance->CCR1 = 500;
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <getState+0xe8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	22fa      	movs	r2, #250	; 0xfa
 800221c:	0052      	lsls	r2, r2, #1
 800221e:	635a      	str	r2, [r3, #52]	; 0x34
		  return State_C;
 8002220:	2303      	movs	r3, #3
 8002222:	e01d      	b.n	8002260 <getState+0xdc>
	  }

	  if((analog_value >= 68) && (analog_value <= 75)){
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <getState+0xe4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b43      	cmp	r3, #67	; 0x43
 800222a:	d90a      	bls.n	8002242 <getState+0xbe>
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <getState+0xe4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b4b      	cmp	r3, #75	; 0x4b
 8002232:	d806      	bhi.n	8002242 <getState+0xbe>
		  htim3.Instance->CCR1 = 500;
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <getState+0xe8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	22fa      	movs	r2, #250	; 0xfa
 800223a:	0052      	lsls	r2, r2, #1
 800223c:	635a      	str	r2, [r3, #52]	; 0x34
		  return State_D;
 800223e:	2304      	movs	r3, #4
 8002240:	e00e      	b.n	8002260 <getState+0xdc>
	  if((analog_value >= 0) && (analog_value <= 0)){
		  htim3.Instance->CCR1 = 500;
		  return State_E;
	  }
	   */
	  if((analog_value >= 45) && (analog_value <= 53)){
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <getState+0xe4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b2c      	cmp	r3, #44	; 0x2c
 8002248:	d90a      	bls.n	8002260 <getState+0xdc>
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <getState+0xe4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b35      	cmp	r3, #53	; 0x35
 8002250:	d806      	bhi.n	8002260 <getState+0xdc>
		  htim3.Instance->CCR1 = 500;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <getState+0xe8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	22fa      	movs	r2, #250	; 0xfa
 8002258:	0052      	lsls	r2, r2, #1
 800225a:	635a      	str	r2, [r3, #52]	; 0x34
		  return State_F;
 800225c:	2306      	movs	r3, #6
 800225e:	e7ff      	b.n	8002260 <getState+0xdc>
	  }
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	20000204 	.word	0x20000204
 800226c:	20000480 	.word	0x20000480

08002270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002274:	f001 f848 	bl	8003308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002278:	f000 f900 	bl	800247c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800227c:	f000 fae6 	bl	800284c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002280:	f000 f9c4 	bl	800260c <MX_I2C1_Init>
  MX_TIM3_Init();
 8002284:	f000 fa02 	bl	800268c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002288:	f000 fa80 	bl	800278c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800228c:	f000 faae 	bl	80027ec <MX_USART2_UART_Init>
  MX_ADC_Init();
 8002290:	f000 f954 	bl	800253c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

	if(!isCAP1203Ready()){
 8002294:	f7ff feba 	bl	800200c <isCAP1203Ready>
 8002298:	0003      	movs	r3, r0
 800229a:	001a      	movs	r2, r3
 800229c:	2301      	movs	r3, #1
 800229e:	4053      	eors	r3, r2
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <main+0x48>
		while(1){
			HAL_GPIO_TogglePin(NEW_LED_GPIO_Port, NEW_LED_Pin);
 80022a6:	4b69      	ldr	r3, [pc, #420]	; (800244c <main+0x1dc>)
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	0018      	movs	r0, r3
 80022ac:	f001 ffb1 	bl	8004212 <HAL_GPIO_TogglePin>
			HAL_Delay(70);
 80022b0:	2046      	movs	r0, #70	; 0x46
 80022b2:	f001 f88d 	bl	80033d0 <HAL_Delay>
			HAL_GPIO_TogglePin(NEW_LED_GPIO_Port, NEW_LED_Pin);
 80022b6:	e7f6      	b.n	80022a6 <main+0x36>
		}
	}

	if(!isMCP98083Ready()){
 80022b8:	f7ff ff52 	bl	8002160 <isMCP98083Ready>
 80022bc:	0003      	movs	r3, r0
 80022be:	001a      	movs	r2, r3
 80022c0:	2301      	movs	r3, #1
 80022c2:	4053      	eors	r3, r2
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <main+0x6c>
		while(1){
			HAL_GPIO_TogglePin(NEW_LED_GPIO_Port, NEW_LED_Pin);
 80022ca:	4b60      	ldr	r3, [pc, #384]	; (800244c <main+0x1dc>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0018      	movs	r0, r3
 80022d0:	f001 ff9f 	bl	8004212 <HAL_GPIO_TogglePin>
			HAL_Delay(70);
 80022d4:	2046      	movs	r0, #70	; 0x46
 80022d6:	f001 f87b 	bl	80033d0 <HAL_Delay>
			HAL_GPIO_TogglePin(NEW_LED_GPIO_Port, NEW_LED_Pin);
 80022da:	e7f6      	b.n	80022ca <main+0x5a>
		}
	}

	if(!isSSD1306Ready()){
 80022dc:	f000 fde8 	bl	8002eb0 <isSSD1306Ready>
 80022e0:	0003      	movs	r3, r0
 80022e2:	001a      	movs	r2, r3
 80022e4:	2301      	movs	r3, #1
 80022e6:	4053      	eors	r3, r2
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <main+0x90>
		while(1){
			HAL_GPIO_TogglePin(NEW_LED_GPIO_Port, NEW_LED_Pin);
 80022ee:	4b57      	ldr	r3, [pc, #348]	; (800244c <main+0x1dc>)
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	0018      	movs	r0, r3
 80022f4:	f001 ff8d 	bl	8004212 <HAL_GPIO_TogglePin>
			HAL_Delay(70);
 80022f8:	2046      	movs	r0, #70	; 0x46
 80022fa:	f001 f869 	bl	80033d0 <HAL_Delay>
			HAL_GPIO_TogglePin(NEW_LED_GPIO_Port, NEW_LED_Pin);
 80022fe:	e7f6      	b.n	80022ee <main+0x7e>
	}


		/* Inits ------------------------------------------------------------------*/

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002300:	4b53      	ldr	r3, [pc, #332]	; (8002450 <main+0x1e0>)
 8002302:	2100      	movs	r1, #0
 8002304:	0018      	movs	r0, r3
 8002306:	f003 fc3f 	bl	8005b88 <HAL_TIM_PWM_Start>


	init(); 				//MCP9808 initialization
 800230a:	f7ff fe91 	bl	8002030 <init>
    ssd1306_Init(); //OLED1203 initialization
 800230e:	f000 fbc3 	bl	8002a98 <ssd1306_Init>



	setResolution(3); // sets the resolution mode of reading, the modes are defined in the table bellow:
 8002312:	2003      	movs	r0, #3
 8002314:	f7ff fea9 	bl	800206a <setResolution>
  // Mode Resolution SampleTime
  //  0    0.5°C       30 my
  //  1    0.25°C      65 ms
  //  2    0.125°C     130 ms
  //  3    0.0625°C    250 ms
	current = 30;
 8002318:	4b4e      	ldr	r3, [pc, #312]	; (8002454 <main+0x1e4>)
 800231a:	221e      	movs	r2, #30
 800231c:	601a      	str	r2, [r3, #0]


	//Initializing the EVSE
	ssd1306_Fill(Black);
 800231e:	2000      	movs	r0, #0
 8002320:	f000 fc28 	bl	8002b74 <ssd1306_Fill>
	ssd1306_SetCursor(2, 7);
 8002324:	2107      	movs	r1, #7
 8002326:	2002      	movs	r0, #2
 8002328:	f000 fda8 	bl	8002e7c <ssd1306_SetCursor>
	ssd1306_WriteString("MFRKNYCL", Font_11x18, White);
 800232c:	4a4a      	ldr	r2, [pc, #296]	; (8002458 <main+0x1e8>)
 800232e:	484b      	ldr	r0, [pc, #300]	; (800245c <main+0x1ec>)
 8002330:	2301      	movs	r3, #1
 8002332:	6811      	ldr	r1, [r2, #0]
 8002334:	6852      	ldr	r2, [r2, #4]
 8002336:	f000 fd77 	bl	8002e28 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800233a:	f000 fc3f 	bl	8002bbc <ssd1306_UpdateScreen>
	htim3.Instance->CCR1 = 1000;
 800233e:	4b44      	ldr	r3, [pc, #272]	; (8002450 <main+0x1e0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	22fa      	movs	r2, #250	; 0xfa
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	635a      	str	r2, [r3, #52]	; 0x34

    /* USER CODE BEGIN 3 */



	  HAL_GPIO_WritePin(NEW_LED_GPIO_Port, NEW_LED_Pin, 0);
 8002348:	4b40      	ldr	r3, [pc, #256]	; (800244c <main+0x1dc>)
 800234a:	2200      	movs	r2, #0
 800234c:	2180      	movs	r1, #128	; 0x80
 800234e:	0018      	movs	r0, r3
 8002350:	f001 ff42 	bl	80041d8 <HAL_GPIO_WritePin>

	  //Start ADC reading
	  HAL_ADC_Start(&hadc);
 8002354:	4b42      	ldr	r3, [pc, #264]	; (8002460 <main+0x1f0>)
 8002356:	0018      	movs	r0, r3
 8002358:	f001 f99c 	bl	8003694 <HAL_ADC_Start>

	  if(HAL_ADC_PollForConversion(&hadc, 5) == HAL_OK){
 800235c:	4b40      	ldr	r3, [pc, #256]	; (8002460 <main+0x1f0>)
 800235e:	2105      	movs	r1, #5
 8002360:	0018      	movs	r0, r3
 8002362:	f001 fa2b 	bl	80037bc <HAL_ADC_PollForConversion>
 8002366:	1e03      	subs	r3, r0, #0
 8002368:	d106      	bne.n	8002378 <main+0x108>

		  analog_value = HAL_ADC_GetValue(&hadc);
 800236a:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <main+0x1f0>)
 800236c:	0018      	movs	r0, r3
 800236e:	f001 fab7 	bl	80038e0 <HAL_ADC_GetValue>
 8002372:	0002      	movs	r2, r0
 8002374:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <main+0x1f4>)
 8002376:	601a      	str	r2, [r3, #0]
		  //input_voltage = (analog_value * 3.3)/225;

	  }
	  HAL_ADC_Stop(&hadc);
 8002378:	4b39      	ldr	r3, [pc, #228]	; (8002460 <main+0x1f0>)
 800237a:	0018      	movs	r0, r3
 800237c:	f001 f9de 	bl	800373c <HAL_ADC_Stop>

	  HAL_Delay(200);
 8002380:	20c8      	movs	r0, #200	; 0xc8
 8002382:	f001 f825 	bl	80033d0 <HAL_Delay>

	  getState();
 8002386:	f7ff fefd 	bl	8002184 <getState>

	  switch (getState()) {
 800238a:	f7ff fefb 	bl	8002184 <getState>
 800238e:	0003      	movs	r3, r0
 8002390:	2b06      	cmp	r3, #6
 8002392:	d859      	bhi.n	8002448 <main+0x1d8>
 8002394:	009a      	lsls	r2, r3, #2
 8002396:	4b34      	ldr	r3, [pc, #208]	; (8002468 <main+0x1f8>)
 8002398:	18d3      	adds	r3, r2, r3
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	469f      	mov	pc, r3
		case State_A:
			  ssd1306_Fill(Black);
 800239e:	2000      	movs	r0, #0
 80023a0:	f000 fbe8 	bl	8002b74 <ssd1306_Fill>
			  ssd1306_SetCursor(2, 7);
 80023a4:	2107      	movs	r1, #7
 80023a6:	2002      	movs	r0, #2
 80023a8:	f000 fd68 	bl	8002e7c <ssd1306_SetCursor>
			  ssd1306_WriteString("MFRKNYCL", Font_11x18, White);
 80023ac:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <main+0x1e8>)
 80023ae:	482b      	ldr	r0, [pc, #172]	; (800245c <main+0x1ec>)
 80023b0:	2301      	movs	r3, #1
 80023b2:	6811      	ldr	r1, [r2, #0]
 80023b4:	6852      	ldr	r2, [r2, #4]
 80023b6:	f000 fd37 	bl	8002e28 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 80023ba:	f000 fbff 	bl	8002bbc <ssd1306_UpdateScreen>
			break;
 80023be:	e044      	b.n	800244a <main+0x1da>
		case State_B:
			  ssd1306_Fill(Black);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f000 fbd7 	bl	8002b74 <ssd1306_Fill>
			  ssd1306_SetCursor(2, 7);
 80023c6:	2107      	movs	r1, #7
 80023c8:	2002      	movs	r0, #2
 80023ca:	f000 fd57 	bl	8002e7c <ssd1306_SetCursor>
			  ssd1306_WriteString("Connected", Font_11x18, White);
 80023ce:	4a22      	ldr	r2, [pc, #136]	; (8002458 <main+0x1e8>)
 80023d0:	4826      	ldr	r0, [pc, #152]	; (800246c <main+0x1fc>)
 80023d2:	2301      	movs	r3, #1
 80023d4:	6811      	ldr	r1, [r2, #0]
 80023d6:	6852      	ldr	r2, [r2, #4]
 80023d8:	f000 fd26 	bl	8002e28 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 80023dc:	f000 fbee 	bl	8002bbc <ssd1306_UpdateScreen>
			break;
 80023e0:	e033      	b.n	800244a <main+0x1da>
		case State_C:
			  ssd1306_Fill(Black);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f000 fbc6 	bl	8002b74 <ssd1306_Fill>
			  ssd1306_SetCursor(2, 7);
 80023e8:	2107      	movs	r1, #7
 80023ea:	2002      	movs	r0, #2
 80023ec:	f000 fd46 	bl	8002e7c <ssd1306_SetCursor>
			  ssd1306_WriteString("Charging", Font_11x18, White);
 80023f0:	4a19      	ldr	r2, [pc, #100]	; (8002458 <main+0x1e8>)
 80023f2:	481f      	ldr	r0, [pc, #124]	; (8002470 <main+0x200>)
 80023f4:	2301      	movs	r3, #1
 80023f6:	6811      	ldr	r1, [r2, #0]
 80023f8:	6852      	ldr	r2, [r2, #4]
 80023fa:	f000 fd15 	bl	8002e28 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 80023fe:	f000 fbdd 	bl	8002bbc <ssd1306_UpdateScreen>
			break;
 8002402:	e022      	b.n	800244a <main+0x1da>
		case State_D:
			  ssd1306_Fill(Black);
 8002404:	2000      	movs	r0, #0
 8002406:	f000 fbb5 	bl	8002b74 <ssd1306_Fill>
			  ssd1306_SetCursor(2, 7);
 800240a:	2107      	movs	r1, #7
 800240c:	2002      	movs	r0, #2
 800240e:	f000 fd35 	bl	8002e7c <ssd1306_SetCursor>
			  ssd1306_WriteString("Ventilation", Font_11x18, White);
 8002412:	4a11      	ldr	r2, [pc, #68]	; (8002458 <main+0x1e8>)
 8002414:	4817      	ldr	r0, [pc, #92]	; (8002474 <main+0x204>)
 8002416:	2301      	movs	r3, #1
 8002418:	6811      	ldr	r1, [r2, #0]
 800241a:	6852      	ldr	r2, [r2, #4]
 800241c:	f000 fd04 	bl	8002e28 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8002420:	f000 fbcc 	bl	8002bbc <ssd1306_UpdateScreen>
			break;
 8002424:	e011      	b.n	800244a <main+0x1da>
		case State_E:

			break;
		case State_F:
			  ssd1306_Fill(Black);
 8002426:	2000      	movs	r0, #0
 8002428:	f000 fba4 	bl	8002b74 <ssd1306_Fill>
			  ssd1306_SetCursor(2, 7);
 800242c:	2107      	movs	r1, #7
 800242e:	2002      	movs	r0, #2
 8002430:	f000 fd24 	bl	8002e7c <ssd1306_SetCursor>
			  ssd1306_WriteString("Unknown/Err", Font_11x18, White);
 8002434:	4a08      	ldr	r2, [pc, #32]	; (8002458 <main+0x1e8>)
 8002436:	4810      	ldr	r0, [pc, #64]	; (8002478 <main+0x208>)
 8002438:	2301      	movs	r3, #1
 800243a:	6811      	ldr	r1, [r2, #0]
 800243c:	6852      	ldr	r2, [r2, #4]
 800243e:	f000 fcf3 	bl	8002e28 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8002442:	f000 fbbb 	bl	8002bbc <ssd1306_UpdateScreen>
			break;
 8002446:	e000      	b.n	800244a <main+0x1da>
		default:
			break;
 8002448:	46c0      	nop			; (mov r8, r8)
	  HAL_GPIO_WritePin(NEW_LED_GPIO_Port, NEW_LED_Pin, 0);
 800244a:	e77d      	b.n	8002348 <main+0xd8>
 800244c:	48001400 	.word	0x48001400
 8002450:	20000480 	.word	0x20000480
 8002454:	20000200 	.word	0x20000200
 8002458:	20000000 	.word	0x20000000
 800245c:	08008800 	.word	0x08008800
 8002460:	200005d0 	.word	0x200005d0
 8002464:	20000204 	.word	0x20000204
 8002468:	080088e8 	.word	0x080088e8
 800246c:	0800880c 	.word	0x0800880c
 8002470:	08008818 	.word	0x08008818
 8002474:	08008824 	.word	0x08008824
 8002478:	08008830 	.word	0x08008830

0800247c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b095      	sub	sp, #84	; 0x54
 8002480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002482:	2420      	movs	r4, #32
 8002484:	193b      	adds	r3, r7, r4
 8002486:	0018      	movs	r0, r3
 8002488:	2330      	movs	r3, #48	; 0x30
 800248a:	001a      	movs	r2, r3
 800248c:	2100      	movs	r1, #0
 800248e:	f004 fc41 	bl	8006d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002492:	2310      	movs	r3, #16
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	0018      	movs	r0, r3
 8002498:	2310      	movs	r3, #16
 800249a:	001a      	movs	r2, r3
 800249c:	2100      	movs	r1, #0
 800249e:	f004 fc39 	bl	8006d14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a2:	003b      	movs	r3, r7
 80024a4:	0018      	movs	r0, r3
 80024a6:	2310      	movs	r3, #16
 80024a8:	001a      	movs	r2, r3
 80024aa:	2100      	movs	r1, #0
 80024ac:	f004 fc32 	bl	8006d14 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80024b0:	0021      	movs	r1, r4
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	2212      	movs	r2, #18
 80024b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	2201      	movs	r2, #1
 80024bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	2201      	movs	r2, #1
 80024c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	2210      	movs	r2, #16
 80024c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	2210      	movs	r2, #16
 80024ce:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024d0:	187b      	adds	r3, r7, r1
 80024d2:	2200      	movs	r2, #0
 80024d4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	0018      	movs	r0, r3
 80024da:	f002 fdb9 	bl	8005050 <HAL_RCC_OscConfig>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d001      	beq.n	80024e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80024e2:	f000 fa9b 	bl	8002a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e6:	2110      	movs	r1, #16
 80024e8:	187b      	adds	r3, r7, r1
 80024ea:	2207      	movs	r2, #7
 80024ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	2200      	movs	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2200      	movs	r2, #0
 80024fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002500:	187b      	adds	r3, r7, r1
 8002502:	2100      	movs	r1, #0
 8002504:	0018      	movs	r0, r3
 8002506:	f003 f8bf 	bl	8005688 <HAL_RCC_ClockConfig>
 800250a:	1e03      	subs	r3, r0, #0
 800250c:	d001      	beq.n	8002512 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800250e:	f000 fa85 	bl	8002a1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002512:	003b      	movs	r3, r7
 8002514:	2221      	movs	r2, #33	; 0x21
 8002516:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002518:	003b      	movs	r3, r7
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800251e:	003b      	movs	r3, r7
 8002520:	2200      	movs	r2, #0
 8002522:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002524:	003b      	movs	r3, r7
 8002526:	0018      	movs	r0, r3
 8002528:	f003 fa00 	bl	800592c <HAL_RCCEx_PeriphCLKConfig>
 800252c:	1e03      	subs	r3, r0, #0
 800252e:	d001      	beq.n	8002534 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002530:	f000 fa74 	bl	8002a1c <Error_Handler>
  }
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b015      	add	sp, #84	; 0x54
 800253a:	bd90      	pop	{r4, r7, pc}

0800253c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	0018      	movs	r0, r3
 8002546:	230c      	movs	r3, #12
 8002548:	001a      	movs	r2, r3
 800254a:	2100      	movs	r1, #0
 800254c:	f004 fbe2 	bl	8006d14 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002550:	4b2c      	ldr	r3, [pc, #176]	; (8002604 <MX_ADC_Init+0xc8>)
 8002552:	4a2d      	ldr	r2, [pc, #180]	; (8002608 <MX_ADC_Init+0xcc>)
 8002554:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002556:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <MX_ADC_Init+0xc8>)
 8002558:	2200      	movs	r2, #0
 800255a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 800255c:	4b29      	ldr	r3, [pc, #164]	; (8002604 <MX_ADC_Init+0xc8>)
 800255e:	2210      	movs	r2, #16
 8002560:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <MX_ADC_Init+0xc8>)
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002568:	4b26      	ldr	r3, [pc, #152]	; (8002604 <MX_ADC_Init+0xc8>)
 800256a:	2201      	movs	r2, #1
 800256c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800256e:	4b25      	ldr	r3, [pc, #148]	; (8002604 <MX_ADC_Init+0xc8>)
 8002570:	2204      	movs	r2, #4
 8002572:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <MX_ADC_Init+0xc8>)
 8002576:	2200      	movs	r2, #0
 8002578:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <MX_ADC_Init+0xc8>)
 800257c:	2200      	movs	r2, #0
 800257e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <MX_ADC_Init+0xc8>)
 8002582:	2200      	movs	r2, #0
 8002584:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002586:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <MX_ADC_Init+0xc8>)
 8002588:	2200      	movs	r2, #0
 800258a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <MX_ADC_Init+0xc8>)
 800258e:	22c2      	movs	r2, #194	; 0xc2
 8002590:	32ff      	adds	r2, #255	; 0xff
 8002592:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <MX_ADC_Init+0xc8>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <MX_ADC_Init+0xc8>)
 800259c:	2224      	movs	r2, #36	; 0x24
 800259e:	2100      	movs	r1, #0
 80025a0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <MX_ADC_Init+0xc8>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <MX_ADC_Init+0xc8>)
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 ff32 	bl	8003414 <HAL_ADC_Init>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d001      	beq.n	80025b8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80025b4:	f000 fa32 	bl	8002a1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	0152      	lsls	r2, r2, #5
 80025c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2280      	movs	r2, #128	; 0x80
 80025ca:	0552      	lsls	r2, r2, #21
 80025cc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80025ce:	1d3a      	adds	r2, r7, #4
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <MX_ADC_Init+0xc8>)
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f001 f98f 	bl	80038f8 <HAL_ADC_ConfigChannel>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d001      	beq.n	80025e2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80025de:	f000 fa1d 	bl	8002a1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	2204      	movs	r2, #4
 80025e6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80025e8:	1d3a      	adds	r2, r7, #4
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <MX_ADC_Init+0xc8>)
 80025ec:	0011      	movs	r1, r2
 80025ee:	0018      	movs	r0, r3
 80025f0:	f001 f982 	bl	80038f8 <HAL_ADC_ConfigChannel>
 80025f4:	1e03      	subs	r3, r0, #0
 80025f6:	d001      	beq.n	80025fc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80025f8:	f000 fa10 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	b004      	add	sp, #16
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200005d0 	.word	0x200005d0
 8002608:	40012400 	.word	0x40012400

0800260c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <MX_I2C1_Init+0x74>)
 8002612:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <MX_I2C1_Init+0x78>)
 8002614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <MX_I2C1_Init+0x74>)
 8002618:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <MX_I2C1_Init+0x7c>)
 800261a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <MX_I2C1_Init+0x74>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002622:	4b17      	ldr	r3, [pc, #92]	; (8002680 <MX_I2C1_Init+0x74>)
 8002624:	2201      	movs	r2, #1
 8002626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <MX_I2C1_Init+0x74>)
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <MX_I2C1_Init+0x74>)
 8002630:	2200      	movs	r2, #0
 8002632:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <MX_I2C1_Init+0x74>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <MX_I2C1_Init+0x74>)
 800263c:	2200      	movs	r2, #0
 800263e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <MX_I2C1_Init+0x74>)
 8002642:	2200      	movs	r2, #0
 8002644:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <MX_I2C1_Init+0x74>)
 8002648:	0018      	movs	r0, r3
 800264a:	f001 fe19 	bl	8004280 <HAL_I2C_Init>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d001      	beq.n	8002656 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002652:	f000 f9e3 	bl	8002a1c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <MX_I2C1_Init+0x74>)
 8002658:	2100      	movs	r1, #0
 800265a:	0018      	movs	r0, r3
 800265c:	f002 fc60 	bl	8004f20 <HAL_I2CEx_ConfigAnalogFilter>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d001      	beq.n	8002668 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002664:	f000 f9da 	bl	8002a1c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <MX_I2C1_Init+0x74>)
 800266a:	2100      	movs	r1, #0
 800266c:	0018      	movs	r0, r3
 800266e:	f002 fca3 	bl	8004fb8 <HAL_I2CEx_ConfigDigitalFilter>
 8002672:	1e03      	subs	r3, r0, #0
 8002674:	d001      	beq.n	800267a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002676:	f000 f9d1 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000434 	.word	0x20000434
 8002684:	40005400 	.word	0x40005400
 8002688:	2000090e 	.word	0x2000090e

0800268c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08e      	sub	sp, #56	; 0x38
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002692:	2328      	movs	r3, #40	; 0x28
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	0018      	movs	r0, r3
 8002698:	2310      	movs	r3, #16
 800269a:	001a      	movs	r2, r3
 800269c:	2100      	movs	r1, #0
 800269e:	f004 fb39 	bl	8006d14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a2:	2320      	movs	r3, #32
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	0018      	movs	r0, r3
 80026a8:	2308      	movs	r3, #8
 80026aa:	001a      	movs	r2, r3
 80026ac:	2100      	movs	r1, #0
 80026ae:	f004 fb31 	bl	8006d14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	0018      	movs	r0, r3
 80026b6:	231c      	movs	r3, #28
 80026b8:	001a      	movs	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f004 fb2a 	bl	8006d14 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026c0:	4b30      	ldr	r3, [pc, #192]	; (8002784 <MX_TIM3_Init+0xf8>)
 80026c2:	4a31      	ldr	r2, [pc, #196]	; (8002788 <MX_TIM3_Init+0xfc>)
 80026c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 80026c6:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <MX_TIM3_Init+0xf8>)
 80026c8:	2208      	movs	r2, #8
 80026ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <MX_TIM3_Init+0xf8>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;//887;
 80026d2:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <MX_TIM3_Init+0xf8>)
 80026d4:	22fa      	movs	r2, #250	; 0xfa
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <MX_TIM3_Init+0xf8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <MX_TIM3_Init+0xf8>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026e6:	4b27      	ldr	r3, [pc, #156]	; (8002784 <MX_TIM3_Init+0xf8>)
 80026e8:	0018      	movs	r0, r3
 80026ea:	f003 f9ed 	bl	8005ac8 <HAL_TIM_Base_Init>
 80026ee:	1e03      	subs	r3, r0, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80026f2:	f000 f993 	bl	8002a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f6:	2128      	movs	r1, #40	; 0x28
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	0152      	lsls	r2, r2, #5
 80026fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002700:	187a      	adds	r2, r7, r1
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <MX_TIM3_Init+0xf8>)
 8002704:	0011      	movs	r1, r2
 8002706:	0018      	movs	r0, r3
 8002708:	f003 fb42 	bl	8005d90 <HAL_TIM_ConfigClockSource>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002710:	f000 f984 	bl	8002a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <MX_TIM3_Init+0xf8>)
 8002716:	0018      	movs	r0, r3
 8002718:	f003 fa02 	bl	8005b20 <HAL_TIM_PWM_Init>
 800271c:	1e03      	subs	r3, r0, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002720:	f000 f97c 	bl	8002a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002724:	2120      	movs	r1, #32
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272c:	187b      	adds	r3, r7, r1
 800272e:	2200      	movs	r2, #0
 8002730:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002732:	187a      	adds	r2, r7, r1
 8002734:	4b13      	ldr	r3, [pc, #76]	; (8002784 <MX_TIM3_Init+0xf8>)
 8002736:	0011      	movs	r1, r2
 8002738:	0018      	movs	r0, r3
 800273a:	f003 ff17 	bl	800656c <HAL_TIMEx_MasterConfigSynchronization>
 800273e:	1e03      	subs	r3, r0, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002742:	f000 f96b 	bl	8002a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2260      	movs	r2, #96	; 0x60
 800274a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	2200      	movs	r2, #0
 8002750:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800275e:	1d39      	adds	r1, r7, #4
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <MX_TIM3_Init+0xf8>)
 8002762:	2200      	movs	r2, #0
 8002764:	0018      	movs	r0, r3
 8002766:	f003 fa5b 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800276e:	f000 f955 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <MX_TIM3_Init+0xf8>)
 8002774:	0018      	movs	r0, r3
 8002776:	f000 fc83 	bl	8003080 <HAL_TIM_MspPostInit>

}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	b00e      	add	sp, #56	; 0x38
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	20000480 	.word	0x20000480
 8002788:	40000400 	.word	0x40000400

0800278c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <MX_USART1_UART_Init+0x58>)
 8002792:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <MX_USART1_UART_Init+0x5c>)
 8002794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <MX_USART1_UART_Init+0x58>)
 8002798:	2296      	movs	r2, #150	; 0x96
 800279a:	0212      	lsls	r2, r2, #8
 800279c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <MX_USART1_UART_Init+0x58>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <MX_USART1_UART_Init+0x58>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <MX_USART1_UART_Init+0x58>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <MX_USART1_UART_Init+0x58>)
 80027b2:	220c      	movs	r2, #12
 80027b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <MX_USART1_UART_Init+0x58>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <MX_USART1_UART_Init+0x58>)
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <MX_USART1_UART_Init+0x58>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <MX_USART1_UART_Init+0x58>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <MX_USART1_UART_Init+0x58>)
 80027d0:	0018      	movs	r0, r3
 80027d2:	f003 ff23 	bl	800661c <HAL_UART_Init>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d001      	beq.n	80027de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80027da:	f000 f91f 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200004c4 	.word	0x200004c4
 80027e8:	40013800 	.word	0x40013800

080027ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_USART2_UART_Init+0x58>)
 80027f2:	4a15      	ldr	r2, [pc, #84]	; (8002848 <MX_USART2_UART_Init+0x5c>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <MX_USART2_UART_Init+0x58>)
 80027f8:	2296      	movs	r2, #150	; 0x96
 80027fa:	0212      	lsls	r2, r2, #8
 80027fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_USART2_UART_Init+0x58>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_USART2_UART_Init+0x58>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_USART2_UART_Init+0x58>)
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <MX_USART2_UART_Init+0x58>)
 8002830:	0018      	movs	r0, r3
 8002832:	f003 fef3 	bl	800661c <HAL_UART_Init>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800283a:	f000 f8ef 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	2000054c 	.word	0x2000054c
 8002848:	40004400 	.word	0x40004400

0800284c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b08b      	sub	sp, #44	; 0x2c
 8002850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002852:	2414      	movs	r4, #20
 8002854:	193b      	adds	r3, r7, r4
 8002856:	0018      	movs	r0, r3
 8002858:	2314      	movs	r3, #20
 800285a:	001a      	movs	r2, r3
 800285c:	2100      	movs	r1, #0
 800285e:	f004 fa59 	bl	8006d14 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002862:	4b57      	ldr	r3, [pc, #348]	; (80029c0 <MX_GPIO_Init+0x174>)
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	4b56      	ldr	r3, [pc, #344]	; (80029c0 <MX_GPIO_Init+0x174>)
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	0309      	lsls	r1, r1, #12
 800286c:	430a      	orrs	r2, r1
 800286e:	615a      	str	r2, [r3, #20]
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <MX_GPIO_Init+0x174>)
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	031b      	lsls	r3, r3, #12
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <MX_GPIO_Init+0x174>)
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <MX_GPIO_Init+0x174>)
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	0289      	lsls	r1, r1, #10
 8002888:	430a      	orrs	r2, r1
 800288a:	615a      	str	r2, [r3, #20]
 800288c:	4b4c      	ldr	r3, [pc, #304]	; (80029c0 <MX_GPIO_Init+0x174>)
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	029b      	lsls	r3, r3, #10
 8002894:	4013      	ands	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800289a:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <MX_GPIO_Init+0x174>)
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	4b48      	ldr	r3, [pc, #288]	; (80029c0 <MX_GPIO_Init+0x174>)
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	03c9      	lsls	r1, r1, #15
 80028a4:	430a      	orrs	r2, r1
 80028a6:	615a      	str	r2, [r3, #20]
 80028a8:	4b45      	ldr	r3, [pc, #276]	; (80029c0 <MX_GPIO_Init+0x174>)
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	03db      	lsls	r3, r3, #15
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <MX_GPIO_Init+0x174>)
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <MX_GPIO_Init+0x174>)
 80028bc:	2180      	movs	r1, #128	; 0x80
 80028be:	02c9      	lsls	r1, r1, #11
 80028c0:	430a      	orrs	r2, r1
 80028c2:	615a      	str	r2, [r3, #20]
 80028c4:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <MX_GPIO_Init+0x174>)
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	02db      	lsls	r3, r3, #11
 80028cc:	4013      	ands	r3, r2
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GFCI_TEST_Pin|LED_Pin, GPIO_PIN_RESET);
 80028d2:	2390      	movs	r3, #144	; 0x90
 80028d4:	05db      	lsls	r3, r3, #23
 80028d6:	2200      	movs	r2, #0
 80028d8:	2122      	movs	r1, #34	; 0x22
 80028da:	0018      	movs	r0, r3
 80028dc:	f001 fc7c 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RLY1_GPIO_Port, RLY1_Pin, GPIO_PIN_RESET);
 80028e0:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <MX_GPIO_Init+0x178>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	2140      	movs	r1, #64	; 0x40
 80028e6:	0018      	movs	r0, r3
 80028e8:	f001 fc76 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NEW_LED_GPIO_Port, NEW_LED_Pin, GPIO_PIN_RESET);
 80028ec:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <MX_GPIO_Init+0x17c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	0018      	movs	r0, r3
 80028f4:	f001 fc70 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TEMP_ALERT_Pin CAP_ALERT_Pin Sense_Out_Pin */
  GPIO_InitStruct.Pin = TEMP_ALERT_Pin|CAP_ALERT_Pin|Sense_Out_Pin;
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	2207      	movs	r2, #7
 80028fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	2200      	movs	r2, #0
 8002902:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	193b      	adds	r3, r7, r4
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290a:	193b      	adds	r3, r7, r4
 800290c:	4a2d      	ldr	r2, [pc, #180]	; (80029c4 <MX_GPIO_Init+0x178>)
 800290e:	0019      	movs	r1, r3
 8002910:	0010      	movs	r0, r2
 8002912:	f001 faf1 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GFCI_INT_Pin */
  GPIO_InitStruct.Pin = GFCI_INT_Pin;
 8002916:	193b      	adds	r3, r7, r4
 8002918:	2208      	movs	r2, #8
 800291a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800291c:	193b      	adds	r3, r7, r4
 800291e:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <MX_GPIO_Init+0x180>)
 8002920:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	193b      	adds	r3, r7, r4
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GFCI_INT_GPIO_Port, &GPIO_InitStruct);
 8002928:	193b      	adds	r3, r7, r4
 800292a:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <MX_GPIO_Init+0x178>)
 800292c:	0019      	movs	r1, r3
 800292e:	0010      	movs	r0, r2
 8002930:	f001 fae2 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GFCI_TEST_Pin LED_Pin */
  GPIO_InitStruct.Pin = GFCI_TEST_Pin|LED_Pin;
 8002934:	193b      	adds	r3, r7, r4
 8002936:	2222      	movs	r2, #34	; 0x22
 8002938:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2201      	movs	r2, #1
 800293e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	193b      	adds	r3, r7, r4
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	193b      	adds	r3, r7, r4
 8002948:	2200      	movs	r2, #0
 800294a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	193a      	adds	r2, r7, r4
 800294e:	2390      	movs	r3, #144	; 0x90
 8002950:	05db      	lsls	r3, r3, #23
 8002952:	0011      	movs	r1, r2
 8002954:	0018      	movs	r0, r3
 8002956:	f001 facf 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RLY1_Pin */
  GPIO_InitStruct.Pin = RLY1_Pin;
 800295a:	0021      	movs	r1, r4
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2240      	movs	r2, #64	; 0x40
 8002960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002962:	187b      	adds	r3, r7, r1
 8002964:	2201      	movs	r2, #1
 8002966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	187b      	adds	r3, r7, r1
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	187b      	adds	r3, r7, r1
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RLY1_GPIO_Port, &GPIO_InitStruct);
 8002974:	000c      	movs	r4, r1
 8002976:	187b      	adds	r3, r7, r1
 8002978:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <MX_GPIO_Init+0x178>)
 800297a:	0019      	movs	r1, r3
 800297c:	0010      	movs	r0, r2
 800297e:	f001 fabb 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NEW_LED_Pin */
  GPIO_InitStruct.Pin = NEW_LED_Pin;
 8002982:	0021      	movs	r1, r4
 8002984:	187b      	adds	r3, r7, r1
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2201      	movs	r2, #1
 800298e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	187b      	adds	r3, r7, r1
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	187b      	adds	r3, r7, r1
 8002998:	2200      	movs	r2, #0
 800299a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NEW_LED_GPIO_Port, &GPIO_InitStruct);
 800299c:	187b      	adds	r3, r7, r1
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <MX_GPIO_Init+0x17c>)
 80029a0:	0019      	movs	r1, r3
 80029a2:	0010      	movs	r0, r2
 80029a4:	f001 faa8 	bl	8003ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2100      	movs	r1, #0
 80029ac:	2006      	movs	r0, #6
 80029ae:	f001 fa71 	bl	8003e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80029b2:	2006      	movs	r0, #6
 80029b4:	f001 fa83 	bl	8003ebe <HAL_NVIC_EnableIRQ>

}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b00b      	add	sp, #44	; 0x2c
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	48000800 	.word	0x48000800
 80029c8:	48001400 	.word	0x48001400
 80029cc:	10110000 	.word	0x10110000

080029d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	0002      	movs	r2, r0
 80029d8:	1dbb      	adds	r3, r7, #6
 80029da:	801a      	strh	r2, [r3, #0]

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

	ssd1306_Fill(Black);
 80029dc:	2000      	movs	r0, #0
 80029de:	f000 f8c9 	bl	8002b74 <ssd1306_Fill>
	ssd1306_SetCursor(2, 7);
 80029e2:	2107      	movs	r1, #7
 80029e4:	2002      	movs	r0, #2
 80029e6:	f000 fa49 	bl	8002e7c <ssd1306_SetCursor>
	ssd1306_WriteString("GFCI [X]", Font_11x18, White);
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x40>)
 80029ec:	4809      	ldr	r0, [pc, #36]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x44>)
 80029ee:	2301      	movs	r3, #1
 80029f0:	6811      	ldr	r1, [r2, #0]
 80029f2:	6852      	ldr	r2, [r2, #4]
 80029f4:	f000 fa18 	bl	8002e28 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80029f8:	f000 f8e0 	bl	8002bbc <ssd1306_UpdateScreen>
	HAL_GPIO_WritePin(NEW_LED_GPIO_Port, NEW_LED_Pin, 1);
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x48>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	0018      	movs	r0, r3
 8002a04:	f001 fbe8 	bl	80041d8 <HAL_GPIO_WritePin>
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000000 	.word	0x20000000
 8002a14:	0800883c 	.word	0x0800883c
 8002a18:	48001400 	.word	0x48001400

08002a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <ssd1306_Reset>:
#include "ssd1306.h"
#include "gfx.h"
#include <stdbool.h>
#include <stdio.h>

void ssd1306_Reset(void) {
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af04      	add	r7, sp, #16
 8002a36:	0002      	movs	r2, r0
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002a3c:	4808      	ldr	r0, [pc, #32]	; (8002a60 <ssd1306_WriteCommand+0x30>)
 8002a3e:	2301      	movs	r3, #1
 8002a40:	425b      	negs	r3, r3
 8002a42:	9302      	str	r3, [sp, #8]
 8002a44:	2301      	movs	r3, #1
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	1dfb      	adds	r3, r7, #7
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2178      	movs	r1, #120	; 0x78
 8002a52:	f001 fcab 	bl	80043ac <HAL_I2C_Mem_Write>
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	20000434 	.word	0x20000434

08002a64 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af04      	add	r7, sp, #16
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	4808      	ldr	r0, [pc, #32]	; (8002a94 <ssd1306_WriteData+0x30>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	4252      	negs	r2, r2
 8002a78:	9202      	str	r2, [sp, #8]
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	2301      	movs	r3, #1
 8002a82:	2240      	movs	r2, #64	; 0x40
 8002a84:	2178      	movs	r1, #120	; 0x78
 8002a86:	f001 fc91 	bl	80043ac <HAL_I2C_Mem_Write>
}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b002      	add	sp, #8
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	20000434 	.word	0x20000434

08002a98 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8002a9c:	f7ff ffc3 	bl	8002a26 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002aa0:	2064      	movs	r0, #100	; 0x64
 8002aa2:	f000 fc95 	bl	80033d0 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8002aa6:	20ae      	movs	r0, #174	; 0xae
 8002aa8:	f7ff ffc2 	bl	8002a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8002aac:	2020      	movs	r0, #32
 8002aae:	f7ff ffbf 	bl	8002a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7ff ffbc 	bl	8002a30 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002ab8:	20b0      	movs	r0, #176	; 0xb0
 8002aba:	f7ff ffb9 	bl	8002a30 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002abe:	20c8      	movs	r0, #200	; 0xc8
 8002ac0:	f7ff ffb6 	bl	8002a30 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7ff ffb3 	bl	8002a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002aca:	2010      	movs	r0, #16
 8002acc:	f7ff ffb0 	bl	8002a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002ad0:	2040      	movs	r0, #64	; 0x40
 8002ad2:	f7ff ffad 	bl	8002a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8002ad6:	2081      	movs	r0, #129	; 0x81
 8002ad8:	f7ff ffaa 	bl	8002a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8002adc:	20ff      	movs	r0, #255	; 0xff
 8002ade:	f7ff ffa7 	bl	8002a30 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002ae2:	20a1      	movs	r0, #161	; 0xa1
 8002ae4:	f7ff ffa4 	bl	8002a30 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002ae8:	20a6      	movs	r0, #166	; 0xa6
 8002aea:	f7ff ffa1 	bl	8002a30 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002aee:	20a8      	movs	r0, #168	; 0xa8
 8002af0:	f7ff ff9e 	bl	8002a30 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8002af4:	201f      	movs	r0, #31
 8002af6:	f7ff ff9b 	bl	8002a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002afa:	20a4      	movs	r0, #164	; 0xa4
 8002afc:	f7ff ff98 	bl	8002a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002b00:	20d3      	movs	r0, #211	; 0xd3
 8002b02:	f7ff ff95 	bl	8002a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7ff ff92 	bl	8002a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002b0c:	20d5      	movs	r0, #213	; 0xd5
 8002b0e:	f7ff ff8f 	bl	8002a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002b12:	20f0      	movs	r0, #240	; 0xf0
 8002b14:	f7ff ff8c 	bl	8002a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002b18:	20d9      	movs	r0, #217	; 0xd9
 8002b1a:	f7ff ff89 	bl	8002a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002b1e:	2022      	movs	r0, #34	; 0x22
 8002b20:	f7ff ff86 	bl	8002a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002b24:	20da      	movs	r0, #218	; 0xda
 8002b26:	f7ff ff83 	bl	8002a30 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	f7ff ff80 	bl	8002a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002b30:	20db      	movs	r0, #219	; 0xdb
 8002b32:	f7ff ff7d 	bl	8002a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002b36:	2020      	movs	r0, #32
 8002b38:	f7ff ff7a 	bl	8002a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002b3c:	208d      	movs	r0, #141	; 0x8d
 8002b3e:	f7ff ff77 	bl	8002a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002b42:	2014      	movs	r0, #20
 8002b44:	f7ff ff74 	bl	8002a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002b48:	20af      	movs	r0, #175	; 0xaf
 8002b4a:	f7ff ff71 	bl	8002a30 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f000 f810 	bl	8002b74 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002b54:	f000 f832 	bl	8002bbc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <ssd1306_Init+0xd8>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002b5e:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <ssd1306_Init+0xd8>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002b64:	4b02      	ldr	r3, [pc, #8]	; (8002b70 <ssd1306_Init+0xd8>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	715a      	strb	r2, [r3, #5]
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000408 	.word	0x20000408

08002b74 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	e00e      	b.n	8002ba4 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002b86:	1dfb      	adds	r3, r7, #7
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <ssd1306_Fill+0x1e>
 8002b8e:	2100      	movs	r1, #0
 8002b90:	e000      	b.n	8002b94 <ssd1306_Fill+0x20>
 8002b92:	21ff      	movs	r1, #255	; 0xff
 8002b94:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <ssd1306_Fill+0x40>)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	18d3      	adds	r3, r2, r3
 8002b9a:	1c0a      	adds	r2, r1, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <ssd1306_Fill+0x44>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d9ec      	bls.n	8002b86 <ssd1306_Fill+0x12>
    }
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b004      	add	sp, #16
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000208 	.word	0x20000208
 8002bb8:	000001ff 	.word	0x000001ff

08002bbc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e01a      	b.n	8002c00 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002bca:	1dfb      	adds	r3, r7, #7
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	3b50      	subs	r3, #80	; 0x50
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f7ff ff2c 	bl	8002a30 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7ff ff29 	bl	8002a30 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002bde:	2010      	movs	r0, #16
 8002be0:	f7ff ff26 	bl	8002a30 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002be4:	1dfb      	adds	r3, r7, #7
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	01da      	lsls	r2, r3, #7
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <ssd1306_UpdateScreen+0x54>)
 8002bec:	18d3      	adds	r3, r2, r3
 8002bee:	2180      	movs	r1, #128	; 0x80
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7ff ff37 	bl	8002a64 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	1dfb      	adds	r3, r7, #7
 8002bfc:	3201      	adds	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	1dfb      	adds	r3, r7, #7
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d9e0      	bls.n	8002bca <ssd1306_UpdateScreen+0xe>
    }
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000208 	.word	0x20000208

08002c14 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	0004      	movs	r4, r0
 8002c1c:	0008      	movs	r0, r1
 8002c1e:	0011      	movs	r1, r2
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	1c22      	adds	r2, r4, #0
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	1dbb      	adds	r3, r7, #6
 8002c28:	1c02      	adds	r2, r0, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	1d7b      	adds	r3, r7, #5
 8002c2e:	1c0a      	adds	r2, r1, #0
 8002c30:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002c32:	1dfb      	adds	r3, r7, #7
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b25b      	sxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db52      	blt.n	8002ce2 <ssd1306_DrawPixel+0xce>
 8002c3c:	1dbb      	adds	r3, r7, #6
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b1f      	cmp	r3, #31
 8002c42:	d84e      	bhi.n	8002ce2 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002c44:	4b29      	ldr	r3, [pc, #164]	; (8002cec <ssd1306_DrawPixel+0xd8>)
 8002c46:	791b      	ldrb	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8002c4c:	1d7b      	adds	r3, r7, #5
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	425a      	negs	r2, r3
 8002c52:	4153      	adcs	r3, r2
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	1d7b      	adds	r3, r7, #5
 8002c58:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8002c5a:	1d7b      	adds	r3, r7, #5
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d11e      	bne.n	8002ca0 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002c62:	1dfb      	adds	r3, r7, #7
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	1dbb      	adds	r3, r7, #6
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	08db      	lsrs	r3, r3, #3
 8002c6c:	b2d8      	uxtb	r0, r3
 8002c6e:	0003      	movs	r3, r0
 8002c70:	01db      	lsls	r3, r3, #7
 8002c72:	18d3      	adds	r3, r2, r3
 8002c74:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <ssd1306_DrawPixel+0xdc>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	b25a      	sxtb	r2, r3
 8002c7a:	1dbb      	adds	r3, r7, #6
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2107      	movs	r1, #7
 8002c80:	400b      	ands	r3, r1
 8002c82:	2101      	movs	r1, #1
 8002c84:	4099      	lsls	r1, r3
 8002c86:	000b      	movs	r3, r1
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	b259      	sxtb	r1, r3
 8002c8e:	1dfb      	adds	r3, r7, #7
 8002c90:	781a      	ldrb	r2, [r3, #0]
 8002c92:	0003      	movs	r3, r0
 8002c94:	01db      	lsls	r3, r3, #7
 8002c96:	18d3      	adds	r3, r2, r3
 8002c98:	b2c9      	uxtb	r1, r1
 8002c9a:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <ssd1306_DrawPixel+0xdc>)
 8002c9c:	54d1      	strb	r1, [r2, r3]
 8002c9e:	e021      	b.n	8002ce4 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	1dbb      	adds	r3, r7, #6
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	08db      	lsrs	r3, r3, #3
 8002caa:	b2d8      	uxtb	r0, r3
 8002cac:	0003      	movs	r3, r0
 8002cae:	01db      	lsls	r3, r3, #7
 8002cb0:	18d3      	adds	r3, r2, r3
 8002cb2:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <ssd1306_DrawPixel+0xdc>)
 8002cb4:	5cd3      	ldrb	r3, [r2, r3]
 8002cb6:	b25b      	sxtb	r3, r3
 8002cb8:	1dba      	adds	r2, r7, #6
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	2107      	movs	r1, #7
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4091      	lsls	r1, r2
 8002cc4:	000a      	movs	r2, r1
 8002cc6:	b252      	sxtb	r2, r2
 8002cc8:	43d2      	mvns	r2, r2
 8002cca:	b252      	sxtb	r2, r2
 8002ccc:	4013      	ands	r3, r2
 8002cce:	b259      	sxtb	r1, r3
 8002cd0:	1dfb      	adds	r3, r7, #7
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	01db      	lsls	r3, r3, #7
 8002cd8:	18d3      	adds	r3, r2, r3
 8002cda:	b2c9      	uxtb	r1, r1
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <ssd1306_DrawPixel+0xdc>)
 8002cde:	54d1      	strb	r1, [r2, r3]
 8002ce0:	e000      	b.n	8002ce4 <ssd1306_DrawPixel+0xd0>
        return;
 8002ce2:	46c0      	nop			; (mov r8, r8)
    }
}
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b003      	add	sp, #12
 8002ce8:	bd90      	pop	{r4, r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	20000408 	.word	0x20000408
 8002cf0:	20000208 	.word	0x20000208

08002cf4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	0004      	movs	r4, r0
 8002cfc:	1d38      	adds	r0, r7, #4
 8002cfe:	6001      	str	r1, [r0, #0]
 8002d00:	6042      	str	r2, [r0, #4]
 8002d02:	0019      	movs	r1, r3
 8002d04:	200f      	movs	r0, #15
 8002d06:	183b      	adds	r3, r7, r0
 8002d08:	1c22      	adds	r2, r4, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	230e      	movs	r3, #14
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	1c0a      	adds	r2, r1, #0
 8002d12:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002d14:	183b      	adds	r3, r7, r0
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b1f      	cmp	r3, #31
 8002d1a:	d904      	bls.n	8002d26 <ssd1306_WriteChar+0x32>
 8002d1c:	230f      	movs	r3, #15
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b7e      	cmp	r3, #126	; 0x7e
 8002d24:	d901      	bls.n	8002d2a <ssd1306_WriteChar+0x36>
        return 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e078      	b.n	8002e1c <ssd1306_WriteChar+0x128>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <ssd1306_WriteChar+0x130>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	001a      	movs	r2, r3
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	18d3      	adds	r3, r2, r3
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	dc07      	bgt.n	8002d4a <ssd1306_WriteChar+0x56>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <ssd1306_WriteChar+0x130>)
 8002d3c:	885b      	ldrh	r3, [r3, #2]
 8002d3e:	001a      	movs	r2, r3
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	dd01      	ble.n	8002d4e <ssd1306_WriteChar+0x5a>
    {
        // Not enough space on current line
        return 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e066      	b.n	8002e1c <ssd1306_WriteChar+0x128>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e051      	b.n	8002df8 <ssd1306_WriteChar+0x104>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	230f      	movs	r3, #15
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	3b20      	subs	r3, #32
 8002d60:	1d39      	adds	r1, r7, #4
 8002d62:	7849      	ldrb	r1, [r1, #1]
 8002d64:	434b      	muls	r3, r1
 8002d66:	0019      	movs	r1, r3
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	18cb      	adds	r3, r1, r3
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	18d3      	adds	r3, r2, r3
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	e035      	b.n	8002de6 <ssd1306_WriteChar+0xf2>
            if((b << j) & 0x8000)  {
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	4013      	ands	r3, r2
 8002d86:	d014      	beq.n	8002db2 <ssd1306_WriteChar+0xbe>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <ssd1306_WriteChar+0x130>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	18d3      	adds	r3, r2, r3
 8002d94:	b2d8      	uxtb	r0, r3
 8002d96:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <ssd1306_WriteChar+0x130>)
 8002d98:	885b      	ldrh	r3, [r3, #2]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	18d3      	adds	r3, r2, r3
 8002da2:	b2d9      	uxtb	r1, r3
 8002da4:	230e      	movs	r3, #14
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	001a      	movs	r2, r3
 8002dac:	f7ff ff32 	bl	8002c14 <ssd1306_DrawPixel>
 8002db0:	e016      	b.n	8002de0 <ssd1306_WriteChar+0xec>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <ssd1306_WriteChar+0x130>)
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	18d3      	adds	r3, r2, r3
 8002dbe:	b2d8      	uxtb	r0, r3
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <ssd1306_WriteChar+0x130>)
 8002dc2:	885b      	ldrh	r3, [r3, #2]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	18d3      	adds	r3, r2, r3
 8002dcc:	b2d9      	uxtb	r1, r3
 8002dce:	230e      	movs	r3, #14
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	425a      	negs	r2, r3
 8002dd6:	4153      	adcs	r3, r2
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	001a      	movs	r2, r3
 8002ddc:	f7ff ff1a 	bl	8002c14 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	3301      	adds	r3, #1
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	001a      	movs	r2, r3
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d3c3      	bcc.n	8002d7a <ssd1306_WriteChar+0x86>
    for(i = 0; i < Font.FontHeight; i++) {
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3301      	adds	r3, #1
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d3a7      	bcc.n	8002d54 <ssd1306_WriteChar+0x60>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <ssd1306_WriteChar+0x130>)
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	18d3      	adds	r3, r2, r3
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <ssd1306_WriteChar+0x130>)
 8002e14:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b009      	add	sp, #36	; 0x24
 8002e22:	bd90      	pop	{r4, r7, pc}
 8002e24:	20000408 	.word	0x20000408

08002e28 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	1d38      	adds	r0, r7, #4
 8002e32:	6001      	str	r1, [r0, #0]
 8002e34:	6042      	str	r2, [r0, #4]
 8002e36:	001a      	movs	r2, r3
 8002e38:	1cfb      	adds	r3, r7, #3
 8002e3a:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8002e3c:	e014      	b.n	8002e68 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	7818      	ldrb	r0, [r3, #0]
 8002e42:	1cfb      	adds	r3, r7, #3
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	1d3a      	adds	r2, r7, #4
 8002e48:	6811      	ldr	r1, [r2, #0]
 8002e4a:	6852      	ldr	r2, [r2, #4]
 8002e4c:	f7ff ff52 	bl	8002cf4 <ssd1306_WriteChar>
 8002e50:	0003      	movs	r3, r0
 8002e52:	001a      	movs	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d002      	beq.n	8002e62 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	e008      	b.n	8002e74 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e6      	bne.n	8002e3e <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	781b      	ldrb	r3, [r3, #0]
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b004      	add	sp, #16
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	0002      	movs	r2, r0
 8002e84:	1dfb      	adds	r3, r7, #7
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	1dbb      	adds	r3, r7, #6
 8002e8a:	1c0a      	adds	r2, r1, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <ssd1306_SetCursor+0x30>)
 8002e96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002e98:	1dbb      	adds	r3, r7, #6
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	4b03      	ldr	r3, [pc, #12]	; (8002eac <ssd1306_SetCursor+0x30>)
 8002ea0:	805a      	strh	r2, [r3, #2]
}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	20000408 	.word	0x20000408

08002eb0 <isSSD1306Ready>:

/**
 *		@brief	Check it if the device is ready
 *		@return true
 */
bool isSSD1306Ready(){
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 2, 10) != HAL_OK){
 8002eb4:	4806      	ldr	r0, [pc, #24]	; (8002ed0 <isSSD1306Ready+0x20>)
 8002eb6:	230a      	movs	r3, #10
 8002eb8:	2202      	movs	r2, #2
 8002eba:	2178      	movs	r1, #120	; 0x78
 8002ebc:	f001 fcd8 	bl	8004870 <HAL_I2C_IsDeviceReady>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d001      	beq.n	8002ec8 <isSSD1306Ready+0x18>
		return false;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <isSSD1306Ready+0x1a>
	}
	return true;
 8002ec8:	2301      	movs	r3, #1
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000434 	.word	0x20000434

08002ed4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_MspInit+0x44>)
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <HAL_MspInit+0x44>)
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	619a      	str	r2, [r3, #24]
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_MspInit+0x44>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2201      	movs	r2, #1
 8002eec:	4013      	ands	r3, r2
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_MspInit+0x44>)
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_MspInit+0x44>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0549      	lsls	r1, r1, #21
 8002efc:	430a      	orrs	r2, r1
 8002efe:	61da      	str	r2, [r3, #28]
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_MspInit+0x44>)
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	055b      	lsls	r3, r3, #21
 8002f08:	4013      	ands	r3, r2
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b002      	add	sp, #8
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	40021000 	.word	0x40021000

08002f1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	2314      	movs	r3, #20
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	0018      	movs	r0, r3
 8002f2a:	2314      	movs	r3, #20
 8002f2c:	001a      	movs	r2, r3
 8002f2e:	2100      	movs	r1, #0
 8002f30:	f003 fef0 	bl	8006d14 <memset>
  if(hadc->Instance==ADC1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_ADC_MspInit+0x84>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d12c      	bne.n	8002f98 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_ADC_MspInit+0x88>)
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <HAL_ADC_MspInit+0x88>)
 8002f44:	2180      	movs	r1, #128	; 0x80
 8002f46:	0089      	lsls	r1, r1, #2
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	619a      	str	r2, [r3, #24]
 8002f4c:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_ADC_MspInit+0x88>)
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_ADC_MspInit+0x88>)
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_ADC_MspInit+0x88>)
 8002f60:	2180      	movs	r1, #128	; 0x80
 8002f62:	0289      	lsls	r1, r1, #10
 8002f64:	430a      	orrs	r2, r1
 8002f66:	615a      	str	r2, [r3, #20]
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_ADC_MspInit+0x88>)
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	029b      	lsls	r3, r3, #10
 8002f70:	4013      	ands	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = FEEDBACK_Pin|ACS_VOUT_Pin;
 8002f76:	2114      	movs	r1, #20
 8002f78:	187b      	adds	r3, r7, r1
 8002f7a:	2211      	movs	r2, #17
 8002f7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f7e:	187b      	adds	r3, r7, r1
 8002f80:	2203      	movs	r2, #3
 8002f82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	187b      	adds	r3, r7, r1
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8a:	187a      	adds	r2, r7, r1
 8002f8c:	2390      	movs	r3, #144	; 0x90
 8002f8e:	05db      	lsls	r3, r3, #23
 8002f90:	0011      	movs	r1, r2
 8002f92:	0018      	movs	r0, r3
 8002f94:	f000 ffb0 	bl	8003ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b00a      	add	sp, #40	; 0x28
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40012400 	.word	0x40012400
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	2314      	movs	r3, #20
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	2314      	movs	r3, #20
 8002fb8:	001a      	movs	r2, r3
 8002fba:	2100      	movs	r1, #0
 8002fbc:	f003 feaa 	bl	8006d14 <memset>
  if(hi2c->Instance==I2C1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_I2C_MspInit+0x90>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d131      	bne.n	800302e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <HAL_I2C_MspInit+0x94>)
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	4b1b      	ldr	r3, [pc, #108]	; (800303c <HAL_I2C_MspInit+0x94>)
 8002fd0:	2180      	movs	r1, #128	; 0x80
 8002fd2:	02c9      	lsls	r1, r1, #11
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	615a      	str	r2, [r3, #20]
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_I2C_MspInit+0x94>)
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	02db      	lsls	r3, r3, #11
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fe6:	2114      	movs	r1, #20
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	22c0      	movs	r2, #192	; 0xc0
 8002fec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2212      	movs	r2, #18
 8002ff2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ffa:	187b      	adds	r3, r7, r1
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003000:	187b      	adds	r3, r7, r1
 8003002:	2201      	movs	r2, #1
 8003004:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003006:	187b      	adds	r3, r7, r1
 8003008:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <HAL_I2C_MspInit+0x98>)
 800300a:	0019      	movs	r1, r3
 800300c:	0010      	movs	r0, r2
 800300e:	f000 ff73 	bl	8003ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_I2C_MspInit+0x94>)
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_I2C_MspInit+0x94>)
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	0389      	lsls	r1, r1, #14
 800301c:	430a      	orrs	r2, r1
 800301e:	61da      	str	r2, [r3, #28]
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_I2C_MspInit+0x94>)
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	039b      	lsls	r3, r3, #14
 8003028:	4013      	ands	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b00a      	add	sp, #40	; 0x28
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	40005400 	.word	0x40005400
 800303c:	40021000 	.word	0x40021000
 8003040:	48000400 	.word	0x48000400

08003044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a09      	ldr	r2, [pc, #36]	; (8003078 <HAL_TIM_Base_MspInit+0x34>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d10b      	bne.n	800306e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_TIM_Base_MspInit+0x38>)
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <HAL_TIM_Base_MspInit+0x38>)
 800305c:	2102      	movs	r1, #2
 800305e:	430a      	orrs	r2, r1
 8003060:	61da      	str	r2, [r3, #28]
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_TIM_Base_MspInit+0x38>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	2202      	movs	r2, #2
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b004      	add	sp, #16
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	40000400 	.word	0x40000400
 800307c:	40021000 	.word	0x40021000

08003080 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003088:	230c      	movs	r3, #12
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	0018      	movs	r0, r3
 800308e:	2314      	movs	r3, #20
 8003090:	001a      	movs	r2, r3
 8003092:	2100      	movs	r1, #0
 8003094:	f003 fe3e 	bl	8006d14 <memset>
  if(htim->Instance==TIM3)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a15      	ldr	r2, [pc, #84]	; (80030f4 <HAL_TIM_MspPostInit+0x74>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d124      	bne.n	80030ec <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_TIM_MspPostInit+0x78>)
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_TIM_MspPostInit+0x78>)
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	0289      	lsls	r1, r1, #10
 80030ac:	430a      	orrs	r2, r1
 80030ae:	615a      	str	r2, [r3, #20]
 80030b0:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_TIM_MspPostInit+0x78>)
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	4013      	ands	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = CONTROL_PIN_Pin;
 80030be:	210c      	movs	r1, #12
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	2240      	movs	r2, #64	; 0x40
 80030c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	187b      	adds	r3, r7, r1
 80030c8:	2202      	movs	r2, #2
 80030ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	2200      	movs	r2, #0
 80030d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	2201      	movs	r2, #1
 80030dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CONTROL_PIN_GPIO_Port, &GPIO_InitStruct);
 80030de:	187a      	adds	r2, r7, r1
 80030e0:	2390      	movs	r3, #144	; 0x90
 80030e2:	05db      	lsls	r3, r3, #23
 80030e4:	0011      	movs	r1, r2
 80030e6:	0018      	movs	r0, r3
 80030e8:	f000 ff06 	bl	8003ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b008      	add	sp, #32
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08c      	sub	sp, #48	; 0x30
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	231c      	movs	r3, #28
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	0018      	movs	r0, r3
 800310a:	2314      	movs	r3, #20
 800310c:	001a      	movs	r2, r3
 800310e:	2100      	movs	r1, #0
 8003110:	f003 fe00 	bl	8006d14 <memset>
  if(huart->Instance==USART1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a39      	ldr	r2, [pc, #228]	; (8003200 <HAL_UART_MspInit+0x104>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d134      	bne.n	8003188 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800311e:	4b39      	ldr	r3, [pc, #228]	; (8003204 <HAL_UART_MspInit+0x108>)
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	4b38      	ldr	r3, [pc, #224]	; (8003204 <HAL_UART_MspInit+0x108>)
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	01c9      	lsls	r1, r1, #7
 8003128:	430a      	orrs	r2, r1
 800312a:	619a      	str	r2, [r3, #24]
 800312c:	4b35      	ldr	r3, [pc, #212]	; (8003204 <HAL_UART_MspInit+0x108>)
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	01db      	lsls	r3, r3, #7
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313a:	4b32      	ldr	r3, [pc, #200]	; (8003204 <HAL_UART_MspInit+0x108>)
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	4b31      	ldr	r3, [pc, #196]	; (8003204 <HAL_UART_MspInit+0x108>)
 8003140:	2180      	movs	r1, #128	; 0x80
 8003142:	0289      	lsls	r1, r1, #10
 8003144:	430a      	orrs	r2, r1
 8003146:	615a      	str	r2, [r3, #20]
 8003148:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <HAL_UART_MspInit+0x108>)
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	029b      	lsls	r3, r3, #10
 8003150:	4013      	ands	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003156:	211c      	movs	r1, #28
 8003158:	187b      	adds	r3, r7, r1
 800315a:	22c0      	movs	r2, #192	; 0xc0
 800315c:	00d2      	lsls	r2, r2, #3
 800315e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	187b      	adds	r3, r7, r1
 8003162:	2202      	movs	r2, #2
 8003164:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	187b      	adds	r3, r7, r1
 8003168:	2200      	movs	r2, #0
 800316a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800316c:	187b      	adds	r3, r7, r1
 800316e:	2203      	movs	r2, #3
 8003170:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003172:	187b      	adds	r3, r7, r1
 8003174:	2201      	movs	r2, #1
 8003176:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003178:	187a      	adds	r2, r7, r1
 800317a:	2390      	movs	r3, #144	; 0x90
 800317c:	05db      	lsls	r3, r3, #23
 800317e:	0011      	movs	r1, r2
 8003180:	0018      	movs	r0, r3
 8003182:	f000 feb9 	bl	8003ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003186:	e037      	b.n	80031f8 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <HAL_UART_MspInit+0x10c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d132      	bne.n	80031f8 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <HAL_UART_MspInit+0x108>)
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <HAL_UART_MspInit+0x108>)
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	0289      	lsls	r1, r1, #10
 800319c:	430a      	orrs	r2, r1
 800319e:	61da      	str	r2, [r3, #28]
 80031a0:	4b18      	ldr	r3, [pc, #96]	; (8003204 <HAL_UART_MspInit+0x108>)
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	029b      	lsls	r3, r3, #10
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <HAL_UART_MspInit+0x108>)
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <HAL_UART_MspInit+0x108>)
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	0289      	lsls	r1, r1, #10
 80031b8:	430a      	orrs	r2, r1
 80031ba:	615a      	str	r2, [r3, #20]
 80031bc:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_UART_MspInit+0x108>)
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	029b      	lsls	r3, r3, #10
 80031c4:	4013      	ands	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031ca:	211c      	movs	r1, #28
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	220c      	movs	r2, #12
 80031d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	2202      	movs	r2, #2
 80031d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031de:	187b      	adds	r3, r7, r1
 80031e0:	2203      	movs	r2, #3
 80031e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	2201      	movs	r2, #1
 80031e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ea:	187a      	adds	r2, r7, r1
 80031ec:	2390      	movs	r3, #144	; 0x90
 80031ee:	05db      	lsls	r3, r3, #23
 80031f0:	0011      	movs	r1, r2
 80031f2:	0018      	movs	r0, r3
 80031f4:	f000 fe80 	bl	8003ef8 <HAL_GPIO_Init>
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b00c      	add	sp, #48	; 0x30
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40013800 	.word	0x40013800
 8003204:	40021000 	.word	0x40021000
 8003208:	40004400 	.word	0x40004400

0800320c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800321a:	e7fe      	b.n	800321a <HardFault_Handler+0x4>

0800321c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003234:	f000 f8b0 	bl	8003398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003242:	2008      	movs	r0, #8
 8003244:	f001 f800 	bl	8004248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <_sbrk+0x50>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <_sbrk+0x16>
		heap_end = &end;
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <_sbrk+0x50>)
 8003262:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <_sbrk+0x54>)
 8003264:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <_sbrk+0x50>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <_sbrk+0x50>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	18d3      	adds	r3, r2, r3
 8003274:	466a      	mov	r2, sp
 8003276:	4293      	cmp	r3, r2
 8003278:	d907      	bls.n	800328a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800327a:	f003 fd21 	bl	8006cc0 <__errno>
 800327e:	0003      	movs	r3, r0
 8003280:	220c      	movs	r2, #12
 8003282:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003284:	2301      	movs	r3, #1
 8003286:	425b      	negs	r3, r3
 8003288:	e006      	b.n	8003298 <_sbrk+0x48>
	}

	heap_end += incr;
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <_sbrk+0x50>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	18d2      	adds	r2, r2, r3
 8003292:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <_sbrk+0x50>)
 8003294:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003296:	68fb      	ldr	r3, [r7, #12]
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b004      	add	sp, #16
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000410 	.word	0x20000410
 80032a4:	20000650 	.word	0x20000650

080032a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032b4:	480d      	ldr	r0, [pc, #52]	; (80032ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032b8:	480d      	ldr	r0, [pc, #52]	; (80032f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80032ba:	490e      	ldr	r1, [pc, #56]	; (80032f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032bc:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <LoopForever+0xe>)
  movs r3, #0
 80032be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032c0:	e002      	b.n	80032c8 <LoopCopyDataInit>

080032c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032c6:	3304      	adds	r3, #4

080032c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032cc:	d3f9      	bcc.n	80032c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80032d0:	4c0b      	ldr	r4, [pc, #44]	; (8003300 <LoopForever+0x16>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032d4:	e001      	b.n	80032da <LoopFillZerobss>

080032d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032d8:	3204      	adds	r2, #4

080032da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032dc:	d3fb      	bcc.n	80032d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032de:	f7ff ffe3 	bl	80032a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80032e2:	f003 fcf3 	bl	8006ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032e6:	f7fe ffc3 	bl	8002270 <main>

080032ea <LoopForever>:

LoopForever:
    b LoopForever
 80032ea:	e7fe      	b.n	80032ea <LoopForever>
  ldr   r0, =_estack
 80032ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80032f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80032f8:	080098a8 	.word	0x080098a8
  ldr r2, =_sbss
 80032fc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003300:	2000064c 	.word	0x2000064c

08003304 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003304:	e7fe      	b.n	8003304 <ADC1_IRQHandler>
	...

08003308 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800330c:	4b07      	ldr	r3, [pc, #28]	; (800332c <HAL_Init+0x24>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_Init+0x24>)
 8003312:	2110      	movs	r1, #16
 8003314:	430a      	orrs	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003318:	2000      	movs	r0, #0
 800331a:	f000 f809 	bl	8003330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800331e:	f7ff fdd9 	bl	8002ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	40022000 	.word	0x40022000

08003330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_InitTick+0x5c>)
 800333a:	681c      	ldr	r4, [r3, #0]
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <HAL_InitTick+0x60>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	0019      	movs	r1, r3
 8003342:	23fa      	movs	r3, #250	; 0xfa
 8003344:	0098      	lsls	r0, r3, #2
 8003346:	f7fc fef1 	bl	800012c <__udivsi3>
 800334a:	0003      	movs	r3, r0
 800334c:	0019      	movs	r1, r3
 800334e:	0020      	movs	r0, r4
 8003350:	f7fc feec 	bl	800012c <__udivsi3>
 8003354:	0003      	movs	r3, r0
 8003356:	0018      	movs	r0, r3
 8003358:	f000 fdc1 	bl	8003ede <HAL_SYSTICK_Config>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d001      	beq.n	8003364 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e00f      	b.n	8003384 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d80b      	bhi.n	8003382 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	2301      	movs	r3, #1
 800336e:	425b      	negs	r3, r3
 8003370:	2200      	movs	r2, #0
 8003372:	0018      	movs	r0, r3
 8003374:	f000 fd8e 	bl	8003e94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_InitTick+0x64>)
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b003      	add	sp, #12
 800338a:	bd90      	pop	{r4, r7, pc}
 800338c:	20000008 	.word	0x20000008
 8003390:	20000010 	.word	0x20000010
 8003394:	2000000c 	.word	0x2000000c

08003398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_IncTick+0x1c>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	001a      	movs	r2, r3
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_IncTick+0x20>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	18d2      	adds	r2, r2, r3
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_IncTick+0x20>)
 80033aa:	601a      	str	r2, [r3, #0]
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	20000010 	.word	0x20000010
 80033b8:	20000644 	.word	0x20000644

080033bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  return uwTick;
 80033c0:	4b02      	ldr	r3, [pc, #8]	; (80033cc <HAL_GetTick+0x10>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	20000644 	.word	0x20000644

080033d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d8:	f7ff fff0 	bl	80033bc <HAL_GetTick>
 80033dc:	0003      	movs	r3, r0
 80033de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3301      	adds	r3, #1
 80033e8:	d005      	beq.n	80033f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_Delay+0x40>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	001a      	movs	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	f7ff ffe0 	bl	80033bc <HAL_GetTick>
 80033fc:	0002      	movs	r2, r0
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	429a      	cmp	r2, r3
 8003406:	d8f7      	bhi.n	80033f8 <HAL_Delay+0x28>
  {
  }
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b004      	add	sp, #16
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000010 	.word	0x20000010

08003414 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800341c:	230f      	movs	r3, #15
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e125      	b.n	800367e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2234      	movs	r2, #52	; 0x34
 8003444:	2100      	movs	r1, #0
 8003446:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0018      	movs	r0, r3
 800344c:	f7ff fd66 	bl	8002f1c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	2210      	movs	r2, #16
 8003456:	4013      	ands	r3, r2
 8003458:	d000      	beq.n	800345c <HAL_ADC_Init+0x48>
 800345a:	e103      	b.n	8003664 <HAL_ADC_Init+0x250>
 800345c:	230f      	movs	r3, #15
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d000      	beq.n	8003468 <HAL_ADC_Init+0x54>
 8003466:	e0fd      	b.n	8003664 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2204      	movs	r2, #4
 8003470:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003472:	d000      	beq.n	8003476 <HAL_ADC_Init+0x62>
 8003474:	e0f6      	b.n	8003664 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	4a83      	ldr	r2, [pc, #524]	; (8003688 <HAL_ADC_Init+0x274>)
 800347c:	4013      	ands	r3, r2
 800347e:	2202      	movs	r2, #2
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2203      	movs	r2, #3
 800348e:	4013      	ands	r3, r2
 8003490:	2b01      	cmp	r3, #1
 8003492:	d112      	bne.n	80034ba <HAL_ADC_Init+0xa6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	4013      	ands	r3, r2
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d009      	beq.n	80034b6 <HAL_ADC_Init+0xa2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	401a      	ands	r2, r3
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_Init+0xa6>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_ADC_Init+0xa8>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d116      	bne.n	80034ee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2218      	movs	r2, #24
 80034c8:	4393      	bics	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	0899      	lsrs	r1, r3, #2
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4964      	ldr	r1, [pc, #400]	; (800368c <HAL_ADC_Init+0x278>)
 80034fa:	400a      	ands	r2, r1
 80034fc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7e1b      	ldrb	r3, [r3, #24]
 8003502:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7e5b      	ldrb	r3, [r3, #25]
 8003508:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800350a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	7e9b      	ldrb	r3, [r3, #26]
 8003510:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003512:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	2b01      	cmp	r3, #1
 800351a:	d002      	beq.n	8003522 <HAL_ADC_Init+0x10e>
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	015b      	lsls	r3, r3, #5
 8003520:	e000      	b.n	8003524 <HAL_ADC_Init+0x110>
 8003522:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003524:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800352a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d101      	bne.n	8003538 <HAL_ADC_Init+0x124>
 8003534:	2304      	movs	r3, #4
 8003536:	e000      	b.n	800353a <HAL_ADC_Init+0x126>
 8003538:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800353a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2124      	movs	r1, #36	; 0x24
 8003540:	5c5b      	ldrb	r3, [r3, r1]
 8003542:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003544:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	4313      	orrs	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	7edb      	ldrb	r3, [r3, #27]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d115      	bne.n	8003580 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	7e9b      	ldrb	r3, [r3, #26]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2280      	movs	r2, #128	; 0x80
 8003560:	0252      	lsls	r2, r2, #9
 8003562:	4313      	orrs	r3, r2
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	e00b      	b.n	8003580 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	2220      	movs	r2, #32
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	2201      	movs	r2, #1
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	23c2      	movs	r3, #194	; 0xc2
 8003586:	33ff      	adds	r3, #255	; 0xff
 8003588:	429a      	cmp	r2, r3
 800358a:	d007      	beq.n	800359c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003594:	4313      	orrs	r3, r2
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	4313      	orrs	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68d9      	ldr	r1, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	055b      	lsls	r3, r3, #21
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d01b      	beq.n	80035f0 <HAL_ADC_Init+0x1dc>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d017      	beq.n	80035f0 <HAL_ADC_Init+0x1dc>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d013      	beq.n	80035f0 <HAL_ADC_Init+0x1dc>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d00f      	beq.n	80035f0 <HAL_ADC_Init+0x1dc>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d00b      	beq.n	80035f0 <HAL_ADC_Init+0x1dc>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d007      	beq.n	80035f0 <HAL_ADC_Init+0x1dc>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	2b06      	cmp	r3, #6
 80035e6:	d003      	beq.n	80035f0 <HAL_ADC_Init+0x1dc>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	2b07      	cmp	r3, #7
 80035ee:	d112      	bne.n	8003616 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2107      	movs	r1, #7
 80035fc:	438a      	bics	r2, r1
 80035fe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6959      	ldr	r1, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	2207      	movs	r2, #7
 800360c:	401a      	ands	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a1c      	ldr	r2, [pc, #112]	; (8003690 <HAL_ADC_Init+0x27c>)
 800361e:	4013      	ands	r3, r2
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	d10b      	bne.n	800363e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	2203      	movs	r2, #3
 8003632:	4393      	bics	r3, r2
 8003634:	2201      	movs	r2, #1
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800363c:	e01c      	b.n	8003678 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	2212      	movs	r2, #18
 8003644:	4393      	bics	r3, r2
 8003646:	2210      	movs	r2, #16
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	2201      	movs	r2, #1
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800365a:	230f      	movs	r3, #15
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003662:	e009      	b.n	8003678 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	2210      	movs	r2, #16
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003670:	230f      	movs	r3, #15
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003678:	230f      	movs	r3, #15
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	781b      	ldrb	r3, [r3, #0]
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b004      	add	sp, #16
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	fffffefd 	.word	0xfffffefd
 800368c:	fffe0219 	.word	0xfffe0219
 8003690:	833fffe7 	.word	0x833fffe7

08003694 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800369c:	230f      	movs	r3, #15
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2204      	movs	r2, #4
 80036ac:	4013      	ands	r3, r2
 80036ae:	d138      	bne.n	8003722 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2234      	movs	r2, #52	; 0x34
 80036b4:	5c9b      	ldrb	r3, [r3, r2]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_ADC_Start+0x2a>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e038      	b.n	8003730 <HAL_ADC_Start+0x9c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2234      	movs	r2, #52	; 0x34
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7e5b      	ldrb	r3, [r3, #25]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d007      	beq.n	80036de <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80036ce:	230f      	movs	r3, #15
 80036d0:	18fc      	adds	r4, r7, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f000 fa05 	bl	8003ae4 <ADC_Enable>
 80036da:	0003      	movs	r3, r0
 80036dc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036de:	230f      	movs	r3, #15
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d120      	bne.n	800372a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	4a12      	ldr	r2, [pc, #72]	; (8003738 <HAL_ADC_Start+0xa4>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	2280      	movs	r2, #128	; 0x80
 80036f2:	0052      	lsls	r2, r2, #1
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2234      	movs	r2, #52	; 0x34
 8003704:	2100      	movs	r1, #0
 8003706:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	221c      	movs	r2, #28
 800370e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2104      	movs	r1, #4
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	e003      	b.n	800372a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003722:	230f      	movs	r3, #15
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2202      	movs	r2, #2
 8003728:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800372a:	230f      	movs	r3, #15
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	781b      	ldrb	r3, [r3, #0]
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b005      	add	sp, #20
 8003736:	bd90      	pop	{r4, r7, pc}
 8003738:	fffff0fe 	.word	0xfffff0fe

0800373c <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 800373c:	b5b0      	push	{r4, r5, r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003744:	230f      	movs	r3, #15
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2234      	movs	r2, #52	; 0x34
 8003750:	5c9b      	ldrb	r3, [r3, r2]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_ADC_Stop+0x1e>
 8003756:	2302      	movs	r3, #2
 8003758:	e02a      	b.n	80037b0 <HAL_ADC_Stop+0x74>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2234      	movs	r2, #52	; 0x34
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003762:	250f      	movs	r5, #15
 8003764:	197c      	adds	r4, r7, r5
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f000 faa1 	bl	8003cb0 <ADC_ConversionStop>
 800376e:	0003      	movs	r3, r0
 8003770:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003772:	197b      	adds	r3, r7, r5
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d113      	bne.n	80037a2 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800377a:	250f      	movs	r5, #15
 800377c:	197c      	adds	r4, r7, r5
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0018      	movs	r0, r3
 8003782:	f000 fa2b 	bl	8003bdc <ADC_Disable>
 8003786:	0003      	movs	r3, r0
 8003788:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800378a:	197b      	adds	r3, r7, r5
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d107      	bne.n	80037a2 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <HAL_ADC_Stop+0x7c>)
 8003798:	4013      	ands	r3, r2
 800379a:	2201      	movs	r2, #1
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2234      	movs	r2, #52	; 0x34
 80037a6:	2100      	movs	r1, #0
 80037a8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80037aa:	230f      	movs	r3, #15
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	781b      	ldrb	r3, [r3, #0]
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b004      	add	sp, #16
 80037b6:	bdb0      	pop	{r4, r5, r7, pc}
 80037b8:	fffffefe 	.word	0xfffffefe

080037bc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d102      	bne.n	80037d4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80037ce:	2308      	movs	r3, #8
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e014      	b.n	80037fe <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	4013      	ands	r3, r2
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d10b      	bne.n	80037fa <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	2220      	movs	r2, #32
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2234      	movs	r2, #52	; 0x34
 80037f2:	2100      	movs	r1, #0
 80037f4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e06b      	b.n	80038d2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80037fa:	230c      	movs	r3, #12
 80037fc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80037fe:	f7ff fddd 	bl	80033bc <HAL_GetTick>
 8003802:	0003      	movs	r3, r0
 8003804:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003806:	e019      	b.n	800383c <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	d016      	beq.n	800383c <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <HAL_ADC_PollForConversion+0x68>
 8003814:	f7ff fdd2 	bl	80033bc <HAL_GetTick>
 8003818:	0002      	movs	r2, r0
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d20b      	bcs.n	800383c <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	2204      	movs	r2, #4
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2234      	movs	r2, #52	; 0x34
 8003834:	2100      	movs	r1, #0
 8003836:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e04a      	b.n	80038d2 <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4013      	ands	r3, r2
 8003846:	d0df      	beq.n	8003808 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	2280      	movs	r2, #128	; 0x80
 800384e:	0092      	lsls	r2, r2, #2
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	23c0      	movs	r3, #192	; 0xc0
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	4013      	ands	r3, r2
 8003862:	d12d      	bne.n	80038c0 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003868:	2b00      	cmp	r3, #0
 800386a:	d129      	bne.n	80038c0 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2208      	movs	r2, #8
 8003874:	4013      	ands	r3, r2
 8003876:	2b08      	cmp	r3, #8
 8003878:	d122      	bne.n	80038c0 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2204      	movs	r2, #4
 8003882:	4013      	ands	r3, r2
 8003884:	d110      	bne.n	80038a8 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	210c      	movs	r1, #12
 8003892:	438a      	bics	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <HAL_ADC_PollForConversion+0x120>)
 800389c:	4013      	ands	r3, r2
 800389e:	2201      	movs	r2, #1
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	639a      	str	r2, [r3, #56]	; 0x38
 80038a6:	e00b      	b.n	80038c0 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	2220      	movs	r2, #32
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	2201      	movs	r2, #1
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7e1b      	ldrb	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d103      	bne.n	80038d0 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	220c      	movs	r2, #12
 80038ce:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	fffffefe 	.word	0xfffffefe

080038e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80038ee:	0018      	movs	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b002      	add	sp, #8
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003902:	230f      	movs	r3, #15
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	055b      	lsls	r3, r3, #21
 8003916:	429a      	cmp	r2, r3
 8003918:	d011      	beq.n	800393e <HAL_ADC_ConfigChannel+0x46>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	2b01      	cmp	r3, #1
 8003920:	d00d      	beq.n	800393e <HAL_ADC_ConfigChannel+0x46>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	2b02      	cmp	r3, #2
 8003928:	d009      	beq.n	800393e <HAL_ADC_ConfigChannel+0x46>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	2b03      	cmp	r3, #3
 8003930:	d005      	beq.n	800393e <HAL_ADC_ConfigChannel+0x46>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	2b04      	cmp	r3, #4
 8003938:	d001      	beq.n	800393e <HAL_ADC_ConfigChannel+0x46>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2234      	movs	r2, #52	; 0x34
 8003942:	5c9b      	ldrb	r3, [r3, r2]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_ADC_ConfigChannel+0x54>
 8003948:	2302      	movs	r3, #2
 800394a:	e0bb      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x1cc>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2234      	movs	r2, #52	; 0x34
 8003950:	2101      	movs	r1, #1
 8003952:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2204      	movs	r2, #4
 800395c:	4013      	ands	r3, r2
 800395e:	d000      	beq.n	8003962 <HAL_ADC_ConfigChannel+0x6a>
 8003960:	e09f      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4a59      	ldr	r2, [pc, #356]	; (8003acc <HAL_ADC_ConfigChannel+0x1d4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d100      	bne.n	800396e <HAL_ADC_ConfigChannel+0x76>
 800396c:	e077      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2201      	movs	r2, #1
 800397a:	409a      	lsls	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	055b      	lsls	r3, r3, #21
 800398c:	429a      	cmp	r2, r3
 800398e:	d037      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x108>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d033      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x108>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	2b02      	cmp	r3, #2
 800399e:	d02f      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x108>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d02b      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x108>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d027      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x108>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	2b05      	cmp	r3, #5
 80039b6:	d023      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x108>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	2b06      	cmp	r3, #6
 80039be:	d01f      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x108>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	2b07      	cmp	r3, #7
 80039c6:	d01b      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	2107      	movs	r1, #7
 80039d4:	400b      	ands	r3, r1
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d012      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2107      	movs	r1, #7
 80039e6:	438a      	bics	r2, r1
 80039e8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6959      	ldr	r1, [r3, #20]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2207      	movs	r2, #7
 80039f6:	401a      	ands	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d003      	beq.n	8003a10 <HAL_ADC_ConfigChannel+0x118>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b11      	cmp	r3, #17
 8003a0e:	d152      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003a10:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <HAL_ADC_ConfigChannel+0x1d8>)
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d102      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x12a>
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	e001      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x12e>
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	03db      	lsls	r3, r3, #15
 8003a26:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <HAL_ADC_ConfigChannel+0x1d8>)
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d140      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_ADC_ConfigChannel+0x1dc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4927      	ldr	r1, [pc, #156]	; (8003ad8 <HAL_ADC_ConfigChannel+0x1e0>)
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7fc fb76 	bl	800012c <__udivsi3>
 8003a40:	0003      	movs	r3, r0
 8003a42:	001a      	movs	r2, r3
 8003a44:	0013      	movs	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	189b      	adds	r3, r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a4e:	e002      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f9      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x158>
 8003a5c:	e02b      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4099      	lsls	r1, r3
 8003a6c:	000b      	movs	r3, r1
 8003a6e:	43d9      	mvns	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	400a      	ands	r2, r1
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d003      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x190>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b11      	cmp	r3, #17
 8003a86:	d116      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_ADC_ConfigChannel+0x1d8>)
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b10      	cmp	r3, #16
 8003a92:	d101      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x1a0>
 8003a94:	4a11      	ldr	r2, [pc, #68]	; (8003adc <HAL_ADC_ConfigChannel+0x1e4>)
 8003a96:	e000      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x1a2>
 8003a98:	4a11      	ldr	r2, [pc, #68]	; (8003ae0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <HAL_ADC_ConfigChannel+0x1d8>)
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e009      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003aae:	230f      	movs	r3, #15
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2234      	movs	r2, #52	; 0x34
 8003aba:	2100      	movs	r1, #0
 8003abc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003abe:	230f      	movs	r3, #15
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	781b      	ldrb	r3, [r3, #0]
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b004      	add	sp, #16
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	00001001 	.word	0x00001001
 8003ad0:	40012708 	.word	0x40012708
 8003ad4:	20000008 	.word	0x20000008
 8003ad8:	000f4240 	.word	0x000f4240
 8003adc:	ff7fffff 	.word	0xff7fffff
 8003ae0:	ffbfffff 	.word	0xffbfffff

08003ae4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2203      	movs	r2, #3
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d112      	bne.n	8003b28 <ADC_Enable+0x44>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d009      	beq.n	8003b24 <ADC_Enable+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d101      	bne.n	8003b28 <ADC_Enable+0x44>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <ADC_Enable+0x46>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d14b      	bne.n	8003bc6 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <ADC_Enable+0xec>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	2210      	movs	r2, #16
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e038      	b.n	8003bc8 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2101      	movs	r1, #1
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <ADC_Enable+0xf0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	491b      	ldr	r1, [pc, #108]	; (8003bd8 <ADC_Enable+0xf4>)
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7fc fadd 	bl	800012c <__udivsi3>
 8003b72:	0003      	movs	r3, r0
 8003b74:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b76:	e002      	b.n	8003b7e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f9      	bne.n	8003b78 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b84:	f7ff fc1a 	bl	80033bc <HAL_GetTick>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b8c:	e014      	b.n	8003bb8 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b8e:	f7ff fc15 	bl	80033bc <HAL_GetTick>
 8003b92:	0002      	movs	r2, r0
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d90d      	bls.n	8003bb8 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	2201      	movs	r2, #1
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d1e3      	bne.n	8003b8e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b004      	add	sp, #16
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	80000017 	.word	0x80000017
 8003bd4:	20000008 	.word	0x20000008
 8003bd8:	000f4240 	.word	0x000f4240

08003bdc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2203      	movs	r2, #3
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d112      	bne.n	8003c1c <ADC_Disable+0x40>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d009      	beq.n	8003c18 <ADC_Disable+0x3c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	401a      	ands	r2, r3
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d101      	bne.n	8003c1c <ADC_Disable+0x40>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <ADC_Disable+0x42>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d041      	beq.n	8003ca6 <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2205      	movs	r2, #5
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d110      	bne.n	8003c52 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2203      	movs	r2, #3
 8003c46:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c48:	f7ff fbb8 	bl	80033bc <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c50:	e022      	b.n	8003c98 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	2210      	movs	r2, #16
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	2201      	movs	r2, #1
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e01c      	b.n	8003ca8 <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c6e:	f7ff fba5 	bl	80033bc <HAL_GetTick>
 8003c72:	0002      	movs	r2, r0
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d90d      	bls.n	8003c98 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	2210      	movs	r2, #16
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e007      	b.n	8003ca8 <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d0e3      	beq.n	8003c6e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b004      	add	sp, #16
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d034      	beq.n	8003d32 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2204      	movs	r2, #4
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d10d      	bne.n	8003cf2 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003ce0:	d107      	bne.n	8003cf2 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2110      	movs	r1, #16
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cf2:	f7ff fb63 	bl	80033bc <HAL_GetTick>
 8003cf6:	0003      	movs	r3, r0
 8003cf8:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003cfa:	e014      	b.n	8003d26 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003cfc:	f7ff fb5e 	bl	80033bc <HAL_GetTick>
 8003d00:	0002      	movs	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d90d      	bls.n	8003d26 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	2210      	movs	r2, #16
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e006      	b.n	8003d34 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d1e4      	bne.n	8003cfc <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b004      	add	sp, #16
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	0002      	movs	r2, r0
 8003d44:	1dfb      	adds	r3, r7, #7
 8003d46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d48:	1dfb      	adds	r3, r7, #7
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d4e:	d809      	bhi.n	8003d64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d50:	1dfb      	adds	r3, r7, #7
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	001a      	movs	r2, r3
 8003d56:	231f      	movs	r3, #31
 8003d58:	401a      	ands	r2, r3
 8003d5a:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <__NVIC_EnableIRQ+0x30>)
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4091      	lsls	r1, r2
 8003d60:	000a      	movs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
  }
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	e000e100 	.word	0xe000e100

08003d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	0002      	movs	r2, r0
 8003d78:	6039      	str	r1, [r7, #0]
 8003d7a:	1dfb      	adds	r3, r7, #7
 8003d7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d7e:	1dfb      	adds	r3, r7, #7
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b7f      	cmp	r3, #127	; 0x7f
 8003d84:	d828      	bhi.n	8003dd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d86:	4a2f      	ldr	r2, [pc, #188]	; (8003e44 <__NVIC_SetPriority+0xd4>)
 8003d88:	1dfb      	adds	r3, r7, #7
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b25b      	sxtb	r3, r3
 8003d8e:	089b      	lsrs	r3, r3, #2
 8003d90:	33c0      	adds	r3, #192	; 0xc0
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	589b      	ldr	r3, [r3, r2]
 8003d96:	1dfa      	adds	r2, r7, #7
 8003d98:	7812      	ldrb	r2, [r2, #0]
 8003d9a:	0011      	movs	r1, r2
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	400a      	ands	r2, r1
 8003da0:	00d2      	lsls	r2, r2, #3
 8003da2:	21ff      	movs	r1, #255	; 0xff
 8003da4:	4091      	lsls	r1, r2
 8003da6:	000a      	movs	r2, r1
 8003da8:	43d2      	mvns	r2, r2
 8003daa:	401a      	ands	r2, r3
 8003dac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	019b      	lsls	r3, r3, #6
 8003db2:	22ff      	movs	r2, #255	; 0xff
 8003db4:	401a      	ands	r2, r3
 8003db6:	1dfb      	adds	r3, r7, #7
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	0018      	movs	r0, r3
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	4003      	ands	r3, r0
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dc4:	481f      	ldr	r0, [pc, #124]	; (8003e44 <__NVIC_SetPriority+0xd4>)
 8003dc6:	1dfb      	adds	r3, r7, #7
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b25b      	sxtb	r3, r3
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	33c0      	adds	r3, #192	; 0xc0
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003dd6:	e031      	b.n	8003e3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dd8:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <__NVIC_SetPriority+0xd8>)
 8003dda:	1dfb      	adds	r3, r7, #7
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	0019      	movs	r1, r3
 8003de0:	230f      	movs	r3, #15
 8003de2:	400b      	ands	r3, r1
 8003de4:	3b08      	subs	r3, #8
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	3306      	adds	r3, #6
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	18d3      	adds	r3, r2, r3
 8003dee:	3304      	adds	r3, #4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	1dfa      	adds	r2, r7, #7
 8003df4:	7812      	ldrb	r2, [r2, #0]
 8003df6:	0011      	movs	r1, r2
 8003df8:	2203      	movs	r2, #3
 8003dfa:	400a      	ands	r2, r1
 8003dfc:	00d2      	lsls	r2, r2, #3
 8003dfe:	21ff      	movs	r1, #255	; 0xff
 8003e00:	4091      	lsls	r1, r2
 8003e02:	000a      	movs	r2, r1
 8003e04:	43d2      	mvns	r2, r2
 8003e06:	401a      	ands	r2, r3
 8003e08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	22ff      	movs	r2, #255	; 0xff
 8003e10:	401a      	ands	r2, r3
 8003e12:	1dfb      	adds	r3, r7, #7
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	0018      	movs	r0, r3
 8003e18:	2303      	movs	r3, #3
 8003e1a:	4003      	ands	r3, r0
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e20:	4809      	ldr	r0, [pc, #36]	; (8003e48 <__NVIC_SetPriority+0xd8>)
 8003e22:	1dfb      	adds	r3, r7, #7
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	001c      	movs	r4, r3
 8003e28:	230f      	movs	r3, #15
 8003e2a:	4023      	ands	r3, r4
 8003e2c:	3b08      	subs	r3, #8
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	430a      	orrs	r2, r1
 8003e32:	3306      	adds	r3, #6
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	18c3      	adds	r3, r0, r3
 8003e38:	3304      	adds	r3, #4
 8003e3a:	601a      	str	r2, [r3, #0]
}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b003      	add	sp, #12
 8003e42:	bd90      	pop	{r4, r7, pc}
 8003e44:	e000e100 	.word	0xe000e100
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <SysTick_Config+0x40>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e010      	b.n	8003e84 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <SysTick_Config+0x44>)
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	3a01      	subs	r2, #1
 8003e68:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	425b      	negs	r3, r3
 8003e6e:	2103      	movs	r1, #3
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7ff ff7d 	bl	8003d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <SysTick_Config+0x44>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <SysTick_Config+0x44>)
 8003e7e:	2207      	movs	r2, #7
 8003e80:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	0018      	movs	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	00ffffff 	.word	0x00ffffff
 8003e90:	e000e010 	.word	0xe000e010

08003e94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	210f      	movs	r1, #15
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	1c02      	adds	r2, r0, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b25b      	sxtb	r3, r3
 8003eae:	0011      	movs	r1, r2
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff ff5d 	bl	8003d70 <__NVIC_SetPriority>
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b004      	add	sp, #16
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	1dfb      	adds	r3, r7, #7
 8003ec8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eca:	1dfb      	adds	r3, r7, #7
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b25b      	sxtb	r3, r3
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7ff ff33 	bl	8003d3c <__NVIC_EnableIRQ>
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b002      	add	sp, #8
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7ff ffaf 	bl	8003e4c <SysTick_Config>
 8003eee:	0003      	movs	r3, r0
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f06:	e14f      	b.n	80041a8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4091      	lsls	r1, r2
 8003f12:	000a      	movs	r2, r1
 8003f14:	4013      	ands	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d100      	bne.n	8003f20 <HAL_GPIO_Init+0x28>
 8003f1e:	e140      	b.n	80041a2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x38>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b12      	cmp	r3, #18
 8003f2e:	d123      	bne.n	8003f78 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	08da      	lsrs	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3208      	adds	r2, #8
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	58d3      	ldr	r3, [r2, r3]
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2207      	movs	r2, #7
 8003f42:	4013      	ands	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	220f      	movs	r2, #15
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	0013      	movs	r3, r2
 8003f4c:	43da      	mvns	r2, r3
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2107      	movs	r1, #7
 8003f5c:	400b      	ands	r3, r1
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	409a      	lsls	r2, r3
 8003f62:	0013      	movs	r3, r2
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	08da      	lsrs	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3208      	adds	r2, #8
 8003f72:	0092      	lsls	r2, r2, #2
 8003f74:	6939      	ldr	r1, [r7, #16]
 8003f76:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	2203      	movs	r2, #3
 8003f84:	409a      	lsls	r2, r3
 8003f86:	0013      	movs	r3, r2
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2203      	movs	r2, #3
 8003f96:	401a      	ands	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	0013      	movs	r3, r2
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d00b      	beq.n	8003fcc <HAL_GPIO_Init+0xd4>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d007      	beq.n	8003fcc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fc0:	2b11      	cmp	r3, #17
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b12      	cmp	r3, #18
 8003fca:	d130      	bne.n	800402e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	0013      	movs	r3, r2
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	409a      	lsls	r2, r3
 8003fee:	0013      	movs	r3, r2
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004002:	2201      	movs	r2, #1
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	409a      	lsls	r2, r3
 8004008:	0013      	movs	r3, r2
 800400a:	43da      	mvns	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	2201      	movs	r2, #1
 800401a:	401a      	ands	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	409a      	lsls	r2, r3
 8004020:	0013      	movs	r3, r2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	2203      	movs	r2, #3
 800403a:	409a      	lsls	r2, r3
 800403c:	0013      	movs	r3, r2
 800403e:	43da      	mvns	r2, r3
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	0013      	movs	r3, r2
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	055b      	lsls	r3, r3, #21
 8004066:	4013      	ands	r3, r2
 8004068:	d100      	bne.n	800406c <HAL_GPIO_Init+0x174>
 800406a:	e09a      	b.n	80041a2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406c:	4b54      	ldr	r3, [pc, #336]	; (80041c0 <HAL_GPIO_Init+0x2c8>)
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <HAL_GPIO_Init+0x2c8>)
 8004072:	2101      	movs	r1, #1
 8004074:	430a      	orrs	r2, r1
 8004076:	619a      	str	r2, [r3, #24]
 8004078:	4b51      	ldr	r3, [pc, #324]	; (80041c0 <HAL_GPIO_Init+0x2c8>)
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2201      	movs	r2, #1
 800407e:	4013      	ands	r3, r2
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004084:	4a4f      	ldr	r2, [pc, #316]	; (80041c4 <HAL_GPIO_Init+0x2cc>)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	3302      	adds	r3, #2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	589b      	ldr	r3, [r3, r2]
 8004090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2203      	movs	r2, #3
 8004096:	4013      	ands	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	220f      	movs	r2, #15
 800409c:	409a      	lsls	r2, r3
 800409e:	0013      	movs	r3, r2
 80040a0:	43da      	mvns	r2, r3
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	2390      	movs	r3, #144	; 0x90
 80040ac:	05db      	lsls	r3, r3, #23
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d013      	beq.n	80040da <HAL_GPIO_Init+0x1e2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a44      	ldr	r2, [pc, #272]	; (80041c8 <HAL_GPIO_Init+0x2d0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00d      	beq.n	80040d6 <HAL_GPIO_Init+0x1de>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a43      	ldr	r2, [pc, #268]	; (80041cc <HAL_GPIO_Init+0x2d4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d007      	beq.n	80040d2 <HAL_GPIO_Init+0x1da>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a42      	ldr	r2, [pc, #264]	; (80041d0 <HAL_GPIO_Init+0x2d8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d101      	bne.n	80040ce <HAL_GPIO_Init+0x1d6>
 80040ca:	2303      	movs	r3, #3
 80040cc:	e006      	b.n	80040dc <HAL_GPIO_Init+0x1e4>
 80040ce:	2305      	movs	r3, #5
 80040d0:	e004      	b.n	80040dc <HAL_GPIO_Init+0x1e4>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e002      	b.n	80040dc <HAL_GPIO_Init+0x1e4>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_GPIO_Init+0x1e4>
 80040da:	2300      	movs	r3, #0
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	2103      	movs	r1, #3
 80040e0:	400a      	ands	r2, r1
 80040e2:	0092      	lsls	r2, r2, #2
 80040e4:	4093      	lsls	r3, r2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040ec:	4935      	ldr	r1, [pc, #212]	; (80041c4 <HAL_GPIO_Init+0x2cc>)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	089b      	lsrs	r3, r3, #2
 80040f2:	3302      	adds	r3, #2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040fa:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <HAL_GPIO_Init+0x2dc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	43da      	mvns	r2, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	025b      	lsls	r3, r3, #9
 8004112:	4013      	ands	r3, r2
 8004114:	d003      	beq.n	800411e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800411e:	4b2d      	ldr	r3, [pc, #180]	; (80041d4 <HAL_GPIO_Init+0x2dc>)
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004124:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <HAL_GPIO_Init+0x2dc>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	43da      	mvns	r2, r3
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	029b      	lsls	r3, r3, #10
 800413c:	4013      	ands	r3, r2
 800413e:	d003      	beq.n	8004148 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004148:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <HAL_GPIO_Init+0x2dc>)
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800414e:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <HAL_GPIO_Init+0x2dc>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	43da      	mvns	r2, r3
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4013      	ands	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	035b      	lsls	r3, r3, #13
 8004166:	4013      	ands	r3, r2
 8004168:	d003      	beq.n	8004172 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004172:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <HAL_GPIO_Init+0x2dc>)
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004178:	4b16      	ldr	r3, [pc, #88]	; (80041d4 <HAL_GPIO_Init+0x2dc>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	43da      	mvns	r2, r3
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	039b      	lsls	r3, r3, #14
 8004190:	4013      	ands	r3, r2
 8004192:	d003      	beq.n	800419c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800419c:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <HAL_GPIO_Init+0x2dc>)
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	3301      	adds	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	40da      	lsrs	r2, r3
 80041b0:	1e13      	subs	r3, r2, #0
 80041b2:	d000      	beq.n	80041b6 <HAL_GPIO_Init+0x2be>
 80041b4:	e6a8      	b.n	8003f08 <HAL_GPIO_Init+0x10>
  } 
}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b006      	add	sp, #24
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40010000 	.word	0x40010000
 80041c8:	48000400 	.word	0x48000400
 80041cc:	48000800 	.word	0x48000800
 80041d0:	48000c00 	.word	0x48000c00
 80041d4:	40010400 	.word	0x40010400

080041d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	0008      	movs	r0, r1
 80041e2:	0011      	movs	r1, r2
 80041e4:	1cbb      	adds	r3, r7, #2
 80041e6:	1c02      	adds	r2, r0, #0
 80041e8:	801a      	strh	r2, [r3, #0]
 80041ea:	1c7b      	adds	r3, r7, #1
 80041ec:	1c0a      	adds	r2, r1, #0
 80041ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041f0:	1c7b      	adds	r3, r7, #1
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041f8:	1cbb      	adds	r3, r7, #2
 80041fa:	881a      	ldrh	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004200:	e003      	b.n	800420a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004202:	1cbb      	adds	r3, r7, #2
 8004204:	881a      	ldrh	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	46bd      	mov	sp, r7
 800420e:	b002      	add	sp, #8
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	000a      	movs	r2, r1
 800421c:	1cbb      	adds	r3, r7, #2
 800421e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	1cba      	adds	r2, r7, #2
 8004226:	8812      	ldrh	r2, [r2, #0]
 8004228:	4013      	ands	r3, r2
 800422a:	d005      	beq.n	8004238 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800422c:	1cbb      	adds	r3, r7, #2
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	041a      	lsls	r2, r3, #16
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004236:	e003      	b.n	8004240 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004238:	1cbb      	adds	r3, r7, #2
 800423a:	881a      	ldrh	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	619a      	str	r2, [r3, #24]
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	0002      	movs	r2, r0
 8004250:	1dbb      	adds	r3, r7, #6
 8004252:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	1dba      	adds	r2, r7, #6
 800425a:	8812      	ldrh	r2, [r2, #0]
 800425c:	4013      	ands	r3, r2
 800425e:	d008      	beq.n	8004272 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004262:	1dba      	adds	r2, r7, #6
 8004264:	8812      	ldrh	r2, [r2, #0]
 8004266:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004268:	1dbb      	adds	r3, r7, #6
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	0018      	movs	r0, r3
 800426e:	f7fe fbaf 	bl	80029d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b002      	add	sp, #8
 8004278:	bd80      	pop	{r7, pc}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	40010400 	.word	0x40010400

08004280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e082      	b.n	8004398 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2241      	movs	r2, #65	; 0x41
 8004296:	5c9b      	ldrb	r3, [r3, r2]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d107      	bne.n	80042ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2240      	movs	r2, #64	; 0x40
 80042a2:	2100      	movs	r1, #0
 80042a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f7fe fe7d 	bl	8002fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2241      	movs	r2, #65	; 0x41
 80042b2:	2124      	movs	r1, #36	; 0x24
 80042b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2101      	movs	r1, #1
 80042c2:	438a      	bics	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4934      	ldr	r1, [pc, #208]	; (80043a0 <HAL_I2C_Init+0x120>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4931      	ldr	r1, [pc, #196]	; (80043a4 <HAL_I2C_Init+0x124>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d108      	bne.n	80042fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2180      	movs	r1, #128	; 0x80
 80042f6:	0209      	lsls	r1, r1, #8
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	e007      	b.n	800430e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2184      	movs	r1, #132	; 0x84
 8004308:	0209      	lsls	r1, r1, #8
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d104      	bne.n	8004320 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2280      	movs	r2, #128	; 0x80
 800431c:	0112      	lsls	r2, r2, #4
 800431e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	491f      	ldr	r1, [pc, #124]	; (80043a8 <HAL_I2C_Init+0x128>)
 800432c:	430a      	orrs	r2, r1
 800432e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	491a      	ldr	r1, [pc, #104]	; (80043a4 <HAL_I2C_Init+0x124>)
 800433c:	400a      	ands	r2, r1
 800433e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	431a      	orrs	r2, r3
 800434a:	0011      	movs	r1, r2
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	021a      	lsls	r2, r3, #8
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69d9      	ldr	r1, [r3, #28]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1a      	ldr	r2, [r3, #32]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2101      	movs	r1, #1
 8004376:	430a      	orrs	r2, r1
 8004378:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2241      	movs	r2, #65	; 0x41
 8004384:	2120      	movs	r1, #32
 8004386:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2242      	movs	r2, #66	; 0x42
 8004392:	2100      	movs	r1, #0
 8004394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	0018      	movs	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	b002      	add	sp, #8
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	f0ffffff 	.word	0xf0ffffff
 80043a4:	ffff7fff 	.word	0xffff7fff
 80043a8:	02008000 	.word	0x02008000

080043ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b089      	sub	sp, #36	; 0x24
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	000c      	movs	r4, r1
 80043b6:	0010      	movs	r0, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	230a      	movs	r3, #10
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	1c22      	adds	r2, r4, #0
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	2308      	movs	r3, #8
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	1c02      	adds	r2, r0, #0
 80043c8:	801a      	strh	r2, [r3, #0]
 80043ca:	1dbb      	adds	r3, r7, #6
 80043cc:	1c0a      	adds	r2, r1, #0
 80043ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2241      	movs	r2, #65	; 0x41
 80043d4:	5c9b      	ldrb	r3, [r3, r2]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d000      	beq.n	80043de <HAL_I2C_Mem_Write+0x32>
 80043dc:	e10c      	b.n	80045f8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_I2C_Mem_Write+0x42>
 80043e4:	232c      	movs	r3, #44	; 0x2c
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d105      	bne.n	80043fa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2280      	movs	r2, #128	; 0x80
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e0ff      	b.n	80045fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2240      	movs	r2, #64	; 0x40
 80043fe:	5c9b      	ldrb	r3, [r3, r2]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_I2C_Mem_Write+0x5c>
 8004404:	2302      	movs	r3, #2
 8004406:	e0f8      	b.n	80045fa <HAL_I2C_Mem_Write+0x24e>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2240      	movs	r2, #64	; 0x40
 800440c:	2101      	movs	r1, #1
 800440e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004410:	f7fe ffd4 	bl	80033bc <HAL_GetTick>
 8004414:	0003      	movs	r3, r0
 8004416:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	0219      	lsls	r1, r3, #8
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	2319      	movs	r3, #25
 8004424:	2201      	movs	r2, #1
 8004426:	f000 fc25 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 800442a:	1e03      	subs	r3, r0, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e0e3      	b.n	80045fa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2241      	movs	r2, #65	; 0x41
 8004436:	2121      	movs	r1, #33	; 0x21
 8004438:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2242      	movs	r2, #66	; 0x42
 800443e:	2140      	movs	r1, #64	; 0x40
 8004440:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	222c      	movs	r2, #44	; 0x2c
 8004452:	18ba      	adds	r2, r7, r2
 8004454:	8812      	ldrh	r2, [r2, #0]
 8004456:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800445e:	1dbb      	adds	r3, r7, #6
 8004460:	881c      	ldrh	r4, [r3, #0]
 8004462:	2308      	movs	r3, #8
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	881a      	ldrh	r2, [r3, #0]
 8004468:	230a      	movs	r3, #10
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	8819      	ldrh	r1, [r3, #0]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	0023      	movs	r3, r4
 800447a:	f000 fb13 	bl	8004aa4 <I2C_RequestMemoryWrite>
 800447e:	1e03      	subs	r3, r0, #0
 8004480:	d005      	beq.n	800448e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2240      	movs	r2, #64	; 0x40
 8004486:	2100      	movs	r1, #0
 8004488:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e0b5      	b.n	80045fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	2bff      	cmp	r3, #255	; 0xff
 8004496:	d911      	bls.n	80044bc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	22ff      	movs	r2, #255	; 0xff
 800449c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	045c      	lsls	r4, r3, #17
 80044a8:	230a      	movs	r3, #10
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	8819      	ldrh	r1, [r3, #0]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	2300      	movs	r3, #0
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	0023      	movs	r3, r4
 80044b6:	f000 fcfd 	bl	8004eb4 <I2C_TransferConfig>
 80044ba:	e012      	b.n	80044e2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	049c      	lsls	r4, r3, #18
 80044d0:	230a      	movs	r3, #10
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	8819      	ldrh	r1, [r3, #0]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	2300      	movs	r3, #0
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	0023      	movs	r3, r4
 80044de:	f000 fce9 	bl	8004eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	0018      	movs	r0, r3
 80044ea:	f000 fc02 	bl	8004cf2 <I2C_WaitOnTXISFlagUntilTimeout>
 80044ee:	1e03      	subs	r3, r0, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e081      	b.n	80045fa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	781a      	ldrb	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d03a      	beq.n	80045a6 <HAL_I2C_Mem_Write+0x1fa>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004534:	2b00      	cmp	r3, #0
 8004536:	d136      	bne.n	80045a6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	0013      	movs	r3, r2
 8004542:	2200      	movs	r2, #0
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	f000 fb95 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 800454a:	1e03      	subs	r3, r0, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e053      	b.n	80045fa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	2bff      	cmp	r3, #255	; 0xff
 800455a:	d911      	bls.n	8004580 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	22ff      	movs	r2, #255	; 0xff
 8004560:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	b2da      	uxtb	r2, r3
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	045c      	lsls	r4, r3, #17
 800456c:	230a      	movs	r3, #10
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	8819      	ldrh	r1, [r3, #0]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	2300      	movs	r3, #0
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	0023      	movs	r3, r4
 800457a:	f000 fc9b 	bl	8004eb4 <I2C_TransferConfig>
 800457e:	e012      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	b2da      	uxtb	r2, r3
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	049c      	lsls	r4, r3, #18
 8004594:	230a      	movs	r3, #10
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	8819      	ldrh	r1, [r3, #0]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	2300      	movs	r3, #0
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	0023      	movs	r3, r4
 80045a2:	f000 fc87 	bl	8004eb4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d198      	bne.n	80044e2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 fbda 	bl	8004d70 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045bc:	1e03      	subs	r3, r0, #0
 80045be:	d001      	beq.n	80045c4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e01a      	b.n	80045fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2220      	movs	r2, #32
 80045ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	490b      	ldr	r1, [pc, #44]	; (8004604 <HAL_I2C_Mem_Write+0x258>)
 80045d8:	400a      	ands	r2, r1
 80045da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2241      	movs	r2, #65	; 0x41
 80045e0:	2120      	movs	r1, #32
 80045e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2242      	movs	r2, #66	; 0x42
 80045e8:	2100      	movs	r1, #0
 80045ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2240      	movs	r2, #64	; 0x40
 80045f0:	2100      	movs	r1, #0
 80045f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e000      	b.n	80045fa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
  }
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b007      	add	sp, #28
 8004600:	bd90      	pop	{r4, r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	fe00e800 	.word	0xfe00e800

08004608 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	000c      	movs	r4, r1
 8004612:	0010      	movs	r0, r2
 8004614:	0019      	movs	r1, r3
 8004616:	230a      	movs	r3, #10
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	1c22      	adds	r2, r4, #0
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	2308      	movs	r3, #8
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	1c02      	adds	r2, r0, #0
 8004624:	801a      	strh	r2, [r3, #0]
 8004626:	1dbb      	adds	r3, r7, #6
 8004628:	1c0a      	adds	r2, r1, #0
 800462a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2241      	movs	r2, #65	; 0x41
 8004630:	5c9b      	ldrb	r3, [r3, r2]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b20      	cmp	r3, #32
 8004636:	d000      	beq.n	800463a <HAL_I2C_Mem_Read+0x32>
 8004638:	e110      	b.n	800485c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <HAL_I2C_Mem_Read+0x42>
 8004640:	232c      	movs	r3, #44	; 0x2c
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d105      	bne.n	8004656 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2280      	movs	r2, #128	; 0x80
 800464e:	0092      	lsls	r2, r2, #2
 8004650:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e103      	b.n	800485e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2240      	movs	r2, #64	; 0x40
 800465a:	5c9b      	ldrb	r3, [r3, r2]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_I2C_Mem_Read+0x5c>
 8004660:	2302      	movs	r3, #2
 8004662:	e0fc      	b.n	800485e <HAL_I2C_Mem_Read+0x256>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2240      	movs	r2, #64	; 0x40
 8004668:	2101      	movs	r1, #1
 800466a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800466c:	f7fe fea6 	bl	80033bc <HAL_GetTick>
 8004670:	0003      	movs	r3, r0
 8004672:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	0219      	lsls	r1, r3, #8
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	2319      	movs	r3, #25
 8004680:	2201      	movs	r2, #1
 8004682:	f000 faf7 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004686:	1e03      	subs	r3, r0, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0e7      	b.n	800485e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2241      	movs	r2, #65	; 0x41
 8004692:	2122      	movs	r1, #34	; 0x22
 8004694:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2242      	movs	r2, #66	; 0x42
 800469a:	2140      	movs	r1, #64	; 0x40
 800469c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	222c      	movs	r2, #44	; 0x2c
 80046ae:	18ba      	adds	r2, r7, r2
 80046b0:	8812      	ldrh	r2, [r2, #0]
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046ba:	1dbb      	adds	r3, r7, #6
 80046bc:	881c      	ldrh	r4, [r3, #0]
 80046be:	2308      	movs	r3, #8
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	881a      	ldrh	r2, [r3, #0]
 80046c4:	230a      	movs	r3, #10
 80046c6:	18fb      	adds	r3, r7, r3
 80046c8:	8819      	ldrh	r1, [r3, #0]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	0023      	movs	r3, r4
 80046d6:	f000 fa49 	bl	8004b6c <I2C_RequestMemoryRead>
 80046da:	1e03      	subs	r3, r0, #0
 80046dc:	d005      	beq.n	80046ea <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2240      	movs	r2, #64	; 0x40
 80046e2:	2100      	movs	r1, #0
 80046e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0b9      	b.n	800485e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2bff      	cmp	r3, #255	; 0xff
 80046f2:	d911      	bls.n	8004718 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	22ff      	movs	r2, #255	; 0xff
 80046f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	045c      	lsls	r4, r3, #17
 8004704:	230a      	movs	r3, #10
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	8819      	ldrh	r1, [r3, #0]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	4b56      	ldr	r3, [pc, #344]	; (8004868 <HAL_I2C_Mem_Read+0x260>)
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	0023      	movs	r3, r4
 8004712:	f000 fbcf 	bl	8004eb4 <I2C_TransferConfig>
 8004716:	e012      	b.n	800473e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	b2da      	uxtb	r2, r3
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	049c      	lsls	r4, r3, #18
 800472c:	230a      	movs	r3, #10
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	8819      	ldrh	r1, [r3, #0]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	4b4c      	ldr	r3, [pc, #304]	; (8004868 <HAL_I2C_Mem_Read+0x260>)
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	0023      	movs	r3, r4
 800473a:	f000 fbbb 	bl	8004eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800473e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	0013      	movs	r3, r2
 8004748:	2200      	movs	r2, #0
 800474a:	2104      	movs	r1, #4
 800474c:	f000 fa92 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004750:	1e03      	subs	r3, r0, #0
 8004752:	d001      	beq.n	8004758 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e082      	b.n	800485e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d03a      	beq.n	800480a <HAL_I2C_Mem_Read+0x202>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	2b00      	cmp	r3, #0
 800479a:	d136      	bne.n	800480a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800479c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	0013      	movs	r3, r2
 80047a6:	2200      	movs	r2, #0
 80047a8:	2180      	movs	r1, #128	; 0x80
 80047aa:	f000 fa63 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 80047ae:	1e03      	subs	r3, r0, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e053      	b.n	800485e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2bff      	cmp	r3, #255	; 0xff
 80047be:	d911      	bls.n	80047e4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	22ff      	movs	r2, #255	; 0xff
 80047c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	045c      	lsls	r4, r3, #17
 80047d0:	230a      	movs	r3, #10
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	8819      	ldrh	r1, [r3, #0]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	2300      	movs	r3, #0
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	0023      	movs	r3, r4
 80047de:	f000 fb69 	bl	8004eb4 <I2C_TransferConfig>
 80047e2:	e012      	b.n	800480a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	049c      	lsls	r4, r3, #18
 80047f8:	230a      	movs	r3, #10
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	8819      	ldrh	r1, [r3, #0]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	2300      	movs	r3, #0
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	0023      	movs	r3, r4
 8004806:	f000 fb55 	bl	8004eb4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d194      	bne.n	800473e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	0018      	movs	r0, r3
 800481c:	f000 faa8 	bl	8004d70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004820:	1e03      	subs	r3, r0, #0
 8004822:	d001      	beq.n	8004828 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e01a      	b.n	800485e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2220      	movs	r2, #32
 800482e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	490c      	ldr	r1, [pc, #48]	; (800486c <HAL_I2C_Mem_Read+0x264>)
 800483c:	400a      	ands	r2, r1
 800483e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2241      	movs	r2, #65	; 0x41
 8004844:	2120      	movs	r1, #32
 8004846:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2242      	movs	r2, #66	; 0x42
 800484c:	2100      	movs	r1, #0
 800484e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2240      	movs	r2, #64	; 0x40
 8004854:	2100      	movs	r1, #0
 8004856:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	e000      	b.n	800485e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
  }
}
 800485e:	0018      	movs	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	b007      	add	sp, #28
 8004864:	bd90      	pop	{r4, r7, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	80002400 	.word	0x80002400
 800486c:	fe00e800 	.word	0xfe00e800

08004870 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	; 0x28
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	230a      	movs	r3, #10
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	1c0a      	adds	r2, r1, #0
 8004882:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2241      	movs	r2, #65	; 0x41
 800488c:	5c9b      	ldrb	r3, [r3, r2]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b20      	cmp	r3, #32
 8004892:	d000      	beq.n	8004896 <HAL_I2C_IsDeviceReady+0x26>
 8004894:	e0fe      	b.n	8004a94 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699a      	ldr	r2, [r3, #24]
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	401a      	ands	r2, r3
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d101      	bne.n	80048ae <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0f3      	b.n	8004a96 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2240      	movs	r2, #64	; 0x40
 80048b2:	5c9b      	ldrb	r3, [r3, r2]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_I2C_IsDeviceReady+0x4c>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e0ec      	b.n	8004a96 <HAL_I2C_IsDeviceReady+0x226>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2240      	movs	r2, #64	; 0x40
 80048c0:	2101      	movs	r1, #1
 80048c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2241      	movs	r2, #65	; 0x41
 80048c8:	2124      	movs	r1, #36	; 0x24
 80048ca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d107      	bne.n	80048ea <HAL_I2C_IsDeviceReady+0x7a>
 80048da:	230a      	movs	r3, #10
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	059b      	lsls	r3, r3, #22
 80048e2:	0d9b      	lsrs	r3, r3, #22
 80048e4:	4a6e      	ldr	r2, [pc, #440]	; (8004aa0 <HAL_I2C_IsDeviceReady+0x230>)
 80048e6:	431a      	orrs	r2, r3
 80048e8:	e007      	b.n	80048fa <HAL_I2C_IsDeviceReady+0x8a>
 80048ea:	230a      	movs	r3, #10
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	059b      	lsls	r3, r3, #22
 80048f2:	0d9b      	lsrs	r3, r3, #22
 80048f4:	22a0      	movs	r2, #160	; 0xa0
 80048f6:	0192      	lsls	r2, r2, #6
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004900:	f7fe fd5c 	bl	80033bc <HAL_GetTick>
 8004904:	0003      	movs	r3, r0
 8004906:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2220      	movs	r2, #32
 8004910:	4013      	ands	r3, r2
 8004912:	3b20      	subs	r3, #32
 8004914:	425a      	negs	r2, r3
 8004916:	4153      	adcs	r3, r2
 8004918:	b2da      	uxtb	r2, r3
 800491a:	231f      	movs	r3, #31
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2210      	movs	r2, #16
 8004928:	4013      	ands	r3, r2
 800492a:	3b10      	subs	r3, #16
 800492c:	425a      	negs	r2, r3
 800492e:	4153      	adcs	r3, r2
 8004930:	b2da      	uxtb	r2, r3
 8004932:	231e      	movs	r3, #30
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004938:	e035      	b.n	80049a6 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	d01a      	beq.n	8004976 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004940:	f7fe fd3c 	bl	80033bc <HAL_GetTick>
 8004944:	0002      	movs	r2, r0
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d302      	bcc.n	8004956 <HAL_I2C_IsDeviceReady+0xe6>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10f      	bne.n	8004976 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2241      	movs	r2, #65	; 0x41
 800495a:	2120      	movs	r1, #32
 800495c:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	2220      	movs	r2, #32
 8004964:	431a      	orrs	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2240      	movs	r2, #64	; 0x40
 800496e:	2100      	movs	r1, #0
 8004970:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e08f      	b.n	8004a96 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2220      	movs	r2, #32
 800497e:	4013      	ands	r3, r2
 8004980:	3b20      	subs	r3, #32
 8004982:	425a      	negs	r2, r3
 8004984:	4153      	adcs	r3, r2
 8004986:	b2da      	uxtb	r2, r3
 8004988:	231f      	movs	r3, #31
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2210      	movs	r2, #16
 8004996:	4013      	ands	r3, r2
 8004998:	3b10      	subs	r3, #16
 800499a:	425a      	negs	r2, r3
 800499c:	4153      	adcs	r3, r2
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	231e      	movs	r3, #30
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80049a6:	231f      	movs	r3, #31
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d104      	bne.n	80049ba <HAL_I2C_IsDeviceReady+0x14a>
 80049b0:	231e      	movs	r3, #30
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0bf      	beq.n	800493a <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2210      	movs	r2, #16
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d01a      	beq.n	80049fe <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	0013      	movs	r3, r2
 80049d2:	2200      	movs	r2, #0
 80049d4:	2120      	movs	r1, #32
 80049d6:	f000 f94d 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 80049da:	1e03      	subs	r3, r0, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e059      	b.n	8004a96 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2220      	movs	r2, #32
 80049e8:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2241      	movs	r2, #65	; 0x41
 80049ee:	2120      	movs	r1, #32
 80049f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2240      	movs	r2, #64	; 0x40
 80049f6:	2100      	movs	r1, #0
 80049f8:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e04b      	b.n	8004a96 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	0013      	movs	r3, r2
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2120      	movs	r1, #32
 8004a0c:	f000 f932 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004a10:	1e03      	subs	r3, r0, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e03e      	b.n	8004a96 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2220      	movs	r2, #32
 8004a26:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d119      	bne.n	8004a64 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2180      	movs	r1, #128	; 0x80
 8004a3c:	01c9      	lsls	r1, r1, #7
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	0013      	movs	r3, r2
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2120      	movs	r1, #32
 8004a50:	f000 f910 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004a54:	1e03      	subs	r3, r0, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e01c      	b.n	8004a96 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2220      	movs	r2, #32
 8004a62:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	3301      	adds	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d900      	bls.n	8004a74 <HAL_I2C_IsDeviceReady+0x204>
 8004a72:	e72e      	b.n	80048d2 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2241      	movs	r2, #65	; 0x41
 8004a78:	2120      	movs	r1, #32
 8004a7a:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a80:	2220      	movs	r2, #32
 8004a82:	431a      	orrs	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2240      	movs	r2, #64	; 0x40
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
  }
}
 8004a96:	0018      	movs	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b008      	add	sp, #32
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	02002000 	.word	0x02002000

08004aa4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b5b0      	push	{r4, r5, r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	000c      	movs	r4, r1
 8004aae:	0010      	movs	r0, r2
 8004ab0:	0019      	movs	r1, r3
 8004ab2:	250a      	movs	r5, #10
 8004ab4:	197b      	adds	r3, r7, r5
 8004ab6:	1c22      	adds	r2, r4, #0
 8004ab8:	801a      	strh	r2, [r3, #0]
 8004aba:	2308      	movs	r3, #8
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	1c02      	adds	r2, r0, #0
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	1dbb      	adds	r3, r7, #6
 8004ac4:	1c0a      	adds	r2, r1, #0
 8004ac6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ac8:	1dbb      	adds	r3, r7, #6
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	2380      	movs	r3, #128	; 0x80
 8004ad0:	045c      	lsls	r4, r3, #17
 8004ad2:	197b      	adds	r3, r7, r5
 8004ad4:	8819      	ldrh	r1, [r3, #0]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <I2C_RequestMemoryWrite+0xc4>)
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	0023      	movs	r3, r4
 8004ade:	f000 f9e9 	bl	8004eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae4:	6a39      	ldr	r1, [r7, #32]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f000 f902 	bl	8004cf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004aee:	1e03      	subs	r3, r0, #0
 8004af0:	d001      	beq.n	8004af6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e033      	b.n	8004b5e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004af6:	1dbb      	adds	r3, r7, #6
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d107      	bne.n	8004b0e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004afe:	2308      	movs	r3, #8
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b0c:	e019      	b.n	8004b42 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b0e:	2308      	movs	r3, #8
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b22:	6a39      	ldr	r1, [r7, #32]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 f8e3 	bl	8004cf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b2c:	1e03      	subs	r3, r0, #0
 8004b2e:	d001      	beq.n	8004b34 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e014      	b.n	8004b5e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b34:	2308      	movs	r3, #8
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b42:	6a3a      	ldr	r2, [r7, #32]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	0013      	movs	r3, r2
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2180      	movs	r1, #128	; 0x80
 8004b50:	f000 f890 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004b54:	1e03      	subs	r3, r0, #0
 8004b56:	d001      	beq.n	8004b5c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	0018      	movs	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b004      	add	sp, #16
 8004b64:	bdb0      	pop	{r4, r5, r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	80002000 	.word	0x80002000

08004b6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b6c:	b5b0      	push	{r4, r5, r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	000c      	movs	r4, r1
 8004b76:	0010      	movs	r0, r2
 8004b78:	0019      	movs	r1, r3
 8004b7a:	250a      	movs	r5, #10
 8004b7c:	197b      	adds	r3, r7, r5
 8004b7e:	1c22      	adds	r2, r4, #0
 8004b80:	801a      	strh	r2, [r3, #0]
 8004b82:	2308      	movs	r3, #8
 8004b84:	18fb      	adds	r3, r7, r3
 8004b86:	1c02      	adds	r2, r0, #0
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	1dbb      	adds	r3, r7, #6
 8004b8c:	1c0a      	adds	r2, r1, #0
 8004b8e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b90:	1dbb      	adds	r3, r7, #6
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	197b      	adds	r3, r7, r5
 8004b98:	8819      	ldrh	r1, [r3, #0]
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	4b23      	ldr	r3, [pc, #140]	; (8004c2c <I2C_RequestMemoryRead+0xc0>)
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f000 f987 	bl	8004eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba8:	6a39      	ldr	r1, [r7, #32]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 f8a0 	bl	8004cf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bb2:	1e03      	subs	r3, r0, #0
 8004bb4:	d001      	beq.n	8004bba <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e033      	b.n	8004c22 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bba:	1dbb      	adds	r3, r7, #6
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d107      	bne.n	8004bd2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
 8004bd0:	e019      	b.n	8004c06 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	0a1b      	lsrs	r3, r3, #8
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be6:	6a39      	ldr	r1, [r7, #32]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 f881 	bl	8004cf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bf0:	1e03      	subs	r3, r0, #0
 8004bf2:	d001      	beq.n	8004bf8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e014      	b.n	8004c22 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bf8:	2308      	movs	r3, #8
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c06:	6a3a      	ldr	r2, [r7, #32]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	0013      	movs	r3, r2
 8004c10:	2200      	movs	r2, #0
 8004c12:	2140      	movs	r1, #64	; 0x40
 8004c14:	f000 f82e 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004c18:	1e03      	subs	r3, r0, #0
 8004c1a:	d001      	beq.n	8004c20 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	0018      	movs	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b004      	add	sp, #16
 8004c28:	bdb0      	pop	{r4, r5, r7, pc}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	80002000 	.word	0x80002000

08004c30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d103      	bne.n	8004c4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2201      	movs	r2, #1
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d007      	beq.n	8004c6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2101      	movs	r1, #1
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	619a      	str	r2, [r3, #24]
  }
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b002      	add	sp, #8
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	1dfb      	adds	r3, r7, #7
 8004c82:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c84:	e021      	b.n	8004cca <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	d01e      	beq.n	8004cca <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8c:	f7fe fb96 	bl	80033bc <HAL_GetTick>
 8004c90:	0002      	movs	r2, r0
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d302      	bcc.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d113      	bne.n	8004cca <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2241      	movs	r2, #65	; 0x41
 8004cb2:	2120      	movs	r1, #32
 8004cb4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2242      	movs	r2, #66	; 0x42
 8004cba:	2100      	movs	r1, #0
 8004cbc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2240      	movs	r2, #64	; 0x40
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e00f      	b.n	8004cea <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	425a      	negs	r2, r3
 8004cda:	4153      	adcs	r3, r2
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	001a      	movs	r2, r3
 8004ce0:	1dfb      	adds	r3, r7, #7
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d0ce      	beq.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	0018      	movs	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b004      	add	sp, #16
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cfe:	e02b      	b.n	8004d58 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	0018      	movs	r0, r3
 8004d08:	f000 f86e 	bl	8004de8 <I2C_IsAcknowledgeFailed>
 8004d0c:	1e03      	subs	r3, r0, #0
 8004d0e:	d001      	beq.n	8004d14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e029      	b.n	8004d68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	3301      	adds	r3, #1
 8004d18:	d01e      	beq.n	8004d58 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1a:	f7fe fb4f 	bl	80033bc <HAL_GetTick>
 8004d1e:	0002      	movs	r2, r0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d113      	bne.n	8004d58 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	2220      	movs	r2, #32
 8004d36:	431a      	orrs	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2241      	movs	r2, #65	; 0x41
 8004d40:	2120      	movs	r1, #32
 8004d42:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2242      	movs	r2, #66	; 0x42
 8004d48:	2100      	movs	r1, #0
 8004d4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2240      	movs	r2, #64	; 0x40
 8004d50:	2100      	movs	r1, #0
 8004d52:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e007      	b.n	8004d68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d1cc      	bne.n	8004d00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b004      	add	sp, #16
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d7c:	e028      	b.n	8004dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f000 f82f 	bl	8004de8 <I2C_IsAcknowledgeFailed>
 8004d8a:	1e03      	subs	r3, r0, #0
 8004d8c:	d001      	beq.n	8004d92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e026      	b.n	8004de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d92:	f7fe fb13 	bl	80033bc <HAL_GetTick>
 8004d96:	0002      	movs	r2, r0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d302      	bcc.n	8004da8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d113      	bne.n	8004dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dac:	2220      	movs	r2, #32
 8004dae:	431a      	orrs	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2241      	movs	r2, #65	; 0x41
 8004db8:	2120      	movs	r1, #32
 8004dba:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2242      	movs	r2, #66	; 0x42
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2240      	movs	r2, #64	; 0x40
 8004dc8:	2100      	movs	r1, #0
 8004dca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e007      	b.n	8004de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d1cf      	bne.n	8004d7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	0018      	movs	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b004      	add	sp, #16
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d151      	bne.n	8004ea6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e02:	e021      	b.n	8004e48 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3301      	adds	r3, #1
 8004e08:	d01e      	beq.n	8004e48 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0a:	f7fe fad7 	bl	80033bc <HAL_GetTick>
 8004e0e:	0002      	movs	r2, r0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d302      	bcc.n	8004e20 <I2C_IsAcknowledgeFailed+0x38>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d113      	bne.n	8004e48 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	2220      	movs	r2, #32
 8004e26:	431a      	orrs	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2241      	movs	r2, #65	; 0x41
 8004e30:	2120      	movs	r1, #32
 8004e32:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2242      	movs	r2, #66	; 0x42
 8004e38:	2100      	movs	r1, #0
 8004e3a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2240      	movs	r2, #64	; 0x40
 8004e40:	2100      	movs	r1, #0
 8004e42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e02f      	b.n	8004ea8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d1d6      	bne.n	8004e04 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2220      	movs	r2, #32
 8004e64:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f7ff fee1 	bl	8004c30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	490d      	ldr	r1, [pc, #52]	; (8004eb0 <I2C_IsAcknowledgeFailed+0xc8>)
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	2204      	movs	r2, #4
 8004e84:	431a      	orrs	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2241      	movs	r2, #65	; 0x41
 8004e8e:	2120      	movs	r1, #32
 8004e90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2242      	movs	r2, #66	; 0x42
 8004e96:	2100      	movs	r1, #0
 8004e98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2240      	movs	r2, #64	; 0x40
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b004      	add	sp, #16
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	fe00e800 	.word	0xfe00e800

08004eb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	0008      	movs	r0, r1
 8004ebe:	0011      	movs	r1, r2
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	240a      	movs	r4, #10
 8004ec4:	193b      	adds	r3, r7, r4
 8004ec6:	1c02      	adds	r2, r0, #0
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	2009      	movs	r0, #9
 8004ecc:	183b      	adds	r3, r7, r0
 8004ece:	1c0a      	adds	r2, r1, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	6a3a      	ldr	r2, [r7, #32]
 8004eda:	0d51      	lsrs	r1, r2, #21
 8004edc:	2280      	movs	r2, #128	; 0x80
 8004ede:	00d2      	lsls	r2, r2, #3
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	490e      	ldr	r1, [pc, #56]	; (8004f1c <I2C_TransferConfig+0x68>)
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	43d2      	mvns	r2, r2
 8004ee8:	401a      	ands	r2, r3
 8004eea:	0011      	movs	r1, r2
 8004eec:	193b      	adds	r3, r7, r4
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	059b      	lsls	r3, r3, #22
 8004ef2:	0d9a      	lsrs	r2, r3, #22
 8004ef4:	183b      	adds	r3, r7, r0
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	0418      	lsls	r0, r3, #16
 8004efa:	23ff      	movs	r3, #255	; 0xff
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	4003      	ands	r3, r0
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b005      	add	sp, #20
 8004f18:	bd90      	pop	{r4, r7, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	03ff63ff 	.word	0x03ff63ff

08004f20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2241      	movs	r2, #65	; 0x41
 8004f2e:	5c9b      	ldrb	r3, [r3, r2]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d138      	bne.n	8004fa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2240      	movs	r2, #64	; 0x40
 8004f3a:	5c9b      	ldrb	r3, [r3, r2]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e032      	b.n	8004faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2240      	movs	r2, #64	; 0x40
 8004f48:	2101      	movs	r1, #1
 8004f4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2241      	movs	r2, #65	; 0x41
 8004f50:	2124      	movs	r1, #36	; 0x24
 8004f52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2101      	movs	r1, #1
 8004f60:	438a      	bics	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4911      	ldr	r1, [pc, #68]	; (8004fb4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f70:	400a      	ands	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2101      	movs	r1, #1
 8004f90:	430a      	orrs	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2241      	movs	r2, #65	; 0x41
 8004f98:	2120      	movs	r1, #32
 8004f9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2240      	movs	r2, #64	; 0x40
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b002      	add	sp, #8
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	ffffefff 	.word	0xffffefff

08004fb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2241      	movs	r2, #65	; 0x41
 8004fc6:	5c9b      	ldrb	r3, [r3, r2]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d139      	bne.n	8005042 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2240      	movs	r2, #64	; 0x40
 8004fd2:	5c9b      	ldrb	r3, [r3, r2]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e033      	b.n	8005044 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2240      	movs	r2, #64	; 0x40
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2241      	movs	r2, #65	; 0x41
 8004fe8:	2124      	movs	r1, #36	; 0x24
 8004fea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	438a      	bics	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a11      	ldr	r2, [pc, #68]	; (800504c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005008:	4013      	ands	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2101      	movs	r1, #1
 800502a:	430a      	orrs	r2, r1
 800502c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2241      	movs	r2, #65	; 0x41
 8005032:	2120      	movs	r1, #32
 8005034:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2240      	movs	r2, #64	; 0x40
 800503a:	2100      	movs	r1, #0
 800503c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	e000      	b.n	8005044 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005042:	2302      	movs	r3, #2
  }
}
 8005044:	0018      	movs	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	b004      	add	sp, #16
 800504a:	bd80      	pop	{r7, pc}
 800504c:	fffff0ff 	.word	0xfffff0ff

08005050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e303      	b.n	800566a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2201      	movs	r2, #1
 8005068:	4013      	ands	r3, r2
 800506a:	d100      	bne.n	800506e <HAL_RCC_OscConfig+0x1e>
 800506c:	e08d      	b.n	800518a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800506e:	4bc4      	ldr	r3, [pc, #784]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	220c      	movs	r2, #12
 8005074:	4013      	ands	r3, r2
 8005076:	2b04      	cmp	r3, #4
 8005078:	d00e      	beq.n	8005098 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800507a:	4bc1      	ldr	r3, [pc, #772]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	220c      	movs	r2, #12
 8005080:	4013      	ands	r3, r2
 8005082:	2b08      	cmp	r3, #8
 8005084:	d116      	bne.n	80050b4 <HAL_RCC_OscConfig+0x64>
 8005086:	4bbe      	ldr	r3, [pc, #760]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	025b      	lsls	r3, r3, #9
 800508e:	401a      	ands	r2, r3
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	025b      	lsls	r3, r3, #9
 8005094:	429a      	cmp	r2, r3
 8005096:	d10d      	bne.n	80050b4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005098:	4bb9      	ldr	r3, [pc, #740]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	029b      	lsls	r3, r3, #10
 80050a0:	4013      	ands	r3, r2
 80050a2:	d100      	bne.n	80050a6 <HAL_RCC_OscConfig+0x56>
 80050a4:	e070      	b.n	8005188 <HAL_RCC_OscConfig+0x138>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d000      	beq.n	80050b0 <HAL_RCC_OscConfig+0x60>
 80050ae:	e06b      	b.n	8005188 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e2da      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d107      	bne.n	80050cc <HAL_RCC_OscConfig+0x7c>
 80050bc:	4bb0      	ldr	r3, [pc, #704]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4baf      	ldr	r3, [pc, #700]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80050c2:	2180      	movs	r1, #128	; 0x80
 80050c4:	0249      	lsls	r1, r1, #9
 80050c6:	430a      	orrs	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e02f      	b.n	800512c <HAL_RCC_OscConfig+0xdc>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10c      	bne.n	80050ee <HAL_RCC_OscConfig+0x9e>
 80050d4:	4baa      	ldr	r3, [pc, #680]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4ba9      	ldr	r3, [pc, #676]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80050da:	49aa      	ldr	r1, [pc, #680]	; (8005384 <HAL_RCC_OscConfig+0x334>)
 80050dc:	400a      	ands	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	4ba7      	ldr	r3, [pc, #668]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4ba6      	ldr	r3, [pc, #664]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80050e6:	49a8      	ldr	r1, [pc, #672]	; (8005388 <HAL_RCC_OscConfig+0x338>)
 80050e8:	400a      	ands	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e01e      	b.n	800512c <HAL_RCC_OscConfig+0xdc>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	d10e      	bne.n	8005114 <HAL_RCC_OscConfig+0xc4>
 80050f6:	4ba2      	ldr	r3, [pc, #648]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4ba1      	ldr	r3, [pc, #644]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80050fc:	2180      	movs	r1, #128	; 0x80
 80050fe:	02c9      	lsls	r1, r1, #11
 8005100:	430a      	orrs	r2, r1
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	4b9e      	ldr	r3, [pc, #632]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4b9d      	ldr	r3, [pc, #628]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 800510a:	2180      	movs	r1, #128	; 0x80
 800510c:	0249      	lsls	r1, r1, #9
 800510e:	430a      	orrs	r2, r1
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	e00b      	b.n	800512c <HAL_RCC_OscConfig+0xdc>
 8005114:	4b9a      	ldr	r3, [pc, #616]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4b99      	ldr	r3, [pc, #612]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 800511a:	499a      	ldr	r1, [pc, #616]	; (8005384 <HAL_RCC_OscConfig+0x334>)
 800511c:	400a      	ands	r2, r1
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	4b97      	ldr	r3, [pc, #604]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4b96      	ldr	r3, [pc, #600]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005126:	4998      	ldr	r1, [pc, #608]	; (8005388 <HAL_RCC_OscConfig+0x338>)
 8005128:	400a      	ands	r2, r1
 800512a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d014      	beq.n	800515e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fe f942 	bl	80033bc <HAL_GetTick>
 8005138:	0003      	movs	r3, r0
 800513a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800513e:	f7fe f93d 	bl	80033bc <HAL_GetTick>
 8005142:	0002      	movs	r2, r0
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b64      	cmp	r3, #100	; 0x64
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e28c      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005150:	4b8b      	ldr	r3, [pc, #556]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	029b      	lsls	r3, r3, #10
 8005158:	4013      	ands	r3, r2
 800515a:	d0f0      	beq.n	800513e <HAL_RCC_OscConfig+0xee>
 800515c:	e015      	b.n	800518a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515e:	f7fe f92d 	bl	80033bc <HAL_GetTick>
 8005162:	0003      	movs	r3, r0
 8005164:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005168:	f7fe f928 	bl	80033bc <HAL_GetTick>
 800516c:	0002      	movs	r2, r0
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b64      	cmp	r3, #100	; 0x64
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e277      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517a:	4b81      	ldr	r3, [pc, #516]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	2380      	movs	r3, #128	; 0x80
 8005180:	029b      	lsls	r3, r3, #10
 8005182:	4013      	ands	r3, r2
 8005184:	d1f0      	bne.n	8005168 <HAL_RCC_OscConfig+0x118>
 8005186:	e000      	b.n	800518a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005188:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2202      	movs	r2, #2
 8005190:	4013      	ands	r3, r2
 8005192:	d100      	bne.n	8005196 <HAL_RCC_OscConfig+0x146>
 8005194:	e069      	b.n	800526a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005196:	4b7a      	ldr	r3, [pc, #488]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	220c      	movs	r2, #12
 800519c:	4013      	ands	r3, r2
 800519e:	d00b      	beq.n	80051b8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80051a0:	4b77      	ldr	r3, [pc, #476]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	220c      	movs	r2, #12
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d11c      	bne.n	80051e6 <HAL_RCC_OscConfig+0x196>
 80051ac:	4b74      	ldr	r3, [pc, #464]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	025b      	lsls	r3, r3, #9
 80051b4:	4013      	ands	r3, r2
 80051b6:	d116      	bne.n	80051e6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b8:	4b71      	ldr	r3, [pc, #452]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2202      	movs	r2, #2
 80051be:	4013      	ands	r3, r2
 80051c0:	d005      	beq.n	80051ce <HAL_RCC_OscConfig+0x17e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d001      	beq.n	80051ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e24d      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ce:	4b6c      	ldr	r3, [pc, #432]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	22f8      	movs	r2, #248	; 0xf8
 80051d4:	4393      	bics	r3, r2
 80051d6:	0019      	movs	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	00da      	lsls	r2, r3, #3
 80051de:	4b68      	ldr	r3, [pc, #416]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80051e0:	430a      	orrs	r2, r1
 80051e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e4:	e041      	b.n	800526a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d024      	beq.n	8005238 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ee:	4b64      	ldr	r3, [pc, #400]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b63      	ldr	r3, [pc, #396]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80051f4:	2101      	movs	r1, #1
 80051f6:	430a      	orrs	r2, r1
 80051f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fa:	f7fe f8df 	bl	80033bc <HAL_GetTick>
 80051fe:	0003      	movs	r3, r0
 8005200:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005204:	f7fe f8da 	bl	80033bc <HAL_GetTick>
 8005208:	0002      	movs	r2, r0
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e229      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005216:	4b5a      	ldr	r3, [pc, #360]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2202      	movs	r2, #2
 800521c:	4013      	ands	r3, r2
 800521e:	d0f1      	beq.n	8005204 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005220:	4b57      	ldr	r3, [pc, #348]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	22f8      	movs	r2, #248	; 0xf8
 8005226:	4393      	bics	r3, r2
 8005228:	0019      	movs	r1, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	00da      	lsls	r2, r3, #3
 8005230:	4b53      	ldr	r3, [pc, #332]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005232:	430a      	orrs	r2, r1
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e018      	b.n	800526a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005238:	4b51      	ldr	r3, [pc, #324]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4b50      	ldr	r3, [pc, #320]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 800523e:	2101      	movs	r1, #1
 8005240:	438a      	bics	r2, r1
 8005242:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005244:	f7fe f8ba 	bl	80033bc <HAL_GetTick>
 8005248:	0003      	movs	r3, r0
 800524a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800524e:	f7fe f8b5 	bl	80033bc <HAL_GetTick>
 8005252:	0002      	movs	r2, r0
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e204      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005260:	4b47      	ldr	r3, [pc, #284]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2202      	movs	r2, #2
 8005266:	4013      	ands	r3, r2
 8005268:	d1f1      	bne.n	800524e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2208      	movs	r2, #8
 8005270:	4013      	ands	r3, r2
 8005272:	d036      	beq.n	80052e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d019      	beq.n	80052b0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800527c:	4b40      	ldr	r3, [pc, #256]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 800527e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005280:	4b3f      	ldr	r3, [pc, #252]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005282:	2101      	movs	r1, #1
 8005284:	430a      	orrs	r2, r1
 8005286:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005288:	f7fe f898 	bl	80033bc <HAL_GetTick>
 800528c:	0003      	movs	r3, r0
 800528e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005292:	f7fe f893 	bl	80033bc <HAL_GetTick>
 8005296:	0002      	movs	r2, r0
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e1e2      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a4:	4b36      	ldr	r3, [pc, #216]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	2202      	movs	r2, #2
 80052aa:	4013      	ands	r3, r2
 80052ac:	d0f1      	beq.n	8005292 <HAL_RCC_OscConfig+0x242>
 80052ae:	e018      	b.n	80052e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052b0:	4b33      	ldr	r3, [pc, #204]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80052b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052b4:	4b32      	ldr	r3, [pc, #200]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80052b6:	2101      	movs	r1, #1
 80052b8:	438a      	bics	r2, r1
 80052ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052bc:	f7fe f87e 	bl	80033bc <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c6:	f7fe f879 	bl	80033bc <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e1c8      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d8:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2202      	movs	r2, #2
 80052de:	4013      	ands	r3, r2
 80052e0:	d1f1      	bne.n	80052c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2204      	movs	r2, #4
 80052e8:	4013      	ands	r3, r2
 80052ea:	d100      	bne.n	80052ee <HAL_RCC_OscConfig+0x29e>
 80052ec:	e0b6      	b.n	800545c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ee:	231f      	movs	r3, #31
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f6:	4b22      	ldr	r3, [pc, #136]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	055b      	lsls	r3, r3, #21
 80052fe:	4013      	ands	r3, r2
 8005300:	d111      	bne.n	8005326 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005302:	4b1f      	ldr	r3, [pc, #124]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005304:	69da      	ldr	r2, [r3, #28]
 8005306:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005308:	2180      	movs	r1, #128	; 0x80
 800530a:	0549      	lsls	r1, r1, #21
 800530c:	430a      	orrs	r2, r1
 800530e:	61da      	str	r2, [r3, #28]
 8005310:	4b1b      	ldr	r3, [pc, #108]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	055b      	lsls	r3, r3, #21
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800531e:	231f      	movs	r3, #31
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	2201      	movs	r2, #1
 8005324:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005326:	4b19      	ldr	r3, [pc, #100]	; (800538c <HAL_RCC_OscConfig+0x33c>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4013      	ands	r3, r2
 8005330:	d11a      	bne.n	8005368 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005332:	4b16      	ldr	r3, [pc, #88]	; (800538c <HAL_RCC_OscConfig+0x33c>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b15      	ldr	r3, [pc, #84]	; (800538c <HAL_RCC_OscConfig+0x33c>)
 8005338:	2180      	movs	r1, #128	; 0x80
 800533a:	0049      	lsls	r1, r1, #1
 800533c:	430a      	orrs	r2, r1
 800533e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005340:	f7fe f83c 	bl	80033bc <HAL_GetTick>
 8005344:	0003      	movs	r3, r0
 8005346:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534a:	f7fe f837 	bl	80033bc <HAL_GetTick>
 800534e:	0002      	movs	r2, r0
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b64      	cmp	r3, #100	; 0x64
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e186      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535c:	4b0b      	ldr	r3, [pc, #44]	; (800538c <HAL_RCC_OscConfig+0x33c>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	4013      	ands	r3, r2
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d10f      	bne.n	8005390 <HAL_RCC_OscConfig+0x340>
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	4b02      	ldr	r3, [pc, #8]	; (8005380 <HAL_RCC_OscConfig+0x330>)
 8005376:	2101      	movs	r1, #1
 8005378:	430a      	orrs	r2, r1
 800537a:	621a      	str	r2, [r3, #32]
 800537c:	e036      	b.n	80053ec <HAL_RCC_OscConfig+0x39c>
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	40021000 	.word	0x40021000
 8005384:	fffeffff 	.word	0xfffeffff
 8005388:	fffbffff 	.word	0xfffbffff
 800538c:	40007000 	.word	0x40007000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10c      	bne.n	80053b2 <HAL_RCC_OscConfig+0x362>
 8005398:	4bb6      	ldr	r3, [pc, #728]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 800539a:	6a1a      	ldr	r2, [r3, #32]
 800539c:	4bb5      	ldr	r3, [pc, #724]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 800539e:	2101      	movs	r1, #1
 80053a0:	438a      	bics	r2, r1
 80053a2:	621a      	str	r2, [r3, #32]
 80053a4:	4bb3      	ldr	r3, [pc, #716]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80053a6:	6a1a      	ldr	r2, [r3, #32]
 80053a8:	4bb2      	ldr	r3, [pc, #712]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80053aa:	2104      	movs	r1, #4
 80053ac:	438a      	bics	r2, r1
 80053ae:	621a      	str	r2, [r3, #32]
 80053b0:	e01c      	b.n	80053ec <HAL_RCC_OscConfig+0x39c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b05      	cmp	r3, #5
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x384>
 80053ba:	4bae      	ldr	r3, [pc, #696]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	4bad      	ldr	r3, [pc, #692]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80053c0:	2104      	movs	r1, #4
 80053c2:	430a      	orrs	r2, r1
 80053c4:	621a      	str	r2, [r3, #32]
 80053c6:	4bab      	ldr	r3, [pc, #684]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80053c8:	6a1a      	ldr	r2, [r3, #32]
 80053ca:	4baa      	ldr	r3, [pc, #680]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80053cc:	2101      	movs	r1, #1
 80053ce:	430a      	orrs	r2, r1
 80053d0:	621a      	str	r2, [r3, #32]
 80053d2:	e00b      	b.n	80053ec <HAL_RCC_OscConfig+0x39c>
 80053d4:	4ba7      	ldr	r3, [pc, #668]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80053d6:	6a1a      	ldr	r2, [r3, #32]
 80053d8:	4ba6      	ldr	r3, [pc, #664]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80053da:	2101      	movs	r1, #1
 80053dc:	438a      	bics	r2, r1
 80053de:	621a      	str	r2, [r3, #32]
 80053e0:	4ba4      	ldr	r3, [pc, #656]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	4ba3      	ldr	r3, [pc, #652]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80053e6:	2104      	movs	r1, #4
 80053e8:	438a      	bics	r2, r1
 80053ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d014      	beq.n	800541e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f4:	f7fd ffe2 	bl	80033bc <HAL_GetTick>
 80053f8:	0003      	movs	r3, r0
 80053fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fc:	e009      	b.n	8005412 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fd ffdd 	bl	80033bc <HAL_GetTick>
 8005402:	0002      	movs	r2, r0
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	4a9b      	ldr	r2, [pc, #620]	; (8005678 <HAL_RCC_OscConfig+0x628>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e12b      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005412:	4b98      	ldr	r3, [pc, #608]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	2202      	movs	r2, #2
 8005418:	4013      	ands	r3, r2
 800541a:	d0f0      	beq.n	80053fe <HAL_RCC_OscConfig+0x3ae>
 800541c:	e013      	b.n	8005446 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800541e:	f7fd ffcd 	bl	80033bc <HAL_GetTick>
 8005422:	0003      	movs	r3, r0
 8005424:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005426:	e009      	b.n	800543c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fd ffc8 	bl	80033bc <HAL_GetTick>
 800542c:	0002      	movs	r2, r0
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	4a91      	ldr	r2, [pc, #580]	; (8005678 <HAL_RCC_OscConfig+0x628>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e116      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543c:	4b8d      	ldr	r3, [pc, #564]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	2202      	movs	r2, #2
 8005442:	4013      	ands	r3, r2
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005446:	231f      	movs	r3, #31
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005450:	4b88      	ldr	r3, [pc, #544]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	4b87      	ldr	r3, [pc, #540]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005456:	4989      	ldr	r1, [pc, #548]	; (800567c <HAL_RCC_OscConfig+0x62c>)
 8005458:	400a      	ands	r2, r1
 800545a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2210      	movs	r2, #16
 8005462:	4013      	ands	r3, r2
 8005464:	d063      	beq.n	800552e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d12a      	bne.n	80054c4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800546e:	4b81      	ldr	r3, [pc, #516]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005472:	4b80      	ldr	r3, [pc, #512]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005474:	2104      	movs	r1, #4
 8005476:	430a      	orrs	r2, r1
 8005478:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800547a:	4b7e      	ldr	r3, [pc, #504]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 800547c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547e:	4b7d      	ldr	r3, [pc, #500]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005480:	2101      	movs	r1, #1
 8005482:	430a      	orrs	r2, r1
 8005484:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005486:	f7fd ff99 	bl	80033bc <HAL_GetTick>
 800548a:	0003      	movs	r3, r0
 800548c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005490:	f7fd ff94 	bl	80033bc <HAL_GetTick>
 8005494:	0002      	movs	r2, r0
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e0e3      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80054a2:	4b74      	ldr	r3, [pc, #464]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80054a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a6:	2202      	movs	r2, #2
 80054a8:	4013      	ands	r3, r2
 80054aa:	d0f1      	beq.n	8005490 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80054ac:	4b71      	ldr	r3, [pc, #452]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	22f8      	movs	r2, #248	; 0xf8
 80054b2:	4393      	bics	r3, r2
 80054b4:	0019      	movs	r1, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	00da      	lsls	r2, r3, #3
 80054bc:	4b6d      	ldr	r3, [pc, #436]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80054be:	430a      	orrs	r2, r1
 80054c0:	635a      	str	r2, [r3, #52]	; 0x34
 80054c2:	e034      	b.n	800552e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	3305      	adds	r3, #5
 80054ca:	d111      	bne.n	80054f0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80054cc:	4b69      	ldr	r3, [pc, #420]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80054ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d0:	4b68      	ldr	r3, [pc, #416]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80054d2:	2104      	movs	r1, #4
 80054d4:	438a      	bics	r2, r1
 80054d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80054d8:	4b66      	ldr	r3, [pc, #408]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80054da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054dc:	22f8      	movs	r2, #248	; 0xf8
 80054de:	4393      	bics	r3, r2
 80054e0:	0019      	movs	r1, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	00da      	lsls	r2, r3, #3
 80054e8:	4b62      	ldr	r3, [pc, #392]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80054ea:	430a      	orrs	r2, r1
 80054ec:	635a      	str	r2, [r3, #52]	; 0x34
 80054ee:	e01e      	b.n	800552e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80054f0:	4b60      	ldr	r3, [pc, #384]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80054f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f4:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80054f6:	2104      	movs	r1, #4
 80054f8:	430a      	orrs	r2, r1
 80054fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80054fc:	4b5d      	ldr	r3, [pc, #372]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80054fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005500:	4b5c      	ldr	r3, [pc, #368]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005502:	2101      	movs	r1, #1
 8005504:	438a      	bics	r2, r1
 8005506:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005508:	f7fd ff58 	bl	80033bc <HAL_GetTick>
 800550c:	0003      	movs	r3, r0
 800550e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005512:	f7fd ff53 	bl	80033bc <HAL_GetTick>
 8005516:	0002      	movs	r2, r0
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e0a2      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005524:	4b53      	ldr	r3, [pc, #332]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005528:	2202      	movs	r2, #2
 800552a:	4013      	ands	r3, r2
 800552c:	d1f1      	bne.n	8005512 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d100      	bne.n	8005538 <HAL_RCC_OscConfig+0x4e8>
 8005536:	e097      	b.n	8005668 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005538:	4b4e      	ldr	r3, [pc, #312]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	220c      	movs	r2, #12
 800553e:	4013      	ands	r3, r2
 8005540:	2b08      	cmp	r3, #8
 8005542:	d100      	bne.n	8005546 <HAL_RCC_OscConfig+0x4f6>
 8005544:	e06b      	b.n	800561e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d14c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800554e:	4b49      	ldr	r3, [pc, #292]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b48      	ldr	r3, [pc, #288]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005554:	494a      	ldr	r1, [pc, #296]	; (8005680 <HAL_RCC_OscConfig+0x630>)
 8005556:	400a      	ands	r2, r1
 8005558:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555a:	f7fd ff2f 	bl	80033bc <HAL_GetTick>
 800555e:	0003      	movs	r3, r0
 8005560:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005564:	f7fd ff2a 	bl	80033bc <HAL_GetTick>
 8005568:	0002      	movs	r2, r0
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e079      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005576:	4b3f      	ldr	r3, [pc, #252]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	2380      	movs	r3, #128	; 0x80
 800557c:	049b      	lsls	r3, r3, #18
 800557e:	4013      	ands	r3, r2
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005582:	4b3c      	ldr	r3, [pc, #240]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	220f      	movs	r2, #15
 8005588:	4393      	bics	r3, r2
 800558a:	0019      	movs	r1, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005590:	4b38      	ldr	r3, [pc, #224]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005592:	430a      	orrs	r2, r1
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c
 8005596:	4b37      	ldr	r3, [pc, #220]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4a3a      	ldr	r2, [pc, #232]	; (8005684 <HAL_RCC_OscConfig+0x634>)
 800559c:	4013      	ands	r3, r2
 800559e:	0019      	movs	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	431a      	orrs	r2, r3
 80055aa:	4b32      	ldr	r3, [pc, #200]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055ac:	430a      	orrs	r2, r1
 80055ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055b0:	4b30      	ldr	r3, [pc, #192]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4b2f      	ldr	r3, [pc, #188]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055b6:	2180      	movs	r1, #128	; 0x80
 80055b8:	0449      	lsls	r1, r1, #17
 80055ba:	430a      	orrs	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055be:	f7fd fefd 	bl	80033bc <HAL_GetTick>
 80055c2:	0003      	movs	r3, r0
 80055c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c8:	f7fd fef8 	bl	80033bc <HAL_GetTick>
 80055cc:	0002      	movs	r2, r0
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e047      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055da:	4b26      	ldr	r3, [pc, #152]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	2380      	movs	r3, #128	; 0x80
 80055e0:	049b      	lsls	r3, r3, #18
 80055e2:	4013      	ands	r3, r2
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCC_OscConfig+0x578>
 80055e6:	e03f      	b.n	8005668 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e8:	4b22      	ldr	r3, [pc, #136]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4b21      	ldr	r3, [pc, #132]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055ee:	4924      	ldr	r1, [pc, #144]	; (8005680 <HAL_RCC_OscConfig+0x630>)
 80055f0:	400a      	ands	r2, r1
 80055f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f4:	f7fd fee2 	bl	80033bc <HAL_GetTick>
 80055f8:	0003      	movs	r3, r0
 80055fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055fe:	f7fd fedd 	bl	80033bc <HAL_GetTick>
 8005602:	0002      	movs	r2, r0
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e02c      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005610:	4b18      	ldr	r3, [pc, #96]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	049b      	lsls	r3, r3, #18
 8005618:	4013      	ands	r3, r2
 800561a:	d1f0      	bne.n	80055fe <HAL_RCC_OscConfig+0x5ae>
 800561c:	e024      	b.n	8005668 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e01f      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800562a:	4b12      	ldr	r3, [pc, #72]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005630:	4b10      	ldr	r3, [pc, #64]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	025b      	lsls	r3, r3, #9
 800563c:	401a      	ands	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	429a      	cmp	r2, r3
 8005644:	d10e      	bne.n	8005664 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	220f      	movs	r2, #15
 800564a:	401a      	ands	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005650:	429a      	cmp	r2, r3
 8005652:	d107      	bne.n	8005664 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	23f0      	movs	r3, #240	; 0xf0
 8005658:	039b      	lsls	r3, r3, #14
 800565a:	401a      	ands	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005660:	429a      	cmp	r2, r3
 8005662:	d001      	beq.n	8005668 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	0018      	movs	r0, r3
 800566c:	46bd      	mov	sp, r7
 800566e:	b008      	add	sp, #32
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	40021000 	.word	0x40021000
 8005678:	00001388 	.word	0x00001388
 800567c:	efffffff 	.word	0xefffffff
 8005680:	feffffff 	.word	0xfeffffff
 8005684:	ffc2ffff 	.word	0xffc2ffff

08005688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0b3      	b.n	8005804 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800569c:	4b5b      	ldr	r3, [pc, #364]	; (800580c <HAL_RCC_ClockConfig+0x184>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2201      	movs	r2, #1
 80056a2:	4013      	ands	r3, r2
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d911      	bls.n	80056ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b58      	ldr	r3, [pc, #352]	; (800580c <HAL_RCC_ClockConfig+0x184>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2201      	movs	r2, #1
 80056b0:	4393      	bics	r3, r2
 80056b2:	0019      	movs	r1, r3
 80056b4:	4b55      	ldr	r3, [pc, #340]	; (800580c <HAL_RCC_ClockConfig+0x184>)
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056bc:	4b53      	ldr	r3, [pc, #332]	; (800580c <HAL_RCC_ClockConfig+0x184>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2201      	movs	r2, #1
 80056c2:	4013      	ands	r3, r2
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d001      	beq.n	80056ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e09a      	b.n	8005804 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2202      	movs	r2, #2
 80056d4:	4013      	ands	r3, r2
 80056d6:	d015      	beq.n	8005704 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2204      	movs	r2, #4
 80056de:	4013      	ands	r3, r2
 80056e0:	d006      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80056e2:	4b4b      	ldr	r3, [pc, #300]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	4b4a      	ldr	r3, [pc, #296]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 80056e8:	21e0      	movs	r1, #224	; 0xe0
 80056ea:	00c9      	lsls	r1, r1, #3
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f0:	4b47      	ldr	r3, [pc, #284]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	22f0      	movs	r2, #240	; 0xf0
 80056f6:	4393      	bics	r3, r2
 80056f8:	0019      	movs	r1, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	4b44      	ldr	r3, [pc, #272]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2201      	movs	r2, #1
 800570a:	4013      	ands	r3, r2
 800570c:	d040      	beq.n	8005790 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d107      	bne.n	8005726 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005716:	4b3e      	ldr	r3, [pc, #248]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	029b      	lsls	r3, r3, #10
 800571e:	4013      	ands	r3, r2
 8005720:	d114      	bne.n	800574c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e06e      	b.n	8005804 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800572e:	4b38      	ldr	r3, [pc, #224]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	049b      	lsls	r3, r3, #18
 8005736:	4013      	ands	r3, r2
 8005738:	d108      	bne.n	800574c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e062      	b.n	8005804 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800573e:	4b34      	ldr	r3, [pc, #208]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2202      	movs	r2, #2
 8005744:	4013      	ands	r3, r2
 8005746:	d101      	bne.n	800574c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e05b      	b.n	8005804 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800574c:	4b30      	ldr	r3, [pc, #192]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2203      	movs	r2, #3
 8005752:	4393      	bics	r3, r2
 8005754:	0019      	movs	r1, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	4b2d      	ldr	r3, [pc, #180]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005760:	f7fd fe2c 	bl	80033bc <HAL_GetTick>
 8005764:	0003      	movs	r3, r0
 8005766:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005768:	e009      	b.n	800577e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800576a:	f7fd fe27 	bl	80033bc <HAL_GetTick>
 800576e:	0002      	movs	r2, r0
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	4a27      	ldr	r2, [pc, #156]	; (8005814 <HAL_RCC_ClockConfig+0x18c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e042      	b.n	8005804 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	4b24      	ldr	r3, [pc, #144]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	220c      	movs	r2, #12
 8005784:	401a      	ands	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	429a      	cmp	r2, r3
 800578e:	d1ec      	bne.n	800576a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005790:	4b1e      	ldr	r3, [pc, #120]	; (800580c <HAL_RCC_ClockConfig+0x184>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2201      	movs	r2, #1
 8005796:	4013      	ands	r3, r2
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d211      	bcs.n	80057c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_RCC_ClockConfig+0x184>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2201      	movs	r2, #1
 80057a4:	4393      	bics	r3, r2
 80057a6:	0019      	movs	r1, r3
 80057a8:	4b18      	ldr	r3, [pc, #96]	; (800580c <HAL_RCC_ClockConfig+0x184>)
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b0:	4b16      	ldr	r3, [pc, #88]	; (800580c <HAL_RCC_ClockConfig+0x184>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2201      	movs	r2, #1
 80057b6:	4013      	ands	r3, r2
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d001      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e020      	b.n	8005804 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2204      	movs	r2, #4
 80057c8:	4013      	ands	r3, r2
 80057ca:	d009      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80057cc:	4b10      	ldr	r3, [pc, #64]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4a11      	ldr	r2, [pc, #68]	; (8005818 <HAL_RCC_ClockConfig+0x190>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	0019      	movs	r1, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	4b0d      	ldr	r3, [pc, #52]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80057e0:	f000 f820 	bl	8005824 <HAL_RCC_GetSysClockFreq>
 80057e4:	0001      	movs	r1, r0
 80057e6:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <HAL_RCC_ClockConfig+0x188>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	091b      	lsrs	r3, r3, #4
 80057ec:	220f      	movs	r2, #15
 80057ee:	4013      	ands	r3, r2
 80057f0:	4a0a      	ldr	r2, [pc, #40]	; (800581c <HAL_RCC_ClockConfig+0x194>)
 80057f2:	5cd3      	ldrb	r3, [r2, r3]
 80057f4:	000a      	movs	r2, r1
 80057f6:	40da      	lsrs	r2, r3
 80057f8:	4b09      	ldr	r3, [pc, #36]	; (8005820 <HAL_RCC_ClockConfig+0x198>)
 80057fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80057fc:	2000      	movs	r0, #0
 80057fe:	f7fd fd97 	bl	8003330 <HAL_InitTick>
  
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	0018      	movs	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	b004      	add	sp, #16
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40022000 	.word	0x40022000
 8005810:	40021000 	.word	0x40021000
 8005814:	00001388 	.word	0x00001388
 8005818:	fffff8ff 	.word	0xfffff8ff
 800581c:	08009660 	.word	0x08009660
 8005820:	20000008 	.word	0x20000008

08005824 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005824:	b590      	push	{r4, r7, lr}
 8005826:	b08f      	sub	sp, #60	; 0x3c
 8005828:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800582a:	2314      	movs	r3, #20
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	4a2b      	ldr	r2, [pc, #172]	; (80058dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005830:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005832:	c313      	stmia	r3!, {r0, r1, r4}
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	4a29      	ldr	r2, [pc, #164]	; (80058e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800583c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800583e:	c313      	stmia	r3!, {r0, r1, r4}
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005848:	2300      	movs	r3, #0
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
 800584c:	2300      	movs	r3, #0
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
 8005850:	2300      	movs	r3, #0
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005858:	4b22      	ldr	r3, [pc, #136]	; (80058e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	220c      	movs	r2, #12
 8005862:	4013      	ands	r3, r2
 8005864:	2b04      	cmp	r3, #4
 8005866:	d002      	beq.n	800586e <HAL_RCC_GetSysClockFreq+0x4a>
 8005868:	2b08      	cmp	r3, #8
 800586a:	d003      	beq.n	8005874 <HAL_RCC_GetSysClockFreq+0x50>
 800586c:	e02d      	b.n	80058ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800586e:	4b1e      	ldr	r3, [pc, #120]	; (80058e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005870:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005872:	e02d      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005876:	0c9b      	lsrs	r3, r3, #18
 8005878:	220f      	movs	r2, #15
 800587a:	4013      	ands	r3, r2
 800587c:	2214      	movs	r2, #20
 800587e:	18ba      	adds	r2, r7, r2
 8005880:	5cd3      	ldrb	r3, [r2, r3]
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005884:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	220f      	movs	r2, #15
 800588a:	4013      	ands	r3, r2
 800588c:	1d3a      	adds	r2, r7, #4
 800588e:	5cd3      	ldrb	r3, [r2, r3]
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	025b      	lsls	r3, r3, #9
 8005898:	4013      	ands	r3, r2
 800589a:	d009      	beq.n	80058b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800589c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800589e:	4812      	ldr	r0, [pc, #72]	; (80058e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80058a0:	f7fa fc44 	bl	800012c <__udivsi3>
 80058a4:	0003      	movs	r3, r0
 80058a6:	001a      	movs	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	4353      	muls	r3, r2
 80058ac:	637b      	str	r3, [r7, #52]	; 0x34
 80058ae:	e009      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80058b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058b2:	000a      	movs	r2, r1
 80058b4:	0152      	lsls	r2, r2, #5
 80058b6:	1a52      	subs	r2, r2, r1
 80058b8:	0193      	lsls	r3, r2, #6
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	185b      	adds	r3, r3, r1
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80058c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058c8:	e002      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058ca:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80058cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80058d2:	0018      	movs	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b00f      	add	sp, #60	; 0x3c
 80058d8:	bd90      	pop	{r4, r7, pc}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	08008848 	.word	0x08008848
 80058e0:	08008858 	.word	0x08008858
 80058e4:	40021000 	.word	0x40021000
 80058e8:	007a1200 	.word	0x007a1200

080058ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058f0:	4b02      	ldr	r3, [pc, #8]	; (80058fc <HAL_RCC_GetHCLKFreq+0x10>)
 80058f2:	681b      	ldr	r3, [r3, #0]
}
 80058f4:	0018      	movs	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	20000008 	.word	0x20000008

08005900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005904:	f7ff fff2 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 8005908:	0001      	movs	r1, r0
 800590a:	4b06      	ldr	r3, [pc, #24]	; (8005924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	2207      	movs	r2, #7
 8005912:	4013      	ands	r3, r2
 8005914:	4a04      	ldr	r2, [pc, #16]	; (8005928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005916:	5cd3      	ldrb	r3, [r2, r3]
 8005918:	40d9      	lsrs	r1, r3
 800591a:	000b      	movs	r3, r1
}    
 800591c:	0018      	movs	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	40021000 	.word	0x40021000
 8005928:	08009670 	.word	0x08009670

0800592c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	025b      	lsls	r3, r3, #9
 8005944:	4013      	ands	r3, r2
 8005946:	d100      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005948:	e08f      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800594a:	2317      	movs	r3, #23
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005952:	4b57      	ldr	r3, [pc, #348]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005954:	69da      	ldr	r2, [r3, #28]
 8005956:	2380      	movs	r3, #128	; 0x80
 8005958:	055b      	lsls	r3, r3, #21
 800595a:	4013      	ands	r3, r2
 800595c:	d111      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800595e:	4b54      	ldr	r3, [pc, #336]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005960:	69da      	ldr	r2, [r3, #28]
 8005962:	4b53      	ldr	r3, [pc, #332]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005964:	2180      	movs	r1, #128	; 0x80
 8005966:	0549      	lsls	r1, r1, #21
 8005968:	430a      	orrs	r2, r1
 800596a:	61da      	str	r2, [r3, #28]
 800596c:	4b50      	ldr	r3, [pc, #320]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	2380      	movs	r3, #128	; 0x80
 8005972:	055b      	lsls	r3, r3, #21
 8005974:	4013      	ands	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800597a:	2317      	movs	r3, #23
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	2201      	movs	r2, #1
 8005980:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005982:	4b4c      	ldr	r3, [pc, #304]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	4013      	ands	r3, r2
 800598c:	d11a      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800598e:	4b49      	ldr	r3, [pc, #292]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b48      	ldr	r3, [pc, #288]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005994:	2180      	movs	r1, #128	; 0x80
 8005996:	0049      	lsls	r1, r1, #1
 8005998:	430a      	orrs	r2, r1
 800599a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800599c:	f7fd fd0e 	bl	80033bc <HAL_GetTick>
 80059a0:	0003      	movs	r3, r0
 80059a2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a4:	e008      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a6:	f7fd fd09 	bl	80033bc <HAL_GetTick>
 80059aa:	0002      	movs	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b64      	cmp	r3, #100	; 0x64
 80059b2:	d901      	bls.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e077      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b8:	4b3e      	ldr	r3, [pc, #248]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	4013      	ands	r3, r2
 80059c2:	d0f0      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059c4:	4b3a      	ldr	r3, [pc, #232]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80059c6:	6a1a      	ldr	r2, [r3, #32]
 80059c8:	23c0      	movs	r3, #192	; 0xc0
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d034      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	23c0      	movs	r3, #192	; 0xc0
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4013      	ands	r3, r2
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d02c      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059e6:	4b32      	ldr	r3, [pc, #200]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	4a33      	ldr	r2, [pc, #204]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059f0:	4b2f      	ldr	r3, [pc, #188]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80059f2:	6a1a      	ldr	r2, [r3, #32]
 80059f4:	4b2e      	ldr	r3, [pc, #184]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	0249      	lsls	r1, r1, #9
 80059fa:	430a      	orrs	r2, r1
 80059fc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059fe:	4b2c      	ldr	r3, [pc, #176]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a00:	6a1a      	ldr	r2, [r3, #32]
 8005a02:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a04:	492d      	ldr	r1, [pc, #180]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005a06:	400a      	ands	r2, r1
 8005a08:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a0a:	4b29      	ldr	r3, [pc, #164]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	4013      	ands	r3, r2
 8005a16:	d013      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a18:	f7fd fcd0 	bl	80033bc <HAL_GetTick>
 8005a1c:	0003      	movs	r3, r0
 8005a1e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a20:	e009      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a22:	f7fd fccb 	bl	80033bc <HAL_GetTick>
 8005a26:	0002      	movs	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	4a24      	ldr	r2, [pc, #144]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e038      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a36:	4b1e      	ldr	r3, [pc, #120]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	d0f0      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a40:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	4a1c      	ldr	r2, [pc, #112]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	0019      	movs	r1, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a50:	430a      	orrs	r2, r1
 8005a52:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a54:	2317      	movs	r3, #23
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d105      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a5e:	4b14      	ldr	r3, [pc, #80]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a60:	69da      	ldr	r2, [r3, #28]
 8005a62:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a64:	4917      	ldr	r1, [pc, #92]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005a66:	400a      	ands	r2, r1
 8005a68:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	4013      	ands	r3, r2
 8005a72:	d009      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a74:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	2203      	movs	r2, #3
 8005a7a:	4393      	bics	r3, r2
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a84:	430a      	orrs	r2, r1
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a92:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	2210      	movs	r2, #16
 8005a98:	4393      	bics	r3, r2
 8005a9a:	0019      	movs	r1, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b006      	add	sp, #24
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	40007000 	.word	0x40007000
 8005ab8:	fffffcff 	.word	0xfffffcff
 8005abc:	fffeffff 	.word	0xfffeffff
 8005ac0:	00001388 	.word	0x00001388
 8005ac4:	efffffff 	.word	0xefffffff

08005ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e01e      	b.n	8005b18 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	223d      	movs	r2, #61	; 0x3d
 8005ade:	5c9b      	ldrb	r3, [r3, r2]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d107      	bne.n	8005af6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	223c      	movs	r2, #60	; 0x3c
 8005aea:	2100      	movs	r1, #0
 8005aec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f7fd faa7 	bl	8003044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	223d      	movs	r2, #61	; 0x3d
 8005afa:	2102      	movs	r1, #2
 8005afc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3304      	adds	r3, #4
 8005b06:	0019      	movs	r1, r3
 8005b08:	0010      	movs	r0, r2
 8005b0a:	f000 f9ff 	bl	8005f0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	223d      	movs	r2, #61	; 0x3d
 8005b12:	2101      	movs	r1, #1
 8005b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	0018      	movs	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e01e      	b.n	8005b70 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	223d      	movs	r2, #61	; 0x3d
 8005b36:	5c9b      	ldrb	r3, [r3, r2]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	223c      	movs	r2, #60	; 0x3c
 8005b42:	2100      	movs	r1, #0
 8005b44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f000 f815 	bl	8005b78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	223d      	movs	r2, #61	; 0x3d
 8005b52:	2102      	movs	r1, #2
 8005b54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	0019      	movs	r1, r3
 8005b60:	0010      	movs	r0, r2
 8005b62:	f000 f9d3 	bl	8005f0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	223d      	movs	r2, #61	; 0x3d
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	0018      	movs	r0, r3
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b002      	add	sp, #8
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b80:	46c0      	nop			; (mov r8, r8)
 8005b82:	46bd      	mov	sp, r7
 8005b84:	b002      	add	sp, #8
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f000 fcc2 	bl	8006524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1a      	ldr	r2, [pc, #104]	; (8005c10 <HAL_TIM_PWM_Start+0x88>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00e      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x40>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a19      	ldr	r2, [pc, #100]	; (8005c14 <HAL_TIM_PWM_Start+0x8c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d009      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <HAL_TIM_PWM_Start+0x90>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x40>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a16      	ldr	r2, [pc, #88]	; (8005c1c <HAL_TIM_PWM_Start+0x94>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <HAL_TIM_PWM_Start+0x44>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <HAL_TIM_PWM_Start+0x46>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d008      	beq.n	8005be4 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2180      	movs	r1, #128	; 0x80
 8005bde:	0209      	lsls	r1, r1, #8
 8005be0:	430a      	orrs	r2, r1
 8005be2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2207      	movs	r2, #7
 8005bec:	4013      	ands	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b06      	cmp	r3, #6
 8005bf4:	d007      	beq.n	8005c06 <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2101      	movs	r1, #1
 8005c02:	430a      	orrs	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	0018      	movs	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b004      	add	sp, #16
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40014400 	.word	0x40014400
 8005c1c:	40014800 	.word	0x40014800

08005c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	223c      	movs	r2, #60	; 0x3c
 8005c30:	5c9b      	ldrb	r3, [r3, r2]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e0a4      	b.n	8005d84 <HAL_TIM_PWM_ConfigChannel+0x164>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	223c      	movs	r2, #60	; 0x3c
 8005c3e:	2101      	movs	r1, #1
 8005c40:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	223d      	movs	r2, #61	; 0x3d
 8005c46:	2102      	movs	r1, #2
 8005c48:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d029      	beq.n	8005ca4 <HAL_TIM_PWM_ConfigChannel+0x84>
 8005c50:	d802      	bhi.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x38>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8005c56:	e08c      	b.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d046      	beq.n	8005cea <HAL_TIM_PWM_ConfigChannel+0xca>
 8005c5c:	2b0c      	cmp	r3, #12
 8005c5e:	d065      	beq.n	8005d2c <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8005c60:	e087      	b.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	0011      	movs	r1, r2
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f000 f9c4 	bl	8005ff8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2108      	movs	r1, #8
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2104      	movs	r1, #4
 8005c8c:	438a      	bics	r2, r1
 8005c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6999      	ldr	r1, [r3, #24]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	619a      	str	r2, [r3, #24]
      break;
 8005ca2:	e066      	b.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	0011      	movs	r1, r2
 8005cac:	0018      	movs	r0, r3
 8005cae:	f000 fa2b 	bl	8006108 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699a      	ldr	r2, [r3, #24]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2180      	movs	r1, #128	; 0x80
 8005cbe:	0109      	lsls	r1, r1, #4
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	492f      	ldr	r1, [pc, #188]	; (8005d8c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8005cd0:	400a      	ands	r2, r1
 8005cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6999      	ldr	r1, [r3, #24]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	021a      	lsls	r2, r3, #8
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	619a      	str	r2, [r3, #24]
      break;
 8005ce8:	e043      	b.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	0011      	movs	r1, r2
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f000 fa8c 	bl	8006210 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69da      	ldr	r2, [r3, #28]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2108      	movs	r1, #8
 8005d04:	430a      	orrs	r2, r1
 8005d06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2104      	movs	r1, #4
 8005d14:	438a      	bics	r2, r1
 8005d16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69d9      	ldr	r1, [r3, #28]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	61da      	str	r2, [r3, #28]
      break;
 8005d2a:	e022      	b.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	0011      	movs	r1, r2
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 faf1 	bl	800631c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2180      	movs	r1, #128	; 0x80
 8005d46:	0109      	lsls	r1, r1, #4
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69da      	ldr	r2, [r3, #28]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	490d      	ldr	r1, [pc, #52]	; (8005d8c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8005d58:	400a      	ands	r2, r1
 8005d5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69d9      	ldr	r1, [r3, #28]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	021a      	lsls	r2, r3, #8
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	61da      	str	r2, [r3, #28]
      break;
 8005d70:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	223d      	movs	r2, #61	; 0x3d
 8005d76:	2101      	movs	r1, #1
 8005d78:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	223c      	movs	r2, #60	; 0x3c
 8005d7e:	2100      	movs	r1, #0
 8005d80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	0018      	movs	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b004      	add	sp, #16
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	fffffbff 	.word	0xfffffbff

08005d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	223c      	movs	r2, #60	; 0x3c
 8005d9e:	5c9b      	ldrb	r3, [r3, r2]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_TIM_ConfigClockSource+0x18>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e0ab      	b.n	8005f00 <HAL_TIM_ConfigClockSource+0x170>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	223c      	movs	r2, #60	; 0x3c
 8005dac:	2101      	movs	r1, #1
 8005dae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	223d      	movs	r2, #61	; 0x3d
 8005db4:	2102      	movs	r1, #2
 8005db6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2277      	movs	r2, #119	; 0x77
 8005dc4:	4393      	bics	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a4f      	ldr	r2, [pc, #316]	; (8005f08 <HAL_TIM_ConfigClockSource+0x178>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	d100      	bne.n	8005de2 <HAL_TIM_ConfigClockSource+0x52>
 8005de0:	e06b      	b.n	8005eba <HAL_TIM_ConfigClockSource+0x12a>
 8005de2:	d80e      	bhi.n	8005e02 <HAL_TIM_ConfigClockSource+0x72>
 8005de4:	2b10      	cmp	r3, #16
 8005de6:	d100      	bne.n	8005dea <HAL_TIM_ConfigClockSource+0x5a>
 8005de8:	e077      	b.n	8005eda <HAL_TIM_ConfigClockSource+0x14a>
 8005dea:	d803      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x64>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d100      	bne.n	8005df2 <HAL_TIM_ConfigClockSource+0x62>
 8005df0:	e073      	b.n	8005eda <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005df2:	e07c      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d100      	bne.n	8005dfa <HAL_TIM_ConfigClockSource+0x6a>
 8005df8:	e06f      	b.n	8005eda <HAL_TIM_ConfigClockSource+0x14a>
 8005dfa:	2b30      	cmp	r3, #48	; 0x30
 8005dfc:	d100      	bne.n	8005e00 <HAL_TIM_ConfigClockSource+0x70>
 8005dfe:	e06c      	b.n	8005eda <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8005e00:	e075      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005e02:	2b70      	cmp	r3, #112	; 0x70
 8005e04:	d00e      	beq.n	8005e24 <HAL_TIM_ConfigClockSource+0x94>
 8005e06:	d804      	bhi.n	8005e12 <HAL_TIM_ConfigClockSource+0x82>
 8005e08:	2b50      	cmp	r3, #80	; 0x50
 8005e0a:	d036      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0xea>
 8005e0c:	2b60      	cmp	r3, #96	; 0x60
 8005e0e:	d044      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8005e10:	e06d      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005e12:	2280      	movs	r2, #128	; 0x80
 8005e14:	0152      	lsls	r2, r2, #5
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d068      	beq.n	8005eec <HAL_TIM_ConfigClockSource+0x15c>
 8005e1a:	2280      	movs	r2, #128	; 0x80
 8005e1c:	0192      	lsls	r2, r2, #6
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d017      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8005e22:	e064      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	6899      	ldr	r1, [r3, #8]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f000 fb56 	bl	80064e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2277      	movs	r2, #119	; 0x77
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	609a      	str	r2, [r3, #8]
      break;
 8005e50:	e04d      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6899      	ldr	r1, [r3, #8]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f000 fb3f 	bl	80064e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2180      	movs	r1, #128	; 0x80
 8005e72:	01c9      	lsls	r1, r1, #7
 8005e74:	430a      	orrs	r2, r1
 8005e76:	609a      	str	r2, [r3, #8]
      break;
 8005e78:	e039      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6859      	ldr	r1, [r3, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	001a      	movs	r2, r3
 8005e88:	f000 fab2 	bl	80063f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2150      	movs	r1, #80	; 0x50
 8005e92:	0018      	movs	r0, r3
 8005e94:	f000 fb0c 	bl	80064b0 <TIM_ITRx_SetConfig>
      break;
 8005e98:	e029      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6859      	ldr	r1, [r3, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	001a      	movs	r2, r3
 8005ea8:	f000 fad0 	bl	800644c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2160      	movs	r1, #96	; 0x60
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f000 fafc 	bl	80064b0 <TIM_ITRx_SetConfig>
      break;
 8005eb8:	e019      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6859      	ldr	r1, [r3, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	001a      	movs	r2, r3
 8005ec8:	f000 fa92 	bl	80063f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2140      	movs	r1, #64	; 0x40
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f000 faec 	bl	80064b0 <TIM_ITRx_SetConfig>
      break;
 8005ed8:	e009      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	0019      	movs	r1, r3
 8005ee4:	0010      	movs	r0, r2
 8005ee6:	f000 fae3 	bl	80064b0 <TIM_ITRx_SetConfig>
      break;
 8005eea:	e000      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005eec:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	223d      	movs	r2, #61	; 0x3d
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	223c      	movs	r2, #60	; 0x3c
 8005efa:	2100      	movs	r1, #0
 8005efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	0018      	movs	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	b004      	add	sp, #16
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	ffff00ff 	.word	0xffff00ff

08005f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a2f      	ldr	r2, [pc, #188]	; (8005fdc <TIM_Base_SetConfig+0xd0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_Base_SetConfig+0x20>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a2e      	ldr	r2, [pc, #184]	; (8005fe0 <TIM_Base_SetConfig+0xd4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d108      	bne.n	8005f3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2270      	movs	r2, #112	; 0x70
 8005f30:	4393      	bics	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a26      	ldr	r2, [pc, #152]	; (8005fdc <TIM_Base_SetConfig+0xd0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <TIM_Base_SetConfig+0x62>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a25      	ldr	r2, [pc, #148]	; (8005fe0 <TIM_Base_SetConfig+0xd4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00f      	beq.n	8005f6e <TIM_Base_SetConfig+0x62>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a24      	ldr	r2, [pc, #144]	; (8005fe4 <TIM_Base_SetConfig+0xd8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00b      	beq.n	8005f6e <TIM_Base_SetConfig+0x62>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a23      	ldr	r2, [pc, #140]	; (8005fe8 <TIM_Base_SetConfig+0xdc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d007      	beq.n	8005f6e <TIM_Base_SetConfig+0x62>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a22      	ldr	r2, [pc, #136]	; (8005fec <TIM_Base_SetConfig+0xe0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d003      	beq.n	8005f6e <TIM_Base_SetConfig+0x62>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a21      	ldr	r2, [pc, #132]	; (8005ff0 <TIM_Base_SetConfig+0xe4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d108      	bne.n	8005f80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a20      	ldr	r2, [pc, #128]	; (8005ff4 <TIM_Base_SetConfig+0xe8>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	4393      	bics	r3, r2
 8005f86:	001a      	movs	r2, r3
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a0c      	ldr	r2, [pc, #48]	; (8005fdc <TIM_Base_SetConfig+0xd0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_Base_SetConfig+0xba>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a0d      	ldr	r2, [pc, #52]	; (8005fe8 <TIM_Base_SetConfig+0xdc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_Base_SetConfig+0xba>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a0c      	ldr	r2, [pc, #48]	; (8005fec <TIM_Base_SetConfig+0xe0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_Base_SetConfig+0xba>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a0b      	ldr	r2, [pc, #44]	; (8005ff0 <TIM_Base_SetConfig+0xe4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d103      	bne.n	8005fce <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	615a      	str	r2, [r3, #20]
}
 8005fd4:	46c0      	nop			; (mov r8, r8)
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b004      	add	sp, #16
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	40002000 	.word	0x40002000
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40014400 	.word	0x40014400
 8005ff0:	40014800 	.word	0x40014800
 8005ff4:	fffffcff 	.word	0xfffffcff

08005ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	2201      	movs	r2, #1
 8006008:	4393      	bics	r3, r2
 800600a:	001a      	movs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2270      	movs	r2, #112	; 0x70
 8006026:	4393      	bics	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2203      	movs	r2, #3
 800602e:	4393      	bics	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2202      	movs	r2, #2
 8006040:	4393      	bics	r3, r2
 8006042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a27      	ldr	r2, [pc, #156]	; (80060f0 <TIM_OC1_SetConfig+0xf8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00b      	beq.n	800606e <TIM_OC1_SetConfig+0x76>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a26      	ldr	r2, [pc, #152]	; (80060f4 <TIM_OC1_SetConfig+0xfc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d007      	beq.n	800606e <TIM_OC1_SetConfig+0x76>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a25      	ldr	r2, [pc, #148]	; (80060f8 <TIM_OC1_SetConfig+0x100>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d003      	beq.n	800606e <TIM_OC1_SetConfig+0x76>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a24      	ldr	r2, [pc, #144]	; (80060fc <TIM_OC1_SetConfig+0x104>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d10c      	bne.n	8006088 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2208      	movs	r2, #8
 8006072:	4393      	bics	r3, r2
 8006074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2204      	movs	r2, #4
 8006084:	4393      	bics	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a19      	ldr	r2, [pc, #100]	; (80060f0 <TIM_OC1_SetConfig+0xf8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00b      	beq.n	80060a8 <TIM_OC1_SetConfig+0xb0>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <TIM_OC1_SetConfig+0xfc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <TIM_OC1_SetConfig+0xb0>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a17      	ldr	r2, [pc, #92]	; (80060f8 <TIM_OC1_SetConfig+0x100>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_OC1_SetConfig+0xb0>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a16      	ldr	r2, [pc, #88]	; (80060fc <TIM_OC1_SetConfig+0x104>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d111      	bne.n	80060cc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4a15      	ldr	r2, [pc, #84]	; (8006100 <TIM_OC1_SetConfig+0x108>)
 80060ac:	4013      	ands	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4a14      	ldr	r2, [pc, #80]	; (8006104 <TIM_OC1_SetConfig+0x10c>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b006      	add	sp, #24
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40014400 	.word	0x40014400
 80060fc:	40014800 	.word	0x40014800
 8006100:	fffffeff 	.word	0xfffffeff
 8006104:	fffffdff 	.word	0xfffffdff

08006108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	2210      	movs	r2, #16
 8006118:	4393      	bics	r3, r2
 800611a:	001a      	movs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4a2e      	ldr	r2, [pc, #184]	; (80061f0 <TIM_OC2_SetConfig+0xe8>)
 8006136:	4013      	ands	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4a2d      	ldr	r2, [pc, #180]	; (80061f4 <TIM_OC2_SetConfig+0xec>)
 800613e:	4013      	ands	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2220      	movs	r2, #32
 8006152:	4393      	bics	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a24      	ldr	r2, [pc, #144]	; (80061f8 <TIM_OC2_SetConfig+0xf0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d10d      	bne.n	8006186 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2280      	movs	r2, #128	; 0x80
 800616e:	4393      	bics	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2240      	movs	r2, #64	; 0x40
 8006182:	4393      	bics	r3, r2
 8006184:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a1b      	ldr	r2, [pc, #108]	; (80061f8 <TIM_OC2_SetConfig+0xf0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00b      	beq.n	80061a6 <TIM_OC2_SetConfig+0x9e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1a      	ldr	r2, [pc, #104]	; (80061fc <TIM_OC2_SetConfig+0xf4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d007      	beq.n	80061a6 <TIM_OC2_SetConfig+0x9e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a19      	ldr	r2, [pc, #100]	; (8006200 <TIM_OC2_SetConfig+0xf8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_OC2_SetConfig+0x9e>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a18      	ldr	r2, [pc, #96]	; (8006204 <TIM_OC2_SetConfig+0xfc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d113      	bne.n	80061ce <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4a17      	ldr	r2, [pc, #92]	; (8006208 <TIM_OC2_SetConfig+0x100>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4a16      	ldr	r2, [pc, #88]	; (800620c <TIM_OC2_SetConfig+0x104>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	46c0      	nop			; (mov r8, r8)
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b006      	add	sp, #24
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	ffff8fff 	.word	0xffff8fff
 80061f4:	fffffcff 	.word	0xfffffcff
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40014000 	.word	0x40014000
 8006200:	40014400 	.word	0x40014400
 8006204:	40014800 	.word	0x40014800
 8006208:	fffffbff 	.word	0xfffffbff
 800620c:	fffff7ff 	.word	0xfffff7ff

08006210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	4a35      	ldr	r2, [pc, #212]	; (80062f4 <TIM_OC3_SetConfig+0xe4>)
 8006220:	401a      	ands	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2270      	movs	r2, #112	; 0x70
 800623c:	4393      	bics	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2203      	movs	r2, #3
 8006244:	4393      	bics	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	4a28      	ldr	r2, [pc, #160]	; (80062f8 <TIM_OC3_SetConfig+0xe8>)
 8006256:	4013      	ands	r3, r2
 8006258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a24      	ldr	r2, [pc, #144]	; (80062fc <TIM_OC3_SetConfig+0xec>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10d      	bne.n	800628a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4a23      	ldr	r2, [pc, #140]	; (8006300 <TIM_OC3_SetConfig+0xf0>)
 8006272:	4013      	ands	r3, r2
 8006274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <TIM_OC3_SetConfig+0xf4>)
 8006286:	4013      	ands	r3, r2
 8006288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a1b      	ldr	r2, [pc, #108]	; (80062fc <TIM_OC3_SetConfig+0xec>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00b      	beq.n	80062aa <TIM_OC3_SetConfig+0x9a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a1c      	ldr	r2, [pc, #112]	; (8006308 <TIM_OC3_SetConfig+0xf8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d007      	beq.n	80062aa <TIM_OC3_SetConfig+0x9a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a1b      	ldr	r2, [pc, #108]	; (800630c <TIM_OC3_SetConfig+0xfc>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_OC3_SetConfig+0x9a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <TIM_OC3_SetConfig+0x100>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d113      	bne.n	80062d2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	4a19      	ldr	r2, [pc, #100]	; (8006314 <TIM_OC3_SetConfig+0x104>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	4a18      	ldr	r2, [pc, #96]	; (8006318 <TIM_OC3_SetConfig+0x108>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	621a      	str	r2, [r3, #32]
}
 80062ec:	46c0      	nop			; (mov r8, r8)
 80062ee:	46bd      	mov	sp, r7
 80062f0:	b006      	add	sp, #24
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	fffffeff 	.word	0xfffffeff
 80062f8:	fffffdff 	.word	0xfffffdff
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	fffff7ff 	.word	0xfffff7ff
 8006304:	fffffbff 	.word	0xfffffbff
 8006308:	40014000 	.word	0x40014000
 800630c:	40014400 	.word	0x40014400
 8006310:	40014800 	.word	0x40014800
 8006314:	ffffefff 	.word	0xffffefff
 8006318:	ffffdfff 	.word	0xffffdfff

0800631c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	4a28      	ldr	r2, [pc, #160]	; (80063cc <TIM_OC4_SetConfig+0xb0>)
 800632c:	401a      	ands	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4a22      	ldr	r2, [pc, #136]	; (80063d0 <TIM_OC4_SetConfig+0xb4>)
 8006348:	4013      	ands	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4a21      	ldr	r2, [pc, #132]	; (80063d4 <TIM_OC4_SetConfig+0xb8>)
 8006350:	4013      	ands	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	021b      	lsls	r3, r3, #8
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	4a1d      	ldr	r2, [pc, #116]	; (80063d8 <TIM_OC4_SetConfig+0xbc>)
 8006364:	4013      	ands	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	031b      	lsls	r3, r3, #12
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a19      	ldr	r2, [pc, #100]	; (80063dc <TIM_OC4_SetConfig+0xc0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00b      	beq.n	8006394 <TIM_OC4_SetConfig+0x78>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a18      	ldr	r2, [pc, #96]	; (80063e0 <TIM_OC4_SetConfig+0xc4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d007      	beq.n	8006394 <TIM_OC4_SetConfig+0x78>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <TIM_OC4_SetConfig+0xc8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_OC4_SetConfig+0x78>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <TIM_OC4_SetConfig+0xcc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d109      	bne.n	80063a8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	4a15      	ldr	r2, [pc, #84]	; (80063ec <TIM_OC4_SetConfig+0xd0>)
 8006398:	4013      	ands	r3, r2
 800639a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	019b      	lsls	r3, r3, #6
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b006      	add	sp, #24
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	ffffefff 	.word	0xffffefff
 80063d0:	ffff8fff 	.word	0xffff8fff
 80063d4:	fffffcff 	.word	0xfffffcff
 80063d8:	ffffdfff 	.word	0xffffdfff
 80063dc:	40012c00 	.word	0x40012c00
 80063e0:	40014000 	.word	0x40014000
 80063e4:	40014400 	.word	0x40014400
 80063e8:	40014800 	.word	0x40014800
 80063ec:	ffffbfff 	.word	0xffffbfff

080063f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	2201      	movs	r2, #1
 8006408:	4393      	bics	r3, r2
 800640a:	001a      	movs	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	22f0      	movs	r2, #240	; 0xf0
 800641a:	4393      	bics	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	220a      	movs	r2, #10
 800642c:	4393      	bics	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	621a      	str	r2, [r3, #32]
}
 8006444:	46c0      	nop			; (mov r8, r8)
 8006446:	46bd      	mov	sp, r7
 8006448:	b006      	add	sp, #24
 800644a:	bd80      	pop	{r7, pc}

0800644c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	2210      	movs	r2, #16
 800645e:	4393      	bics	r3, r2
 8006460:	001a      	movs	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	4a0d      	ldr	r2, [pc, #52]	; (80064ac <TIM_TI2_ConfigInputStage+0x60>)
 8006476:	4013      	ands	r3, r2
 8006478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	031b      	lsls	r3, r3, #12
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	22a0      	movs	r2, #160	; 0xa0
 8006488:	4393      	bics	r3, r2
 800648a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	621a      	str	r2, [r3, #32]
}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b006      	add	sp, #24
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	ffff0fff 	.word	0xffff0fff

080064b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2270      	movs	r2, #112	; 0x70
 80064c4:	4393      	bics	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	2207      	movs	r2, #7
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	609a      	str	r2, [r3, #8]
}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	46bd      	mov	sp, r7
 80064de:	b004      	add	sp, #16
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	4a09      	ldr	r2, [pc, #36]	; (8006520 <TIM_ETR_SetConfig+0x3c>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	021a      	lsls	r2, r3, #8
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	431a      	orrs	r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4313      	orrs	r3, r2
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	609a      	str	r2, [r3, #8]
}
 8006518:	46c0      	nop			; (mov r8, r8)
 800651a:	46bd      	mov	sp, r7
 800651c:	b006      	add	sp, #24
 800651e:	bd80      	pop	{r7, pc}
 8006520:	ffff00ff 	.word	0xffff00ff

08006524 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	221f      	movs	r2, #31
 8006534:	4013      	ands	r3, r2
 8006536:	2201      	movs	r2, #1
 8006538:	409a      	lsls	r2, r3
 800653a:	0013      	movs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	43d2      	mvns	r2, r2
 8006546:	401a      	ands	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a1a      	ldr	r2, [r3, #32]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	211f      	movs	r1, #31
 8006554:	400b      	ands	r3, r1
 8006556:	6879      	ldr	r1, [r7, #4]
 8006558:	4099      	lsls	r1, r3
 800655a:	000b      	movs	r3, r1
 800655c:	431a      	orrs	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	621a      	str	r2, [r3, #32]
}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	46bd      	mov	sp, r7
 8006566:	b006      	add	sp, #24
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	223c      	movs	r2, #60	; 0x3c
 800657a:	5c9b      	ldrb	r3, [r3, r2]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006580:	2302      	movs	r3, #2
 8006582:	e041      	b.n	8006608 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	223c      	movs	r2, #60	; 0x3c
 8006588:	2101      	movs	r1, #1
 800658a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	223d      	movs	r2, #61	; 0x3d
 8006590:	2102      	movs	r1, #2
 8006592:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2270      	movs	r2, #112	; 0x70
 80065a8:	4393      	bics	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a13      	ldr	r2, [pc, #76]	; (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d009      	beq.n	80065dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a11      	ldr	r2, [pc, #68]	; (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a10      	ldr	r2, [pc, #64]	; (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d10c      	bne.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2280      	movs	r2, #128	; 0x80
 80065e0:	4393      	bics	r3, r2
 80065e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	223d      	movs	r2, #61	; 0x3d
 80065fa:	2101      	movs	r1, #1
 80065fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	223c      	movs	r2, #60	; 0x3c
 8006602:	2100      	movs	r1, #0
 8006604:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	0018      	movs	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	b004      	add	sp, #16
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40012c00 	.word	0x40012c00
 8006614:	40000400 	.word	0x40000400
 8006618:	40014000 	.word	0x40014000

0800661c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e044      	b.n	80066b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006632:	2b00      	cmp	r3, #0
 8006634:	d107      	bne.n	8006646 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2270      	movs	r2, #112	; 0x70
 800663a:	2100      	movs	r1, #0
 800663c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f7fc fd5b 	bl	80030fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2224      	movs	r2, #36	; 0x24
 800664a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2101      	movs	r1, #1
 8006658:	438a      	bics	r2, r1
 800665a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	0018      	movs	r0, r3
 8006660:	f000 f830 	bl	80066c4 <UART_SetConfig>
 8006664:	0003      	movs	r3, r0
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e024      	b.n	80066b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	0018      	movs	r0, r3
 800667a:	f000 f9a9 	bl	80069d0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	490d      	ldr	r1, [pc, #52]	; (80066c0 <HAL_UART_Init+0xa4>)
 800668a:	400a      	ands	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2108      	movs	r1, #8
 800669a:	438a      	bics	r2, r1
 800669c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2101      	movs	r1, #1
 80066aa:	430a      	orrs	r2, r1
 80066ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	0018      	movs	r0, r3
 80066b2:	f000 fa41 	bl	8006b38 <UART_CheckIdleState>
 80066b6:	0003      	movs	r3, r0
}
 80066b8:	0018      	movs	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b002      	add	sp, #8
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	fffff7ff 	.word	0xfffff7ff

080066c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80066d0:	2317      	movs	r3, #23
 80066d2:	18fb      	adds	r3, r7, r3
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4aad      	ldr	r2, [pc, #692]	; (80069ac <UART_SetConfig+0x2e8>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	0019      	movs	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	430a      	orrs	r2, r1
 8006704:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4aa8      	ldr	r2, [pc, #672]	; (80069b0 <UART_SetConfig+0x2ec>)
 800670e:	4013      	ands	r3, r2
 8006710:	0019      	movs	r1, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	4a9f      	ldr	r2, [pc, #636]	; (80069b4 <UART_SetConfig+0x2f0>)
 8006736:	4013      	ands	r3, r2
 8006738:	0019      	movs	r1, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	430a      	orrs	r2, r1
 8006742:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a9b      	ldr	r2, [pc, #620]	; (80069b8 <UART_SetConfig+0x2f4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d125      	bne.n	800679a <UART_SetConfig+0xd6>
 800674e:	4b9b      	ldr	r3, [pc, #620]	; (80069bc <UART_SetConfig+0x2f8>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	2203      	movs	r2, #3
 8006754:	4013      	ands	r3, r2
 8006756:	2b01      	cmp	r3, #1
 8006758:	d00f      	beq.n	800677a <UART_SetConfig+0xb6>
 800675a:	d304      	bcc.n	8006766 <UART_SetConfig+0xa2>
 800675c:	2b02      	cmp	r3, #2
 800675e:	d011      	beq.n	8006784 <UART_SetConfig+0xc0>
 8006760:	2b03      	cmp	r3, #3
 8006762:	d005      	beq.n	8006770 <UART_SetConfig+0xac>
 8006764:	e013      	b.n	800678e <UART_SetConfig+0xca>
 8006766:	231f      	movs	r3, #31
 8006768:	18fb      	adds	r3, r7, r3
 800676a:	2200      	movs	r2, #0
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	e022      	b.n	80067b6 <UART_SetConfig+0xf2>
 8006770:	231f      	movs	r3, #31
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	2202      	movs	r2, #2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	e01d      	b.n	80067b6 <UART_SetConfig+0xf2>
 800677a:	231f      	movs	r3, #31
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	2204      	movs	r2, #4
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	e018      	b.n	80067b6 <UART_SetConfig+0xf2>
 8006784:	231f      	movs	r3, #31
 8006786:	18fb      	adds	r3, r7, r3
 8006788:	2208      	movs	r2, #8
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	e013      	b.n	80067b6 <UART_SetConfig+0xf2>
 800678e:	231f      	movs	r3, #31
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	2210      	movs	r2, #16
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	e00d      	b.n	80067b6 <UART_SetConfig+0xf2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a88      	ldr	r2, [pc, #544]	; (80069c0 <UART_SetConfig+0x2fc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d104      	bne.n	80067ae <UART_SetConfig+0xea>
 80067a4:	231f      	movs	r3, #31
 80067a6:	18fb      	adds	r3, r7, r3
 80067a8:	2200      	movs	r2, #0
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	e003      	b.n	80067b6 <UART_SetConfig+0xf2>
 80067ae:	231f      	movs	r3, #31
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	2210      	movs	r2, #16
 80067b4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69da      	ldr	r2, [r3, #28]
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	429a      	cmp	r2, r3
 80067c0:	d000      	beq.n	80067c4 <UART_SetConfig+0x100>
 80067c2:	e07d      	b.n	80068c0 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 80067c4:	231f      	movs	r3, #31
 80067c6:	18fb      	adds	r3, r7, r3
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d01c      	beq.n	8006808 <UART_SetConfig+0x144>
 80067ce:	dc02      	bgt.n	80067d6 <UART_SetConfig+0x112>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <UART_SetConfig+0x11c>
 80067d4:	e04b      	b.n	800686e <UART_SetConfig+0x1aa>
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d025      	beq.n	8006826 <UART_SetConfig+0x162>
 80067da:	2b08      	cmp	r3, #8
 80067dc:	d037      	beq.n	800684e <UART_SetConfig+0x18a>
 80067de:	e046      	b.n	800686e <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e0:	f7ff f88e 	bl	8005900 <HAL_RCC_GetPCLK1Freq>
 80067e4:	0003      	movs	r3, r0
 80067e6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	005a      	lsls	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	085b      	lsrs	r3, r3, #1
 80067f2:	18d2      	adds	r2, r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	0019      	movs	r1, r3
 80067fa:	0010      	movs	r0, r2
 80067fc:	f7f9 fc96 	bl	800012c <__udivsi3>
 8006800:	0003      	movs	r3, r0
 8006802:	b29b      	uxth	r3, r3
 8006804:	61bb      	str	r3, [r7, #24]
        break;
 8006806:	e037      	b.n	8006878 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	4a6d      	ldr	r2, [pc, #436]	; (80069c4 <UART_SetConfig+0x300>)
 8006810:	189a      	adds	r2, r3, r2
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	0019      	movs	r1, r3
 8006818:	0010      	movs	r0, r2
 800681a:	f7f9 fc87 	bl	800012c <__udivsi3>
 800681e:	0003      	movs	r3, r0
 8006820:	b29b      	uxth	r3, r3
 8006822:	61bb      	str	r3, [r7, #24]
        break;
 8006824:	e028      	b.n	8006878 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006826:	f7fe fffd 	bl	8005824 <HAL_RCC_GetSysClockFreq>
 800682a:	0003      	movs	r3, r0
 800682c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	005a      	lsls	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	18d2      	adds	r2, r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	0019      	movs	r1, r3
 8006840:	0010      	movs	r0, r2
 8006842:	f7f9 fc73 	bl	800012c <__udivsi3>
 8006846:	0003      	movs	r3, r0
 8006848:	b29b      	uxth	r3, r3
 800684a:	61bb      	str	r3, [r7, #24]
        break;
 800684c:	e014      	b.n	8006878 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	2280      	movs	r2, #128	; 0x80
 8006856:	0252      	lsls	r2, r2, #9
 8006858:	189a      	adds	r2, r3, r2
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	0019      	movs	r1, r3
 8006860:	0010      	movs	r0, r2
 8006862:	f7f9 fc63 	bl	800012c <__udivsi3>
 8006866:	0003      	movs	r3, r0
 8006868:	b29b      	uxth	r3, r3
 800686a:	61bb      	str	r3, [r7, #24]
        break;
 800686c:	e004      	b.n	8006878 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 800686e:	2317      	movs	r3, #23
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	2201      	movs	r2, #1
 8006874:	701a      	strb	r2, [r3, #0]
        break;
 8006876:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2b0f      	cmp	r3, #15
 800687c:	d91b      	bls.n	80068b6 <UART_SetConfig+0x1f2>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	4a51      	ldr	r2, [pc, #324]	; (80069c8 <UART_SetConfig+0x304>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d817      	bhi.n	80068b6 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	b29a      	uxth	r2, r3
 800688a:	200a      	movs	r0, #10
 800688c:	183b      	adds	r3, r7, r0
 800688e:	210f      	movs	r1, #15
 8006890:	438a      	bics	r2, r1
 8006892:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	2207      	movs	r2, #7
 800689c:	4013      	ands	r3, r2
 800689e:	b299      	uxth	r1, r3
 80068a0:	183b      	adds	r3, r7, r0
 80068a2:	183a      	adds	r2, r7, r0
 80068a4:	8812      	ldrh	r2, [r2, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	183a      	adds	r2, r7, r0
 80068b0:	8812      	ldrh	r2, [r2, #0]
 80068b2:	60da      	str	r2, [r3, #12]
 80068b4:	e06c      	b.n	8006990 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80068b6:	2317      	movs	r3, #23
 80068b8:	18fb      	adds	r3, r7, r3
 80068ba:	2201      	movs	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	e067      	b.n	8006990 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 80068c0:	231f      	movs	r3, #31
 80068c2:	18fb      	adds	r3, r7, r3
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d01b      	beq.n	8006902 <UART_SetConfig+0x23e>
 80068ca:	dc02      	bgt.n	80068d2 <UART_SetConfig+0x20e>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <UART_SetConfig+0x218>
 80068d0:	e049      	b.n	8006966 <UART_SetConfig+0x2a2>
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d024      	beq.n	8006920 <UART_SetConfig+0x25c>
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d035      	beq.n	8006946 <UART_SetConfig+0x282>
 80068da:	e044      	b.n	8006966 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068dc:	f7ff f810 	bl	8005900 <HAL_RCC_GetPCLK1Freq>
 80068e0:	0003      	movs	r3, r0
 80068e2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	085a      	lsrs	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	18d2      	adds	r2, r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	0019      	movs	r1, r3
 80068f4:	0010      	movs	r0, r2
 80068f6:	f7f9 fc19 	bl	800012c <__udivsi3>
 80068fa:	0003      	movs	r3, r0
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	61bb      	str	r3, [r7, #24]
        break;
 8006900:	e036      	b.n	8006970 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	4a30      	ldr	r2, [pc, #192]	; (80069cc <UART_SetConfig+0x308>)
 800690a:	189a      	adds	r2, r3, r2
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	0019      	movs	r1, r3
 8006912:	0010      	movs	r0, r2
 8006914:	f7f9 fc0a 	bl	800012c <__udivsi3>
 8006918:	0003      	movs	r3, r0
 800691a:	b29b      	uxth	r3, r3
 800691c:	61bb      	str	r3, [r7, #24]
        break;
 800691e:	e027      	b.n	8006970 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006920:	f7fe ff80 	bl	8005824 <HAL_RCC_GetSysClockFreq>
 8006924:	0003      	movs	r3, r0
 8006926:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	085a      	lsrs	r2, r3, #1
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	18d2      	adds	r2, r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	0019      	movs	r1, r3
 8006938:	0010      	movs	r0, r2
 800693a:	f7f9 fbf7 	bl	800012c <__udivsi3>
 800693e:	0003      	movs	r3, r0
 8006940:	b29b      	uxth	r3, r3
 8006942:	61bb      	str	r3, [r7, #24]
        break;
 8006944:	e014      	b.n	8006970 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	2280      	movs	r2, #128	; 0x80
 800694e:	0212      	lsls	r2, r2, #8
 8006950:	189a      	adds	r2, r3, r2
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	0019      	movs	r1, r3
 8006958:	0010      	movs	r0, r2
 800695a:	f7f9 fbe7 	bl	800012c <__udivsi3>
 800695e:	0003      	movs	r3, r0
 8006960:	b29b      	uxth	r3, r3
 8006962:	61bb      	str	r3, [r7, #24]
        break;
 8006964:	e004      	b.n	8006970 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8006966:	2317      	movs	r3, #23
 8006968:	18fb      	adds	r3, r7, r3
 800696a:	2201      	movs	r2, #1
 800696c:	701a      	strb	r2, [r3, #0]
        break;
 800696e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2b0f      	cmp	r3, #15
 8006974:	d908      	bls.n	8006988 <UART_SetConfig+0x2c4>
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	4a13      	ldr	r2, [pc, #76]	; (80069c8 <UART_SetConfig+0x304>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d804      	bhi.n	8006988 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	60da      	str	r2, [r3, #12]
 8006986:	e003      	b.n	8006990 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006988:	2317      	movs	r3, #23
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	2201      	movs	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800699c:	2317      	movs	r3, #23
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	781b      	ldrb	r3, [r3, #0]
}
 80069a2:	0018      	movs	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	b008      	add	sp, #32
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	ffff69f3 	.word	0xffff69f3
 80069b0:	ffffcfff 	.word	0xffffcfff
 80069b4:	fffff4ff 	.word	0xfffff4ff
 80069b8:	40013800 	.word	0x40013800
 80069bc:	40021000 	.word	0x40021000
 80069c0:	40004400 	.word	0x40004400
 80069c4:	00f42400 	.word	0x00f42400
 80069c8:	0000ffff 	.word	0x0000ffff
 80069cc:	007a1200 	.word	0x007a1200

080069d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	2201      	movs	r2, #1
 80069de:	4013      	ands	r3, r2
 80069e0:	d00b      	beq.n	80069fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a4a      	ldr	r2, [pc, #296]	; (8006b14 <UART_AdvFeatureConfig+0x144>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	0019      	movs	r1, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2202      	movs	r2, #2
 8006a00:	4013      	ands	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	4a43      	ldr	r2, [pc, #268]	; (8006b18 <UART_AdvFeatureConfig+0x148>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	0019      	movs	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	2204      	movs	r2, #4
 8006a22:	4013      	ands	r3, r2
 8006a24:	d00b      	beq.n	8006a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4a3b      	ldr	r2, [pc, #236]	; (8006b1c <UART_AdvFeatureConfig+0x14c>)
 8006a2e:	4013      	ands	r3, r2
 8006a30:	0019      	movs	r1, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	2208      	movs	r2, #8
 8006a44:	4013      	ands	r3, r2
 8006a46:	d00b      	beq.n	8006a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4a34      	ldr	r2, [pc, #208]	; (8006b20 <UART_AdvFeatureConfig+0x150>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	0019      	movs	r1, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	2210      	movs	r2, #16
 8006a66:	4013      	ands	r3, r2
 8006a68:	d00b      	beq.n	8006a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4a2c      	ldr	r2, [pc, #176]	; (8006b24 <UART_AdvFeatureConfig+0x154>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	0019      	movs	r1, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	2220      	movs	r2, #32
 8006a88:	4013      	ands	r3, r2
 8006a8a:	d00b      	beq.n	8006aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	4a25      	ldr	r2, [pc, #148]	; (8006b28 <UART_AdvFeatureConfig+0x158>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	0019      	movs	r1, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	2240      	movs	r2, #64	; 0x40
 8006aaa:	4013      	ands	r3, r2
 8006aac:	d01d      	beq.n	8006aea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	4a1d      	ldr	r2, [pc, #116]	; (8006b2c <UART_AdvFeatureConfig+0x15c>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	0019      	movs	r1, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aca:	2380      	movs	r3, #128	; 0x80
 8006acc:	035b      	lsls	r3, r3, #13
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d10b      	bne.n	8006aea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	4a15      	ldr	r2, [pc, #84]	; (8006b30 <UART_AdvFeatureConfig+0x160>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	0019      	movs	r1, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	2280      	movs	r2, #128	; 0x80
 8006af0:	4013      	ands	r3, r2
 8006af2:	d00b      	beq.n	8006b0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	4a0e      	ldr	r2, [pc, #56]	; (8006b34 <UART_AdvFeatureConfig+0x164>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	0019      	movs	r1, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }
}
 8006b0c:	46c0      	nop			; (mov r8, r8)
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b002      	add	sp, #8
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	fffdffff 	.word	0xfffdffff
 8006b18:	fffeffff 	.word	0xfffeffff
 8006b1c:	fffbffff 	.word	0xfffbffff
 8006b20:	ffff7fff 	.word	0xffff7fff
 8006b24:	ffffefff 	.word	0xffffefff
 8006b28:	ffffdfff 	.word	0xffffdfff
 8006b2c:	ffefffff 	.word	0xffefffff
 8006b30:	ff9fffff 	.word	0xff9fffff
 8006b34:	fff7ffff 	.word	0xfff7ffff

08006b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006b46:	f7fc fc39 	bl	80033bc <HAL_GetTick>
 8006b4a:	0003      	movs	r3, r0
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2208      	movs	r2, #8
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d10d      	bne.n	8006b78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	2380      	movs	r3, #128	; 0x80
 8006b60:	0399      	lsls	r1, r3, #14
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4b16      	ldr	r3, [pc, #88]	; (8006bc0 <UART_CheckIdleState+0x88>)
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	0013      	movs	r3, r2
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f000 f82a 	bl	8006bc4 <UART_WaitOnFlagUntilTimeout>
 8006b70:	1e03      	subs	r3, r0, #0
 8006b72:	d001      	beq.n	8006b78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e01f      	b.n	8006bb8 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2204      	movs	r2, #4
 8006b80:	4013      	ands	r3, r2
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d10d      	bne.n	8006ba2 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	2380      	movs	r3, #128	; 0x80
 8006b8a:	03d9      	lsls	r1, r3, #15
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <UART_CheckIdleState+0x88>)
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	0013      	movs	r3, r2
 8006b94:	2200      	movs	r2, #0
 8006b96:	f000 f815 	bl	8006bc4 <UART_WaitOnFlagUntilTimeout>
 8006b9a:	1e03      	subs	r3, r0, #0
 8006b9c:	d001      	beq.n	8006ba2 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e00a      	b.n	8006bb8 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2270      	movs	r2, #112	; 0x70
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	0018      	movs	r0, r3
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b004      	add	sp, #16
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	01ffffff 	.word	0x01ffffff

08006bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	1dfb      	adds	r3, r7, #7
 8006bd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd4:	e05d      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	d05a      	beq.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bdc:	f7fc fbee 	bl	80033bc <HAL_GetTick>
 8006be0:	0002      	movs	r2, r0
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d11b      	bne.n	8006c2a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	492f      	ldr	r1, [pc, #188]	; (8006cbc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006bfe:	400a      	ands	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	438a      	bics	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2220      	movs	r2, #32
 8006c16:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2270      	movs	r2, #112	; 0x70
 8006c22:	2100      	movs	r1, #0
 8006c24:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e043      	b.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2204      	movs	r2, #4
 8006c32:	4013      	ands	r3, r2
 8006c34:	d02d      	beq.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	2380      	movs	r3, #128	; 0x80
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	401a      	ands	r2, r3
 8006c42:	2380      	movs	r3, #128	; 0x80
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d123      	bne.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2280      	movs	r2, #128	; 0x80
 8006c50:	0112      	lsls	r2, r2, #4
 8006c52:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4917      	ldr	r1, [pc, #92]	; (8006cbc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006c60:	400a      	ands	r2, r1
 8006c62:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2101      	movs	r1, #1
 8006c70:	438a      	bics	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2220      	movs	r2, #32
 8006c78:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2220      	movs	r2, #32
 8006c84:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2270      	movs	r2, #112	; 0x70
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e00f      	b.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	425a      	negs	r2, r3
 8006ca2:	4153      	adcs	r3, r2
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	001a      	movs	r2, r3
 8006ca8:	1dfb      	adds	r3, r7, #7
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d092      	beq.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	b004      	add	sp, #16
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	fffffe5f 	.word	0xfffffe5f

08006cc0 <__errno>:
 8006cc0:	4b01      	ldr	r3, [pc, #4]	; (8006cc8 <__errno+0x8>)
 8006cc2:	6818      	ldr	r0, [r3, #0]
 8006cc4:	4770      	bx	lr
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	20000014 	.word	0x20000014

08006ccc <__libc_init_array>:
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	2600      	movs	r6, #0
 8006cd0:	4d0c      	ldr	r5, [pc, #48]	; (8006d04 <__libc_init_array+0x38>)
 8006cd2:	4c0d      	ldr	r4, [pc, #52]	; (8006d08 <__libc_init_array+0x3c>)
 8006cd4:	1b64      	subs	r4, r4, r5
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	42a6      	cmp	r6, r4
 8006cda:	d109      	bne.n	8006cf0 <__libc_init_array+0x24>
 8006cdc:	2600      	movs	r6, #0
 8006cde:	f001 fd81 	bl	80087e4 <_init>
 8006ce2:	4d0a      	ldr	r5, [pc, #40]	; (8006d0c <__libc_init_array+0x40>)
 8006ce4:	4c0a      	ldr	r4, [pc, #40]	; (8006d10 <__libc_init_array+0x44>)
 8006ce6:	1b64      	subs	r4, r4, r5
 8006ce8:	10a4      	asrs	r4, r4, #2
 8006cea:	42a6      	cmp	r6, r4
 8006cec:	d105      	bne.n	8006cfa <__libc_init_array+0x2e>
 8006cee:	bd70      	pop	{r4, r5, r6, pc}
 8006cf0:	00b3      	lsls	r3, r6, #2
 8006cf2:	58eb      	ldr	r3, [r5, r3]
 8006cf4:	4798      	blx	r3
 8006cf6:	3601      	adds	r6, #1
 8006cf8:	e7ee      	b.n	8006cd8 <__libc_init_array+0xc>
 8006cfa:	00b3      	lsls	r3, r6, #2
 8006cfc:	58eb      	ldr	r3, [r5, r3]
 8006cfe:	4798      	blx	r3
 8006d00:	3601      	adds	r6, #1
 8006d02:	e7f2      	b.n	8006cea <__libc_init_array+0x1e>
 8006d04:	080098a0 	.word	0x080098a0
 8006d08:	080098a0 	.word	0x080098a0
 8006d0c:	080098a0 	.word	0x080098a0
 8006d10:	080098a4 	.word	0x080098a4

08006d14 <memset>:
 8006d14:	0003      	movs	r3, r0
 8006d16:	1812      	adds	r2, r2, r0
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d100      	bne.n	8006d1e <memset+0xa>
 8006d1c:	4770      	bx	lr
 8006d1e:	7019      	strb	r1, [r3, #0]
 8006d20:	3301      	adds	r3, #1
 8006d22:	e7f9      	b.n	8006d18 <memset+0x4>

08006d24 <__cvt>:
 8006d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d26:	b08b      	sub	sp, #44	; 0x2c
 8006d28:	0014      	movs	r4, r2
 8006d2a:	1e1d      	subs	r5, r3, #0
 8006d2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006d2e:	da53      	bge.n	8006dd8 <__cvt+0xb4>
 8006d30:	2480      	movs	r4, #128	; 0x80
 8006d32:	0624      	lsls	r4, r4, #24
 8006d34:	191b      	adds	r3, r3, r4
 8006d36:	001d      	movs	r5, r3
 8006d38:	0014      	movs	r4, r2
 8006d3a:	232d      	movs	r3, #45	; 0x2d
 8006d3c:	700b      	strb	r3, [r1, #0]
 8006d3e:	2320      	movs	r3, #32
 8006d40:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006d42:	2203      	movs	r2, #3
 8006d44:	439e      	bics	r6, r3
 8006d46:	2e46      	cmp	r6, #70	; 0x46
 8006d48:	d007      	beq.n	8006d5a <__cvt+0x36>
 8006d4a:	0033      	movs	r3, r6
 8006d4c:	3b45      	subs	r3, #69	; 0x45
 8006d4e:	4259      	negs	r1, r3
 8006d50:	414b      	adcs	r3, r1
 8006d52:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006d54:	3a01      	subs	r2, #1
 8006d56:	18cb      	adds	r3, r1, r3
 8006d58:	9310      	str	r3, [sp, #64]	; 0x40
 8006d5a:	ab09      	add	r3, sp, #36	; 0x24
 8006d5c:	9304      	str	r3, [sp, #16]
 8006d5e:	ab08      	add	r3, sp, #32
 8006d60:	9303      	str	r3, [sp, #12]
 8006d62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d64:	9200      	str	r2, [sp, #0]
 8006d66:	9302      	str	r3, [sp, #8]
 8006d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d6a:	0022      	movs	r2, r4
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	002b      	movs	r3, r5
 8006d70:	f000 fbb4 	bl	80074dc <_dtoa_r>
 8006d74:	0007      	movs	r7, r0
 8006d76:	2e47      	cmp	r6, #71	; 0x47
 8006d78:	d102      	bne.n	8006d80 <__cvt+0x5c>
 8006d7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d7c:	07db      	lsls	r3, r3, #31
 8006d7e:	d524      	bpl.n	8006dca <__cvt+0xa6>
 8006d80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	9307      	str	r3, [sp, #28]
 8006d86:	2e46      	cmp	r6, #70	; 0x46
 8006d88:	d114      	bne.n	8006db4 <__cvt+0x90>
 8006d8a:	783b      	ldrb	r3, [r7, #0]
 8006d8c:	2b30      	cmp	r3, #48	; 0x30
 8006d8e:	d10c      	bne.n	8006daa <__cvt+0x86>
 8006d90:	2200      	movs	r2, #0
 8006d92:	2300      	movs	r3, #0
 8006d94:	0020      	movs	r0, r4
 8006d96:	0029      	movs	r1, r5
 8006d98:	f7f9 fb4e 	bl	8000438 <__aeabi_dcmpeq>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d104      	bne.n	8006daa <__cvt+0x86>
 8006da0:	2301      	movs	r3, #1
 8006da2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dac:	9a07      	ldr	r2, [sp, #28]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	18d3      	adds	r3, r2, r3
 8006db2:	9307      	str	r3, [sp, #28]
 8006db4:	2200      	movs	r2, #0
 8006db6:	2300      	movs	r3, #0
 8006db8:	0020      	movs	r0, r4
 8006dba:	0029      	movs	r1, r5
 8006dbc:	f7f9 fb3c 	bl	8000438 <__aeabi_dcmpeq>
 8006dc0:	2230      	movs	r2, #48	; 0x30
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d00d      	beq.n	8006de2 <__cvt+0xbe>
 8006dc6:	9b07      	ldr	r3, [sp, #28]
 8006dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dca:	0038      	movs	r0, r7
 8006dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006dd0:	1bdb      	subs	r3, r3, r7
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	b00b      	add	sp, #44	; 0x2c
 8006dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e7af      	b.n	8006d3c <__cvt+0x18>
 8006ddc:	1c59      	adds	r1, r3, #1
 8006dde:	9109      	str	r1, [sp, #36]	; 0x24
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de4:	9907      	ldr	r1, [sp, #28]
 8006de6:	428b      	cmp	r3, r1
 8006de8:	d3f8      	bcc.n	8006ddc <__cvt+0xb8>
 8006dea:	e7ee      	b.n	8006dca <__cvt+0xa6>

08006dec <__exponent>:
 8006dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dee:	1c83      	adds	r3, r0, #2
 8006df0:	b085      	sub	sp, #20
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	0006      	movs	r6, r0
 8006df6:	000c      	movs	r4, r1
 8006df8:	7002      	strb	r2, [r0, #0]
 8006dfa:	232b      	movs	r3, #43	; 0x2b
 8006dfc:	2900      	cmp	r1, #0
 8006dfe:	da01      	bge.n	8006e04 <__exponent+0x18>
 8006e00:	232d      	movs	r3, #45	; 0x2d
 8006e02:	424c      	negs	r4, r1
 8006e04:	7073      	strb	r3, [r6, #1]
 8006e06:	2c09      	cmp	r4, #9
 8006e08:	dd22      	ble.n	8006e50 <__exponent+0x64>
 8006e0a:	ab02      	add	r3, sp, #8
 8006e0c:	1ddd      	adds	r5, r3, #7
 8006e0e:	0020      	movs	r0, r4
 8006e10:	210a      	movs	r1, #10
 8006e12:	f7f9 fafb 	bl	800040c <__aeabi_idivmod>
 8006e16:	1e6f      	subs	r7, r5, #1
 8006e18:	3130      	adds	r1, #48	; 0x30
 8006e1a:	7039      	strb	r1, [r7, #0]
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	210a      	movs	r1, #10
 8006e20:	f7f9 fa0e 	bl	8000240 <__divsi3>
 8006e24:	0004      	movs	r4, r0
 8006e26:	2809      	cmp	r0, #9
 8006e28:	dc0b      	bgt.n	8006e42 <__exponent+0x56>
 8006e2a:	3d02      	subs	r5, #2
 8006e2c:	3430      	adds	r4, #48	; 0x30
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	702c      	strb	r4, [r5, #0]
 8006e32:	aa02      	add	r2, sp, #8
 8006e34:	3207      	adds	r2, #7
 8006e36:	0018      	movs	r0, r3
 8006e38:	42aa      	cmp	r2, r5
 8006e3a:	d804      	bhi.n	8006e46 <__exponent+0x5a>
 8006e3c:	1b80      	subs	r0, r0, r6
 8006e3e:	b005      	add	sp, #20
 8006e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e42:	003d      	movs	r5, r7
 8006e44:	e7e3      	b.n	8006e0e <__exponent+0x22>
 8006e46:	782a      	ldrb	r2, [r5, #0]
 8006e48:	3501      	adds	r5, #1
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	e7f0      	b.n	8006e32 <__exponent+0x46>
 8006e50:	2330      	movs	r3, #48	; 0x30
 8006e52:	18e4      	adds	r4, r4, r3
 8006e54:	70b3      	strb	r3, [r6, #2]
 8006e56:	1d30      	adds	r0, r6, #4
 8006e58:	70f4      	strb	r4, [r6, #3]
 8006e5a:	e7ef      	b.n	8006e3c <__exponent+0x50>

08006e5c <_printf_float>:
 8006e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e5e:	b095      	sub	sp, #84	; 0x54
 8006e60:	000c      	movs	r4, r1
 8006e62:	920a      	str	r2, [sp, #40]	; 0x28
 8006e64:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e66:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006e68:	9009      	str	r0, [sp, #36]	; 0x24
 8006e6a:	f001 f917 	bl	800809c <_localeconv_r>
 8006e6e:	6803      	ldr	r3, [r0, #0]
 8006e70:	0018      	movs	r0, r3
 8006e72:	930c      	str	r3, [sp, #48]	; 0x30
 8006e74:	f7f9 f948 	bl	8000108 <strlen>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	900e      	str	r0, [sp, #56]	; 0x38
 8006e80:	930d      	str	r3, [sp, #52]	; 0x34
 8006e82:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e84:	7e27      	ldrb	r7, [r4, #24]
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	2207      	movs	r2, #7
 8006e8a:	05c9      	lsls	r1, r1, #23
 8006e8c:	d545      	bpl.n	8006f1a <_printf_float+0xbe>
 8006e8e:	189b      	adds	r3, r3, r2
 8006e90:	4393      	bics	r3, r2
 8006e92:	001a      	movs	r2, r3
 8006e94:	3208      	adds	r2, #8
 8006e96:	602a      	str	r2, [r5, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	64a2      	str	r2, [r4, #72]	; 0x48
 8006e9e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006ea4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8006ea6:	006b      	lsls	r3, r5, #1
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eac:	4252      	negs	r2, r2
 8006eae:	4bac      	ldr	r3, [pc, #688]	; (8007160 <_printf_float+0x304>)
 8006eb0:	0030      	movs	r0, r6
 8006eb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006eb4:	f7fa ffce 	bl	8001e54 <__aeabi_dcmpun>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d130      	bne.n	8006f1e <_printf_float+0xc2>
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	4ba8      	ldr	r3, [pc, #672]	; (8007160 <_printf_float+0x304>)
 8006ec0:	4252      	negs	r2, r2
 8006ec2:	0030      	movs	r0, r6
 8006ec4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ec6:	f7f9 fac7 	bl	8000458 <__aeabi_dcmple>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d127      	bne.n	8006f1e <_printf_float+0xc2>
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	0030      	movs	r0, r6
 8006ed4:	0029      	movs	r1, r5
 8006ed6:	f7f9 fab5 	bl	8000444 <__aeabi_dcmplt>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d003      	beq.n	8006ee6 <_printf_float+0x8a>
 8006ede:	0023      	movs	r3, r4
 8006ee0:	222d      	movs	r2, #45	; 0x2d
 8006ee2:	3343      	adds	r3, #67	; 0x43
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	4d9f      	ldr	r5, [pc, #636]	; (8007164 <_printf_float+0x308>)
 8006ee8:	2f47      	cmp	r7, #71	; 0x47
 8006eea:	d800      	bhi.n	8006eee <_printf_float+0x92>
 8006eec:	4d9e      	ldr	r5, [pc, #632]	; (8007168 <_printf_float+0x30c>)
 8006eee:	2303      	movs	r3, #3
 8006ef0:	2600      	movs	r6, #0
 8006ef2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ef4:	6123      	str	r3, [r4, #16]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	439a      	bics	r2, r3
 8006efa:	6022      	str	r2, [r4, #0]
 8006efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006efe:	aa13      	add	r2, sp, #76	; 0x4c
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	0021      	movs	r1, r4
 8006f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f08:	f000 f9f4 	bl	80072f4 <_printf_common>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d000      	beq.n	8006f12 <_printf_float+0xb6>
 8006f10:	e093      	b.n	800703a <_printf_float+0x1de>
 8006f12:	2001      	movs	r0, #1
 8006f14:	4240      	negs	r0, r0
 8006f16:	b015      	add	sp, #84	; 0x54
 8006f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f1a:	3307      	adds	r3, #7
 8006f1c:	e7b8      	b.n	8006e90 <_printf_float+0x34>
 8006f1e:	0032      	movs	r2, r6
 8006f20:	002b      	movs	r3, r5
 8006f22:	0030      	movs	r0, r6
 8006f24:	0029      	movs	r1, r5
 8006f26:	f7fa ff95 	bl	8001e54 <__aeabi_dcmpun>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d004      	beq.n	8006f38 <_printf_float+0xdc>
 8006f2e:	4d8f      	ldr	r5, [pc, #572]	; (800716c <_printf_float+0x310>)
 8006f30:	2f47      	cmp	r7, #71	; 0x47
 8006f32:	d8dc      	bhi.n	8006eee <_printf_float+0x92>
 8006f34:	4d8e      	ldr	r5, [pc, #568]	; (8007170 <_printf_float+0x314>)
 8006f36:	e7da      	b.n	8006eee <_printf_float+0x92>
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f3c:	6862      	ldr	r2, [r4, #4]
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	430b      	orrs	r3, r1
 8006f42:	1c51      	adds	r1, r2, #1
 8006f44:	d143      	bne.n	8006fce <_printf_float+0x172>
 8006f46:	3207      	adds	r2, #7
 8006f48:	6062      	str	r2, [r4, #4]
 8006f4a:	aa12      	add	r2, sp, #72	; 0x48
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	9205      	str	r2, [sp, #20]
 8006f50:	aa11      	add	r2, sp, #68	; 0x44
 8006f52:	9203      	str	r2, [sp, #12]
 8006f54:	2223      	movs	r2, #35	; 0x23
 8006f56:	6023      	str	r3, [r4, #0]
 8006f58:	9106      	str	r1, [sp, #24]
 8006f5a:	9301      	str	r3, [sp, #4]
 8006f5c:	a908      	add	r1, sp, #32
 8006f5e:	6863      	ldr	r3, [r4, #4]
 8006f60:	1852      	adds	r2, r2, r1
 8006f62:	9202      	str	r2, [sp, #8]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	0032      	movs	r2, r6
 8006f68:	002b      	movs	r3, r5
 8006f6a:	9704      	str	r7, [sp, #16]
 8006f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f6e:	f7ff fed9 	bl	8006d24 <__cvt>
 8006f72:	2320      	movs	r3, #32
 8006f74:	003a      	movs	r2, r7
 8006f76:	0005      	movs	r5, r0
 8006f78:	439a      	bics	r2, r3
 8006f7a:	2a47      	cmp	r2, #71	; 0x47
 8006f7c:	d107      	bne.n	8006f8e <_printf_float+0x132>
 8006f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f80:	1cda      	adds	r2, r3, #3
 8006f82:	db02      	blt.n	8006f8a <_printf_float+0x12e>
 8006f84:	6862      	ldr	r2, [r4, #4]
 8006f86:	4293      	cmp	r3, r2
 8006f88:	dd45      	ble.n	8007016 <_printf_float+0x1ba>
 8006f8a:	3f02      	subs	r7, #2
 8006f8c:	b2ff      	uxtb	r7, r7
 8006f8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f90:	2f65      	cmp	r7, #101	; 0x65
 8006f92:	d825      	bhi.n	8006fe0 <_printf_float+0x184>
 8006f94:	0020      	movs	r0, r4
 8006f96:	3901      	subs	r1, #1
 8006f98:	003a      	movs	r2, r7
 8006f9a:	3050      	adds	r0, #80	; 0x50
 8006f9c:	9111      	str	r1, [sp, #68]	; 0x44
 8006f9e:	f7ff ff25 	bl	8006dec <__exponent>
 8006fa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fa4:	0006      	movs	r6, r0
 8006fa6:	1813      	adds	r3, r2, r0
 8006fa8:	6123      	str	r3, [r4, #16]
 8006faa:	2a01      	cmp	r2, #1
 8006fac:	dc02      	bgt.n	8006fb4 <_printf_float+0x158>
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	07d2      	lsls	r2, r2, #31
 8006fb2:	d501      	bpl.n	8006fb8 <_printf_float+0x15c>
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	6123      	str	r3, [r4, #16]
 8006fb8:	2323      	movs	r3, #35	; 0x23
 8006fba:	aa08      	add	r2, sp, #32
 8006fbc:	189b      	adds	r3, r3, r2
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d09b      	beq.n	8006efc <_printf_float+0xa0>
 8006fc4:	0023      	movs	r3, r4
 8006fc6:	222d      	movs	r2, #45	; 0x2d
 8006fc8:	3343      	adds	r3, #67	; 0x43
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	e796      	b.n	8006efc <_printf_float+0xa0>
 8006fce:	2f67      	cmp	r7, #103	; 0x67
 8006fd0:	d100      	bne.n	8006fd4 <_printf_float+0x178>
 8006fd2:	e176      	b.n	80072c2 <_printf_float+0x466>
 8006fd4:	2f47      	cmp	r7, #71	; 0x47
 8006fd6:	d1b8      	bne.n	8006f4a <_printf_float+0xee>
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	d1b6      	bne.n	8006f4a <_printf_float+0xee>
 8006fdc:	2201      	movs	r2, #1
 8006fde:	e7b3      	b.n	8006f48 <_printf_float+0xec>
 8006fe0:	2f66      	cmp	r7, #102	; 0x66
 8006fe2:	d119      	bne.n	8007018 <_printf_float+0x1bc>
 8006fe4:	6863      	ldr	r3, [r4, #4]
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	dd0c      	ble.n	8007004 <_printf_float+0x1a8>
 8006fea:	6121      	str	r1, [r4, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <_printf_float+0x19a>
 8006ff0:	6822      	ldr	r2, [r4, #0]
 8006ff2:	07d2      	lsls	r2, r2, #31
 8006ff4:	d502      	bpl.n	8006ffc <_printf_float+0x1a0>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	185b      	adds	r3, r3, r1
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ffe:	2600      	movs	r6, #0
 8007000:	65a3      	str	r3, [r4, #88]	; 0x58
 8007002:	e7d9      	b.n	8006fb8 <_printf_float+0x15c>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d103      	bne.n	8007010 <_printf_float+0x1b4>
 8007008:	2201      	movs	r2, #1
 800700a:	6821      	ldr	r1, [r4, #0]
 800700c:	4211      	tst	r1, r2
 800700e:	d000      	beq.n	8007012 <_printf_float+0x1b6>
 8007010:	1c9a      	adds	r2, r3, #2
 8007012:	6122      	str	r2, [r4, #16]
 8007014:	e7f2      	b.n	8006ffc <_printf_float+0x1a0>
 8007016:	2767      	movs	r7, #103	; 0x67
 8007018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800701a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800701c:	4293      	cmp	r3, r2
 800701e:	db05      	blt.n	800702c <_printf_float+0x1d0>
 8007020:	6822      	ldr	r2, [r4, #0]
 8007022:	6123      	str	r3, [r4, #16]
 8007024:	07d2      	lsls	r2, r2, #31
 8007026:	d5e9      	bpl.n	8006ffc <_printf_float+0x1a0>
 8007028:	3301      	adds	r3, #1
 800702a:	e7e6      	b.n	8006ffa <_printf_float+0x19e>
 800702c:	2101      	movs	r1, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	dc01      	bgt.n	8007036 <_printf_float+0x1da>
 8007032:	1849      	adds	r1, r1, r1
 8007034:	1ac9      	subs	r1, r1, r3
 8007036:	1852      	adds	r2, r2, r1
 8007038:	e7eb      	b.n	8007012 <_printf_float+0x1b6>
 800703a:	6822      	ldr	r2, [r4, #0]
 800703c:	0553      	lsls	r3, r2, #21
 800703e:	d408      	bmi.n	8007052 <_printf_float+0x1f6>
 8007040:	6923      	ldr	r3, [r4, #16]
 8007042:	002a      	movs	r2, r5
 8007044:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007046:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007048:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800704a:	47a8      	blx	r5
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d129      	bne.n	80070a4 <_printf_float+0x248>
 8007050:	e75f      	b.n	8006f12 <_printf_float+0xb6>
 8007052:	2f65      	cmp	r7, #101	; 0x65
 8007054:	d800      	bhi.n	8007058 <_printf_float+0x1fc>
 8007056:	e0e0      	b.n	800721a <_printf_float+0x3be>
 8007058:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800705a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800705c:	2200      	movs	r2, #0
 800705e:	2300      	movs	r3, #0
 8007060:	f7f9 f9ea 	bl	8000438 <__aeabi_dcmpeq>
 8007064:	2800      	cmp	r0, #0
 8007066:	d034      	beq.n	80070d2 <_printf_float+0x276>
 8007068:	2301      	movs	r3, #1
 800706a:	4a42      	ldr	r2, [pc, #264]	; (8007174 <_printf_float+0x318>)
 800706c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800706e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007070:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007072:	47a8      	blx	r5
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d100      	bne.n	800707a <_printf_float+0x21e>
 8007078:	e74b      	b.n	8006f12 <_printf_float+0xb6>
 800707a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800707c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800707e:	4293      	cmp	r3, r2
 8007080:	db02      	blt.n	8007088 <_printf_float+0x22c>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	07db      	lsls	r3, r3, #31
 8007086:	d50d      	bpl.n	80070a4 <_printf_float+0x248>
 8007088:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800708a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800708c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800708e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007092:	47a8      	blx	r5
 8007094:	2500      	movs	r5, #0
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	d100      	bne.n	800709c <_printf_float+0x240>
 800709a:	e73a      	b.n	8006f12 <_printf_float+0xb6>
 800709c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800709e:	3b01      	subs	r3, #1
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dc0a      	bgt.n	80070ba <_printf_float+0x25e>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	079b      	lsls	r3, r3, #30
 80070a8:	d500      	bpl.n	80070ac <_printf_float+0x250>
 80070aa:	e108      	b.n	80072be <_printf_float+0x462>
 80070ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070ae:	68e0      	ldr	r0, [r4, #12]
 80070b0:	4298      	cmp	r0, r3
 80070b2:	db00      	blt.n	80070b6 <_printf_float+0x25a>
 80070b4:	e72f      	b.n	8006f16 <_printf_float+0xba>
 80070b6:	0018      	movs	r0, r3
 80070b8:	e72d      	b.n	8006f16 <_printf_float+0xba>
 80070ba:	0022      	movs	r2, r4
 80070bc:	2301      	movs	r3, #1
 80070be:	321a      	adds	r2, #26
 80070c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80070c6:	47b0      	blx	r6
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d100      	bne.n	80070ce <_printf_float+0x272>
 80070cc:	e721      	b.n	8006f12 <_printf_float+0xb6>
 80070ce:	3501      	adds	r5, #1
 80070d0:	e7e4      	b.n	800709c <_printf_float+0x240>
 80070d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	dc2d      	bgt.n	8007134 <_printf_float+0x2d8>
 80070d8:	2301      	movs	r3, #1
 80070da:	4a26      	ldr	r2, [pc, #152]	; (8007174 <_printf_float+0x318>)
 80070dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80070e2:	47b0      	blx	r6
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d100      	bne.n	80070ea <_printf_float+0x28e>
 80070e8:	e713      	b.n	8006f12 <_printf_float+0xb6>
 80070ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d105      	bne.n	80070fc <_printf_float+0x2a0>
 80070f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d102      	bne.n	80070fc <_printf_float+0x2a0>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	07db      	lsls	r3, r3, #31
 80070fa:	d5d3      	bpl.n	80070a4 <_printf_float+0x248>
 80070fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80070fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007102:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007106:	47b0      	blx	r6
 8007108:	2600      	movs	r6, #0
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	d100      	bne.n	8007110 <_printf_float+0x2b4>
 800710e:	e700      	b.n	8006f12 <_printf_float+0xb6>
 8007110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007112:	425b      	negs	r3, r3
 8007114:	42b3      	cmp	r3, r6
 8007116:	dc01      	bgt.n	800711c <_printf_float+0x2c0>
 8007118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800711a:	e792      	b.n	8007042 <_printf_float+0x1e6>
 800711c:	0022      	movs	r2, r4
 800711e:	2301      	movs	r3, #1
 8007120:	321a      	adds	r2, #26
 8007122:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007126:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007128:	47b8      	blx	r7
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d100      	bne.n	8007130 <_printf_float+0x2d4>
 800712e:	e6f0      	b.n	8006f12 <_printf_float+0xb6>
 8007130:	3601      	adds	r6, #1
 8007132:	e7ed      	b.n	8007110 <_printf_float+0x2b4>
 8007134:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007136:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8007138:	429f      	cmp	r7, r3
 800713a:	dd00      	ble.n	800713e <_printf_float+0x2e2>
 800713c:	001f      	movs	r7, r3
 800713e:	2f00      	cmp	r7, #0
 8007140:	dd08      	ble.n	8007154 <_printf_float+0x2f8>
 8007142:	003b      	movs	r3, r7
 8007144:	002a      	movs	r2, r5
 8007146:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800714a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800714c:	47b0      	blx	r6
 800714e:	1c43      	adds	r3, r0, #1
 8007150:	d100      	bne.n	8007154 <_printf_float+0x2f8>
 8007152:	e6de      	b.n	8006f12 <_printf_float+0xb6>
 8007154:	2300      	movs	r3, #0
 8007156:	930d      	str	r3, [sp, #52]	; 0x34
 8007158:	43fb      	mvns	r3, r7
 800715a:	17db      	asrs	r3, r3, #31
 800715c:	930f      	str	r3, [sp, #60]	; 0x3c
 800715e:	e018      	b.n	8007192 <_printf_float+0x336>
 8007160:	7fefffff 	.word	0x7fefffff
 8007164:	0800967c 	.word	0x0800967c
 8007168:	08009678 	.word	0x08009678
 800716c:	08009684 	.word	0x08009684
 8007170:	08009680 	.word	0x08009680
 8007174:	08009688 	.word	0x08009688
 8007178:	0022      	movs	r2, r4
 800717a:	2301      	movs	r3, #1
 800717c:	321a      	adds	r2, #26
 800717e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007182:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007184:	47b0      	blx	r6
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d100      	bne.n	800718c <_printf_float+0x330>
 800718a:	e6c2      	b.n	8006f12 <_printf_float+0xb6>
 800718c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800718e:	3301      	adds	r3, #1
 8007190:	930d      	str	r3, [sp, #52]	; 0x34
 8007192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007194:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8007196:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007198:	403b      	ands	r3, r7
 800719a:	1af3      	subs	r3, r6, r3
 800719c:	4293      	cmp	r3, r2
 800719e:	dceb      	bgt.n	8007178 <_printf_float+0x31c>
 80071a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071a4:	19ad      	adds	r5, r5, r6
 80071a6:	4293      	cmp	r3, r2
 80071a8:	db10      	blt.n	80071cc <_printf_float+0x370>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	07db      	lsls	r3, r3, #31
 80071ae:	d40d      	bmi.n	80071cc <_printf_float+0x370>
 80071b0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80071b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071b4:	1bbe      	subs	r6, r7, r6
 80071b6:	1aff      	subs	r7, r7, r3
 80071b8:	42b7      	cmp	r7, r6
 80071ba:	dd00      	ble.n	80071be <_printf_float+0x362>
 80071bc:	0037      	movs	r7, r6
 80071be:	2f00      	cmp	r7, #0
 80071c0:	dc0d      	bgt.n	80071de <_printf_float+0x382>
 80071c2:	43fe      	mvns	r6, r7
 80071c4:	17f3      	asrs	r3, r6, #31
 80071c6:	2500      	movs	r5, #0
 80071c8:	930c      	str	r3, [sp, #48]	; 0x30
 80071ca:	e01c      	b.n	8007206 <_printf_float+0x3aa>
 80071cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80071d6:	47b8      	blx	r7
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d1e9      	bne.n	80071b0 <_printf_float+0x354>
 80071dc:	e699      	b.n	8006f12 <_printf_float+0xb6>
 80071de:	003b      	movs	r3, r7
 80071e0:	002a      	movs	r2, r5
 80071e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80071e8:	47a8      	blx	r5
 80071ea:	1c43      	adds	r3, r0, #1
 80071ec:	d1e9      	bne.n	80071c2 <_printf_float+0x366>
 80071ee:	e690      	b.n	8006f12 <_printf_float+0xb6>
 80071f0:	0022      	movs	r2, r4
 80071f2:	2301      	movs	r3, #1
 80071f4:	321a      	adds	r2, #26
 80071f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071fa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80071fc:	47b0      	blx	r6
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	d100      	bne.n	8007204 <_printf_float+0x3a8>
 8007202:	e686      	b.n	8006f12 <_printf_float+0xb6>
 8007204:	3501      	adds	r5, #1
 8007206:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800720a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800720c:	1a9b      	subs	r3, r3, r2
 800720e:	003a      	movs	r2, r7
 8007210:	400a      	ands	r2, r1
 8007212:	1a9b      	subs	r3, r3, r2
 8007214:	42ab      	cmp	r3, r5
 8007216:	dceb      	bgt.n	80071f0 <_printf_float+0x394>
 8007218:	e744      	b.n	80070a4 <_printf_float+0x248>
 800721a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800721c:	2b01      	cmp	r3, #1
 800721e:	dc02      	bgt.n	8007226 <_printf_float+0x3ca>
 8007220:	2301      	movs	r3, #1
 8007222:	421a      	tst	r2, r3
 8007224:	d032      	beq.n	800728c <_printf_float+0x430>
 8007226:	2301      	movs	r3, #1
 8007228:	002a      	movs	r2, r5
 800722a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800722c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800722e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007230:	47b8      	blx	r7
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	d100      	bne.n	8007238 <_printf_float+0x3dc>
 8007236:	e66c      	b.n	8006f12 <_printf_float+0xb6>
 8007238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800723a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800723c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800723e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007240:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007242:	3501      	adds	r5, #1
 8007244:	47b8      	blx	r7
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	d100      	bne.n	800724c <_printf_float+0x3f0>
 800724a:	e662      	b.n	8006f12 <_printf_float+0xb6>
 800724c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800724e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007252:	2200      	movs	r2, #0
 8007254:	1e5f      	subs	r7, r3, #1
 8007256:	2300      	movs	r3, #0
 8007258:	f7f9 f8ee 	bl	8000438 <__aeabi_dcmpeq>
 800725c:	003b      	movs	r3, r7
 800725e:	2800      	cmp	r0, #0
 8007260:	d014      	beq.n	800728c <_printf_float+0x430>
 8007262:	2500      	movs	r5, #0
 8007264:	e00a      	b.n	800727c <_printf_float+0x420>
 8007266:	0022      	movs	r2, r4
 8007268:	2301      	movs	r3, #1
 800726a:	321a      	adds	r2, #26
 800726c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800726e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007270:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007272:	47b8      	blx	r7
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d100      	bne.n	800727a <_printf_float+0x41e>
 8007278:	e64b      	b.n	8006f12 <_printf_float+0xb6>
 800727a:	3501      	adds	r5, #1
 800727c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800727e:	3b01      	subs	r3, #1
 8007280:	42ab      	cmp	r3, r5
 8007282:	dcf0      	bgt.n	8007266 <_printf_float+0x40a>
 8007284:	0022      	movs	r2, r4
 8007286:	0033      	movs	r3, r6
 8007288:	3250      	adds	r2, #80	; 0x50
 800728a:	e6db      	b.n	8007044 <_printf_float+0x1e8>
 800728c:	002a      	movs	r2, r5
 800728e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007292:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007294:	47a8      	blx	r5
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	d1f4      	bne.n	8007284 <_printf_float+0x428>
 800729a:	e63a      	b.n	8006f12 <_printf_float+0xb6>
 800729c:	0022      	movs	r2, r4
 800729e:	2301      	movs	r3, #1
 80072a0:	3219      	adds	r2, #25
 80072a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80072a8:	47b0      	blx	r6
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d100      	bne.n	80072b0 <_printf_float+0x454>
 80072ae:	e630      	b.n	8006f12 <_printf_float+0xb6>
 80072b0:	3501      	adds	r5, #1
 80072b2:	68e3      	ldr	r3, [r4, #12]
 80072b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	42ab      	cmp	r3, r5
 80072ba:	dcef      	bgt.n	800729c <_printf_float+0x440>
 80072bc:	e6f6      	b.n	80070ac <_printf_float+0x250>
 80072be:	2500      	movs	r5, #0
 80072c0:	e7f7      	b.n	80072b2 <_printf_float+0x456>
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	d100      	bne.n	80072c8 <_printf_float+0x46c>
 80072c6:	e689      	b.n	8006fdc <_printf_float+0x180>
 80072c8:	2100      	movs	r1, #0
 80072ca:	9106      	str	r1, [sp, #24]
 80072cc:	a912      	add	r1, sp, #72	; 0x48
 80072ce:	9105      	str	r1, [sp, #20]
 80072d0:	a911      	add	r1, sp, #68	; 0x44
 80072d2:	9103      	str	r1, [sp, #12]
 80072d4:	2123      	movs	r1, #35	; 0x23
 80072d6:	a808      	add	r0, sp, #32
 80072d8:	1809      	adds	r1, r1, r0
 80072da:	6023      	str	r3, [r4, #0]
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	9200      	str	r2, [sp, #0]
 80072e0:	002b      	movs	r3, r5
 80072e2:	9704      	str	r7, [sp, #16]
 80072e4:	9102      	str	r1, [sp, #8]
 80072e6:	0032      	movs	r2, r6
 80072e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ea:	f7ff fd1b 	bl	8006d24 <__cvt>
 80072ee:	0005      	movs	r5, r0
 80072f0:	e645      	b.n	8006f7e <_printf_float+0x122>
 80072f2:	46c0      	nop			; (mov r8, r8)

080072f4 <_printf_common>:
 80072f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072f6:	0015      	movs	r5, r2
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	688a      	ldr	r2, [r1, #8]
 80072fc:	690b      	ldr	r3, [r1, #16]
 80072fe:	9000      	str	r0, [sp, #0]
 8007300:	000c      	movs	r4, r1
 8007302:	4293      	cmp	r3, r2
 8007304:	da00      	bge.n	8007308 <_printf_common+0x14>
 8007306:	0013      	movs	r3, r2
 8007308:	0022      	movs	r2, r4
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	3243      	adds	r2, #67	; 0x43
 800730e:	7812      	ldrb	r2, [r2, #0]
 8007310:	2a00      	cmp	r2, #0
 8007312:	d001      	beq.n	8007318 <_printf_common+0x24>
 8007314:	3301      	adds	r3, #1
 8007316:	602b      	str	r3, [r5, #0]
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	069b      	lsls	r3, r3, #26
 800731c:	d502      	bpl.n	8007324 <_printf_common+0x30>
 800731e:	682b      	ldr	r3, [r5, #0]
 8007320:	3302      	adds	r3, #2
 8007322:	602b      	str	r3, [r5, #0]
 8007324:	2706      	movs	r7, #6
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	401f      	ands	r7, r3
 800732a:	d027      	beq.n	800737c <_printf_common+0x88>
 800732c:	0023      	movs	r3, r4
 800732e:	3343      	adds	r3, #67	; 0x43
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	1e5a      	subs	r2, r3, #1
 8007334:	4193      	sbcs	r3, r2
 8007336:	6822      	ldr	r2, [r4, #0]
 8007338:	0692      	lsls	r2, r2, #26
 800733a:	d430      	bmi.n	800739e <_printf_common+0xaa>
 800733c:	0022      	movs	r2, r4
 800733e:	9901      	ldr	r1, [sp, #4]
 8007340:	3243      	adds	r2, #67	; 0x43
 8007342:	9800      	ldr	r0, [sp, #0]
 8007344:	9e08      	ldr	r6, [sp, #32]
 8007346:	47b0      	blx	r6
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d025      	beq.n	8007398 <_printf_common+0xa4>
 800734c:	2306      	movs	r3, #6
 800734e:	6820      	ldr	r0, [r4, #0]
 8007350:	682a      	ldr	r2, [r5, #0]
 8007352:	68e1      	ldr	r1, [r4, #12]
 8007354:	4003      	ands	r3, r0
 8007356:	2500      	movs	r5, #0
 8007358:	2b04      	cmp	r3, #4
 800735a:	d103      	bne.n	8007364 <_printf_common+0x70>
 800735c:	1a8d      	subs	r5, r1, r2
 800735e:	43eb      	mvns	r3, r5
 8007360:	17db      	asrs	r3, r3, #31
 8007362:	401d      	ands	r5, r3
 8007364:	68a3      	ldr	r3, [r4, #8]
 8007366:	6922      	ldr	r2, [r4, #16]
 8007368:	4293      	cmp	r3, r2
 800736a:	dd01      	ble.n	8007370 <_printf_common+0x7c>
 800736c:	1a9b      	subs	r3, r3, r2
 800736e:	18ed      	adds	r5, r5, r3
 8007370:	2700      	movs	r7, #0
 8007372:	42bd      	cmp	r5, r7
 8007374:	d120      	bne.n	80073b8 <_printf_common+0xc4>
 8007376:	2000      	movs	r0, #0
 8007378:	e010      	b.n	800739c <_printf_common+0xa8>
 800737a:	3701      	adds	r7, #1
 800737c:	68e3      	ldr	r3, [r4, #12]
 800737e:	682a      	ldr	r2, [r5, #0]
 8007380:	1a9b      	subs	r3, r3, r2
 8007382:	42bb      	cmp	r3, r7
 8007384:	ddd2      	ble.n	800732c <_printf_common+0x38>
 8007386:	0022      	movs	r2, r4
 8007388:	2301      	movs	r3, #1
 800738a:	3219      	adds	r2, #25
 800738c:	9901      	ldr	r1, [sp, #4]
 800738e:	9800      	ldr	r0, [sp, #0]
 8007390:	9e08      	ldr	r6, [sp, #32]
 8007392:	47b0      	blx	r6
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d1f0      	bne.n	800737a <_printf_common+0x86>
 8007398:	2001      	movs	r0, #1
 800739a:	4240      	negs	r0, r0
 800739c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800739e:	2030      	movs	r0, #48	; 0x30
 80073a0:	18e1      	adds	r1, r4, r3
 80073a2:	3143      	adds	r1, #67	; 0x43
 80073a4:	7008      	strb	r0, [r1, #0]
 80073a6:	0021      	movs	r1, r4
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	3145      	adds	r1, #69	; 0x45
 80073ac:	7809      	ldrb	r1, [r1, #0]
 80073ae:	18a2      	adds	r2, r4, r2
 80073b0:	3243      	adds	r2, #67	; 0x43
 80073b2:	3302      	adds	r3, #2
 80073b4:	7011      	strb	r1, [r2, #0]
 80073b6:	e7c1      	b.n	800733c <_printf_common+0x48>
 80073b8:	0022      	movs	r2, r4
 80073ba:	2301      	movs	r3, #1
 80073bc:	321a      	adds	r2, #26
 80073be:	9901      	ldr	r1, [sp, #4]
 80073c0:	9800      	ldr	r0, [sp, #0]
 80073c2:	9e08      	ldr	r6, [sp, #32]
 80073c4:	47b0      	blx	r6
 80073c6:	1c43      	adds	r3, r0, #1
 80073c8:	d0e6      	beq.n	8007398 <_printf_common+0xa4>
 80073ca:	3701      	adds	r7, #1
 80073cc:	e7d1      	b.n	8007372 <_printf_common+0x7e>

080073ce <quorem>:
 80073ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073d0:	6903      	ldr	r3, [r0, #16]
 80073d2:	690c      	ldr	r4, [r1, #16]
 80073d4:	b089      	sub	sp, #36	; 0x24
 80073d6:	0007      	movs	r7, r0
 80073d8:	9105      	str	r1, [sp, #20]
 80073da:	2600      	movs	r6, #0
 80073dc:	42a3      	cmp	r3, r4
 80073de:	db65      	blt.n	80074ac <quorem+0xde>
 80073e0:	000b      	movs	r3, r1
 80073e2:	3c01      	subs	r4, #1
 80073e4:	3314      	adds	r3, #20
 80073e6:	00a5      	lsls	r5, r4, #2
 80073e8:	9303      	str	r3, [sp, #12]
 80073ea:	195b      	adds	r3, r3, r5
 80073ec:	9304      	str	r3, [sp, #16]
 80073ee:	0003      	movs	r3, r0
 80073f0:	3314      	adds	r3, #20
 80073f2:	9302      	str	r3, [sp, #8]
 80073f4:	195d      	adds	r5, r3, r5
 80073f6:	9b04      	ldr	r3, [sp, #16]
 80073f8:	6828      	ldr	r0, [r5, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	1c59      	adds	r1, r3, #1
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	f7f8 fe94 	bl	800012c <__udivsi3>
 8007404:	9001      	str	r0, [sp, #4]
 8007406:	42b0      	cmp	r0, r6
 8007408:	d029      	beq.n	800745e <quorem+0x90>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	9802      	ldr	r0, [sp, #8]
 800740e:	469c      	mov	ip, r3
 8007410:	9606      	str	r6, [sp, #24]
 8007412:	4662      	mov	r2, ip
 8007414:	ca08      	ldmia	r2!, {r3}
 8007416:	4694      	mov	ip, r2
 8007418:	9a01      	ldr	r2, [sp, #4]
 800741a:	b299      	uxth	r1, r3
 800741c:	4351      	muls	r1, r2
 800741e:	0c1b      	lsrs	r3, r3, #16
 8007420:	4353      	muls	r3, r2
 8007422:	1989      	adds	r1, r1, r6
 8007424:	0c0a      	lsrs	r2, r1, #16
 8007426:	189b      	adds	r3, r3, r2
 8007428:	9307      	str	r3, [sp, #28]
 800742a:	0c1e      	lsrs	r6, r3, #16
 800742c:	6803      	ldr	r3, [r0, #0]
 800742e:	b289      	uxth	r1, r1
 8007430:	b29a      	uxth	r2, r3
 8007432:	9b06      	ldr	r3, [sp, #24]
 8007434:	18d2      	adds	r2, r2, r3
 8007436:	6803      	ldr	r3, [r0, #0]
 8007438:	1a52      	subs	r2, r2, r1
 800743a:	0c19      	lsrs	r1, r3, #16
 800743c:	466b      	mov	r3, sp
 800743e:	8b9b      	ldrh	r3, [r3, #28]
 8007440:	1acb      	subs	r3, r1, r3
 8007442:	1411      	asrs	r1, r2, #16
 8007444:	185b      	adds	r3, r3, r1
 8007446:	1419      	asrs	r1, r3, #16
 8007448:	b292      	uxth	r2, r2
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	431a      	orrs	r2, r3
 800744e:	9b04      	ldr	r3, [sp, #16]
 8007450:	9106      	str	r1, [sp, #24]
 8007452:	c004      	stmia	r0!, {r2}
 8007454:	4563      	cmp	r3, ip
 8007456:	d2dc      	bcs.n	8007412 <quorem+0x44>
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d02d      	beq.n	80074ba <quorem+0xec>
 800745e:	9905      	ldr	r1, [sp, #20]
 8007460:	0038      	movs	r0, r7
 8007462:	f001 f84f 	bl	8008504 <__mcmp>
 8007466:	2800      	cmp	r0, #0
 8007468:	db1f      	blt.n	80074aa <quorem+0xdc>
 800746a:	2500      	movs	r5, #0
 800746c:	9b01      	ldr	r3, [sp, #4]
 800746e:	9802      	ldr	r0, [sp, #8]
 8007470:	3301      	adds	r3, #1
 8007472:	9903      	ldr	r1, [sp, #12]
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	6802      	ldr	r2, [r0, #0]
 8007478:	c908      	ldmia	r1!, {r3}
 800747a:	b292      	uxth	r2, r2
 800747c:	1955      	adds	r5, r2, r5
 800747e:	b29a      	uxth	r2, r3
 8007480:	1aaa      	subs	r2, r5, r2
 8007482:	6805      	ldr	r5, [r0, #0]
 8007484:	0c1b      	lsrs	r3, r3, #16
 8007486:	0c2d      	lsrs	r5, r5, #16
 8007488:	1aeb      	subs	r3, r5, r3
 800748a:	1415      	asrs	r5, r2, #16
 800748c:	195b      	adds	r3, r3, r5
 800748e:	141d      	asrs	r5, r3, #16
 8007490:	b292      	uxth	r2, r2
 8007492:	041b      	lsls	r3, r3, #16
 8007494:	4313      	orrs	r3, r2
 8007496:	c008      	stmia	r0!, {r3}
 8007498:	9b04      	ldr	r3, [sp, #16]
 800749a:	428b      	cmp	r3, r1
 800749c:	d2eb      	bcs.n	8007476 <quorem+0xa8>
 800749e:	9a02      	ldr	r2, [sp, #8]
 80074a0:	00a3      	lsls	r3, r4, #2
 80074a2:	18d3      	adds	r3, r2, r3
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	2a00      	cmp	r2, #0
 80074a8:	d011      	beq.n	80074ce <quorem+0x100>
 80074aa:	9e01      	ldr	r6, [sp, #4]
 80074ac:	0030      	movs	r0, r6
 80074ae:	b009      	add	sp, #36	; 0x24
 80074b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d104      	bne.n	80074c2 <quorem+0xf4>
 80074b8:	3c01      	subs	r4, #1
 80074ba:	9b02      	ldr	r3, [sp, #8]
 80074bc:	3d04      	subs	r5, #4
 80074be:	42ab      	cmp	r3, r5
 80074c0:	d3f7      	bcc.n	80074b2 <quorem+0xe4>
 80074c2:	613c      	str	r4, [r7, #16]
 80074c4:	e7cb      	b.n	800745e <quorem+0x90>
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	2a00      	cmp	r2, #0
 80074ca:	d104      	bne.n	80074d6 <quorem+0x108>
 80074cc:	3c01      	subs	r4, #1
 80074ce:	9a02      	ldr	r2, [sp, #8]
 80074d0:	3b04      	subs	r3, #4
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d3f7      	bcc.n	80074c6 <quorem+0xf8>
 80074d6:	613c      	str	r4, [r7, #16]
 80074d8:	e7e7      	b.n	80074aa <quorem+0xdc>
	...

080074dc <_dtoa_r>:
 80074dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074de:	0016      	movs	r6, r2
 80074e0:	001f      	movs	r7, r3
 80074e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80074e4:	b09b      	sub	sp, #108	; 0x6c
 80074e6:	9002      	str	r0, [sp, #8]
 80074e8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80074ea:	9606      	str	r6, [sp, #24]
 80074ec:	9707      	str	r7, [sp, #28]
 80074ee:	2c00      	cmp	r4, #0
 80074f0:	d108      	bne.n	8007504 <_dtoa_r+0x28>
 80074f2:	2010      	movs	r0, #16
 80074f4:	f000 fdde 	bl	80080b4 <malloc>
 80074f8:	9b02      	ldr	r3, [sp, #8]
 80074fa:	6258      	str	r0, [r3, #36]	; 0x24
 80074fc:	6044      	str	r4, [r0, #4]
 80074fe:	6084      	str	r4, [r0, #8]
 8007500:	6004      	str	r4, [r0, #0]
 8007502:	60c4      	str	r4, [r0, #12]
 8007504:	9b02      	ldr	r3, [sp, #8]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	6819      	ldr	r1, [r3, #0]
 800750a:	2900      	cmp	r1, #0
 800750c:	d00b      	beq.n	8007526 <_dtoa_r+0x4a>
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	2301      	movs	r3, #1
 8007512:	4093      	lsls	r3, r2
 8007514:	604a      	str	r2, [r1, #4]
 8007516:	608b      	str	r3, [r1, #8]
 8007518:	9802      	ldr	r0, [sp, #8]
 800751a:	f000 fe16 	bl	800814a <_Bfree>
 800751e:	2200      	movs	r2, #0
 8007520:	9b02      	ldr	r3, [sp, #8]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	2f00      	cmp	r7, #0
 8007528:	da20      	bge.n	800756c <_dtoa_r+0x90>
 800752a:	2301      	movs	r3, #1
 800752c:	602b      	str	r3, [r5, #0]
 800752e:	007b      	lsls	r3, r7, #1
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	9307      	str	r3, [sp, #28]
 8007534:	9c07      	ldr	r4, [sp, #28]
 8007536:	4bb2      	ldr	r3, [pc, #712]	; (8007800 <_dtoa_r+0x324>)
 8007538:	0022      	movs	r2, r4
 800753a:	9317      	str	r3, [sp, #92]	; 0x5c
 800753c:	401a      	ands	r2, r3
 800753e:	429a      	cmp	r2, r3
 8007540:	d117      	bne.n	8007572 <_dtoa_r+0x96>
 8007542:	4bb0      	ldr	r3, [pc, #704]	; (8007804 <_dtoa_r+0x328>)
 8007544:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	9b06      	ldr	r3, [sp, #24]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d103      	bne.n	8007556 <_dtoa_r+0x7a>
 800754e:	0324      	lsls	r4, r4, #12
 8007550:	d101      	bne.n	8007556 <_dtoa_r+0x7a>
 8007552:	f000 fd87 	bl	8008064 <_dtoa_r+0xb88>
 8007556:	4bac      	ldr	r3, [pc, #688]	; (8007808 <_dtoa_r+0x32c>)
 8007558:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800755a:	9308      	str	r3, [sp, #32]
 800755c:	2a00      	cmp	r2, #0
 800755e:	d002      	beq.n	8007566 <_dtoa_r+0x8a>
 8007560:	4baa      	ldr	r3, [pc, #680]	; (800780c <_dtoa_r+0x330>)
 8007562:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	9808      	ldr	r0, [sp, #32]
 8007568:	b01b      	add	sp, #108	; 0x6c
 800756a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800756c:	2300      	movs	r3, #0
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	e7e0      	b.n	8007534 <_dtoa_r+0x58>
 8007572:	9e06      	ldr	r6, [sp, #24]
 8007574:	9f07      	ldr	r7, [sp, #28]
 8007576:	2200      	movs	r2, #0
 8007578:	2300      	movs	r3, #0
 800757a:	0030      	movs	r0, r6
 800757c:	0039      	movs	r1, r7
 800757e:	f7f8 ff5b 	bl	8000438 <__aeabi_dcmpeq>
 8007582:	1e05      	subs	r5, r0, #0
 8007584:	d00b      	beq.n	800759e <_dtoa_r+0xc2>
 8007586:	2301      	movs	r3, #1
 8007588:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	4ba0      	ldr	r3, [pc, #640]	; (8007810 <_dtoa_r+0x334>)
 800758e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007590:	9308      	str	r3, [sp, #32]
 8007592:	2a00      	cmp	r2, #0
 8007594:	d0e7      	beq.n	8007566 <_dtoa_r+0x8a>
 8007596:	4a9f      	ldr	r2, [pc, #636]	; (8007814 <_dtoa_r+0x338>)
 8007598:	9924      	ldr	r1, [sp, #144]	; 0x90
 800759a:	600a      	str	r2, [r1, #0]
 800759c:	e7e3      	b.n	8007566 <_dtoa_r+0x8a>
 800759e:	ab18      	add	r3, sp, #96	; 0x60
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	ab19      	add	r3, sp, #100	; 0x64
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	0032      	movs	r2, r6
 80075a8:	003b      	movs	r3, r7
 80075aa:	9802      	ldr	r0, [sp, #8]
 80075ac:	f001 f828 	bl	8008600 <__d2b>
 80075b0:	0063      	lsls	r3, r4, #1
 80075b2:	9003      	str	r0, [sp, #12]
 80075b4:	0d5b      	lsrs	r3, r3, #21
 80075b6:	d074      	beq.n	80076a2 <_dtoa_r+0x1c6>
 80075b8:	033a      	lsls	r2, r7, #12
 80075ba:	4c97      	ldr	r4, [pc, #604]	; (8007818 <_dtoa_r+0x33c>)
 80075bc:	0b12      	lsrs	r2, r2, #12
 80075be:	4314      	orrs	r4, r2
 80075c0:	0021      	movs	r1, r4
 80075c2:	4a96      	ldr	r2, [pc, #600]	; (800781c <_dtoa_r+0x340>)
 80075c4:	0030      	movs	r0, r6
 80075c6:	9516      	str	r5, [sp, #88]	; 0x58
 80075c8:	189e      	adds	r6, r3, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	4b94      	ldr	r3, [pc, #592]	; (8007820 <_dtoa_r+0x344>)
 80075ce:	f7fa f8f9 	bl	80017c4 <__aeabi_dsub>
 80075d2:	4a94      	ldr	r2, [pc, #592]	; (8007824 <_dtoa_r+0x348>)
 80075d4:	4b94      	ldr	r3, [pc, #592]	; (8007828 <_dtoa_r+0x34c>)
 80075d6:	f7f9 fe83 	bl	80012e0 <__aeabi_dmul>
 80075da:	4a94      	ldr	r2, [pc, #592]	; (800782c <_dtoa_r+0x350>)
 80075dc:	4b94      	ldr	r3, [pc, #592]	; (8007830 <_dtoa_r+0x354>)
 80075de:	f7f8 ff59 	bl	8000494 <__aeabi_dadd>
 80075e2:	0004      	movs	r4, r0
 80075e4:	0030      	movs	r0, r6
 80075e6:	000d      	movs	r5, r1
 80075e8:	f7fa fc86 	bl	8001ef8 <__aeabi_i2d>
 80075ec:	4a91      	ldr	r2, [pc, #580]	; (8007834 <_dtoa_r+0x358>)
 80075ee:	4b92      	ldr	r3, [pc, #584]	; (8007838 <_dtoa_r+0x35c>)
 80075f0:	f7f9 fe76 	bl	80012e0 <__aeabi_dmul>
 80075f4:	0002      	movs	r2, r0
 80075f6:	000b      	movs	r3, r1
 80075f8:	0020      	movs	r0, r4
 80075fa:	0029      	movs	r1, r5
 80075fc:	f7f8 ff4a 	bl	8000494 <__aeabi_dadd>
 8007600:	0004      	movs	r4, r0
 8007602:	000d      	movs	r5, r1
 8007604:	f7fa fc42 	bl	8001e8c <__aeabi_d2iz>
 8007608:	2200      	movs	r2, #0
 800760a:	0007      	movs	r7, r0
 800760c:	2300      	movs	r3, #0
 800760e:	0020      	movs	r0, r4
 8007610:	0029      	movs	r1, r5
 8007612:	f7f8 ff17 	bl	8000444 <__aeabi_dcmplt>
 8007616:	2800      	cmp	r0, #0
 8007618:	d009      	beq.n	800762e <_dtoa_r+0x152>
 800761a:	0038      	movs	r0, r7
 800761c:	f7fa fc6c 	bl	8001ef8 <__aeabi_i2d>
 8007620:	002b      	movs	r3, r5
 8007622:	0022      	movs	r2, r4
 8007624:	f7f8 ff08 	bl	8000438 <__aeabi_dcmpeq>
 8007628:	4243      	negs	r3, r0
 800762a:	4158      	adcs	r0, r3
 800762c:	1a3f      	subs	r7, r7, r0
 800762e:	2301      	movs	r3, #1
 8007630:	9314      	str	r3, [sp, #80]	; 0x50
 8007632:	2f16      	cmp	r7, #22
 8007634:	d80d      	bhi.n	8007652 <_dtoa_r+0x176>
 8007636:	4981      	ldr	r1, [pc, #516]	; (800783c <_dtoa_r+0x360>)
 8007638:	00fb      	lsls	r3, r7, #3
 800763a:	18c9      	adds	r1, r1, r3
 800763c:	6808      	ldr	r0, [r1, #0]
 800763e:	6849      	ldr	r1, [r1, #4]
 8007640:	9a06      	ldr	r2, [sp, #24]
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	f7f8 ff12 	bl	800046c <__aeabi_dcmpgt>
 8007648:	2800      	cmp	r0, #0
 800764a:	d046      	beq.n	80076da <_dtoa_r+0x1fe>
 800764c:	2300      	movs	r3, #0
 800764e:	3f01      	subs	r7, #1
 8007650:	9314      	str	r3, [sp, #80]	; 0x50
 8007652:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007654:	1b9e      	subs	r6, r3, r6
 8007656:	2300      	movs	r3, #0
 8007658:	930a      	str	r3, [sp, #40]	; 0x28
 800765a:	0033      	movs	r3, r6
 800765c:	3b01      	subs	r3, #1
 800765e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007660:	d504      	bpl.n	800766c <_dtoa_r+0x190>
 8007662:	2301      	movs	r3, #1
 8007664:	1b9b      	subs	r3, r3, r6
 8007666:	930a      	str	r3, [sp, #40]	; 0x28
 8007668:	2300      	movs	r3, #0
 800766a:	930b      	str	r3, [sp, #44]	; 0x2c
 800766c:	2f00      	cmp	r7, #0
 800766e:	db36      	blt.n	80076de <_dtoa_r+0x202>
 8007670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007672:	9711      	str	r7, [sp, #68]	; 0x44
 8007674:	19db      	adds	r3, r3, r7
 8007676:	930b      	str	r3, [sp, #44]	; 0x2c
 8007678:	2300      	movs	r3, #0
 800767a:	9304      	str	r3, [sp, #16]
 800767c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800767e:	2401      	movs	r4, #1
 8007680:	2b09      	cmp	r3, #9
 8007682:	d900      	bls.n	8007686 <_dtoa_r+0x1aa>
 8007684:	e084      	b.n	8007790 <_dtoa_r+0x2b4>
 8007686:	2b05      	cmp	r3, #5
 8007688:	dd02      	ble.n	8007690 <_dtoa_r+0x1b4>
 800768a:	2400      	movs	r4, #0
 800768c:	3b04      	subs	r3, #4
 800768e:	9320      	str	r3, [sp, #128]	; 0x80
 8007690:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007692:	1e98      	subs	r0, r3, #2
 8007694:	2803      	cmp	r0, #3
 8007696:	d900      	bls.n	800769a <_dtoa_r+0x1be>
 8007698:	e084      	b.n	80077a4 <_dtoa_r+0x2c8>
 800769a:	f7f8 fd3d 	bl	8000118 <__gnu_thumb1_case_uqi>
 800769e:	7775      	.short	0x7775
 80076a0:	6a28      	.short	0x6a28
 80076a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80076a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076a6:	189e      	adds	r6, r3, r2
 80076a8:	4b65      	ldr	r3, [pc, #404]	; (8007840 <_dtoa_r+0x364>)
 80076aa:	18f2      	adds	r2, r6, r3
 80076ac:	2a20      	cmp	r2, #32
 80076ae:	dd0f      	ble.n	80076d0 <_dtoa_r+0x1f4>
 80076b0:	2340      	movs	r3, #64	; 0x40
 80076b2:	1a9b      	subs	r3, r3, r2
 80076b4:	409c      	lsls	r4, r3
 80076b6:	4b63      	ldr	r3, [pc, #396]	; (8007844 <_dtoa_r+0x368>)
 80076b8:	9806      	ldr	r0, [sp, #24]
 80076ba:	18f3      	adds	r3, r6, r3
 80076bc:	40d8      	lsrs	r0, r3
 80076be:	4320      	orrs	r0, r4
 80076c0:	f7fa fc54 	bl	8001f6c <__aeabi_ui2d>
 80076c4:	2301      	movs	r3, #1
 80076c6:	4c60      	ldr	r4, [pc, #384]	; (8007848 <_dtoa_r+0x36c>)
 80076c8:	3e01      	subs	r6, #1
 80076ca:	1909      	adds	r1, r1, r4
 80076cc:	9316      	str	r3, [sp, #88]	; 0x58
 80076ce:	e77c      	b.n	80075ca <_dtoa_r+0xee>
 80076d0:	2320      	movs	r3, #32
 80076d2:	9806      	ldr	r0, [sp, #24]
 80076d4:	1a9b      	subs	r3, r3, r2
 80076d6:	4098      	lsls	r0, r3
 80076d8:	e7f2      	b.n	80076c0 <_dtoa_r+0x1e4>
 80076da:	9014      	str	r0, [sp, #80]	; 0x50
 80076dc:	e7b9      	b.n	8007652 <_dtoa_r+0x176>
 80076de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e0:	1bdb      	subs	r3, r3, r7
 80076e2:	930a      	str	r3, [sp, #40]	; 0x28
 80076e4:	427b      	negs	r3, r7
 80076e6:	9304      	str	r3, [sp, #16]
 80076e8:	2300      	movs	r3, #0
 80076ea:	9311      	str	r3, [sp, #68]	; 0x44
 80076ec:	e7c6      	b.n	800767c <_dtoa_r+0x1a0>
 80076ee:	2301      	movs	r3, #1
 80076f0:	930d      	str	r3, [sp, #52]	; 0x34
 80076f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dd59      	ble.n	80077ac <_dtoa_r+0x2d0>
 80076f8:	930c      	str	r3, [sp, #48]	; 0x30
 80076fa:	9309      	str	r3, [sp, #36]	; 0x24
 80076fc:	9a02      	ldr	r2, [sp, #8]
 80076fe:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007700:	2200      	movs	r2, #0
 8007702:	606a      	str	r2, [r5, #4]
 8007704:	3204      	adds	r2, #4
 8007706:	0010      	movs	r0, r2
 8007708:	3014      	adds	r0, #20
 800770a:	6869      	ldr	r1, [r5, #4]
 800770c:	4298      	cmp	r0, r3
 800770e:	d952      	bls.n	80077b6 <_dtoa_r+0x2da>
 8007710:	9802      	ldr	r0, [sp, #8]
 8007712:	f000 fce2 	bl	80080da <_Balloc>
 8007716:	9b02      	ldr	r3, [sp, #8]
 8007718:	6028      	str	r0, [r5, #0]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	9308      	str	r3, [sp, #32]
 8007720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007722:	2b0e      	cmp	r3, #14
 8007724:	d900      	bls.n	8007728 <_dtoa_r+0x24c>
 8007726:	e10a      	b.n	800793e <_dtoa_r+0x462>
 8007728:	2c00      	cmp	r4, #0
 800772a:	d100      	bne.n	800772e <_dtoa_r+0x252>
 800772c:	e107      	b.n	800793e <_dtoa_r+0x462>
 800772e:	9b06      	ldr	r3, [sp, #24]
 8007730:	9c07      	ldr	r4, [sp, #28]
 8007732:	9312      	str	r3, [sp, #72]	; 0x48
 8007734:	9413      	str	r4, [sp, #76]	; 0x4c
 8007736:	2f00      	cmp	r7, #0
 8007738:	dc00      	bgt.n	800773c <_dtoa_r+0x260>
 800773a:	e089      	b.n	8007850 <_dtoa_r+0x374>
 800773c:	210f      	movs	r1, #15
 800773e:	003a      	movs	r2, r7
 8007740:	4b3e      	ldr	r3, [pc, #248]	; (800783c <_dtoa_r+0x360>)
 8007742:	400a      	ands	r2, r1
 8007744:	00d2      	lsls	r2, r2, #3
 8007746:	189b      	adds	r3, r3, r2
 8007748:	681d      	ldr	r5, [r3, #0]
 800774a:	685e      	ldr	r6, [r3, #4]
 800774c:	2302      	movs	r3, #2
 800774e:	113c      	asrs	r4, r7, #4
 8007750:	930e      	str	r3, [sp, #56]	; 0x38
 8007752:	06e3      	lsls	r3, r4, #27
 8007754:	d50b      	bpl.n	800776e <_dtoa_r+0x292>
 8007756:	4b3d      	ldr	r3, [pc, #244]	; (800784c <_dtoa_r+0x370>)
 8007758:	400c      	ands	r4, r1
 800775a:	6a1a      	ldr	r2, [r3, #32]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007760:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007762:	f7f9 f9b3 	bl	8000acc <__aeabi_ddiv>
 8007766:	2303      	movs	r3, #3
 8007768:	9006      	str	r0, [sp, #24]
 800776a:	9107      	str	r1, [sp, #28]
 800776c:	930e      	str	r3, [sp, #56]	; 0x38
 800776e:	2300      	movs	r3, #0
 8007770:	e03a      	b.n	80077e8 <_dtoa_r+0x30c>
 8007772:	2301      	movs	r3, #1
 8007774:	930d      	str	r3, [sp, #52]	; 0x34
 8007776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	930c      	str	r3, [sp, #48]	; 0x30
 800777c:	3301      	adds	r3, #1
 800777e:	9309      	str	r3, [sp, #36]	; 0x24
 8007780:	2b00      	cmp	r3, #0
 8007782:	dcbb      	bgt.n	80076fc <_dtoa_r+0x220>
 8007784:	2301      	movs	r3, #1
 8007786:	e7b9      	b.n	80076fc <_dtoa_r+0x220>
 8007788:	2300      	movs	r3, #0
 800778a:	e7b1      	b.n	80076f0 <_dtoa_r+0x214>
 800778c:	2300      	movs	r3, #0
 800778e:	e7f1      	b.n	8007774 <_dtoa_r+0x298>
 8007790:	2300      	movs	r3, #0
 8007792:	940d      	str	r4, [sp, #52]	; 0x34
 8007794:	9320      	str	r3, [sp, #128]	; 0x80
 8007796:	3b01      	subs	r3, #1
 8007798:	2200      	movs	r2, #0
 800779a:	930c      	str	r3, [sp, #48]	; 0x30
 800779c:	9309      	str	r3, [sp, #36]	; 0x24
 800779e:	3313      	adds	r3, #19
 80077a0:	9221      	str	r2, [sp, #132]	; 0x84
 80077a2:	e7ab      	b.n	80076fc <_dtoa_r+0x220>
 80077a4:	2301      	movs	r3, #1
 80077a6:	930d      	str	r3, [sp, #52]	; 0x34
 80077a8:	3b02      	subs	r3, #2
 80077aa:	e7f5      	b.n	8007798 <_dtoa_r+0x2bc>
 80077ac:	2301      	movs	r3, #1
 80077ae:	930c      	str	r3, [sp, #48]	; 0x30
 80077b0:	9309      	str	r3, [sp, #36]	; 0x24
 80077b2:	001a      	movs	r2, r3
 80077b4:	e7f4      	b.n	80077a0 <_dtoa_r+0x2c4>
 80077b6:	3101      	adds	r1, #1
 80077b8:	6069      	str	r1, [r5, #4]
 80077ba:	0052      	lsls	r2, r2, #1
 80077bc:	e7a3      	b.n	8007706 <_dtoa_r+0x22a>
 80077be:	2301      	movs	r3, #1
 80077c0:	421c      	tst	r4, r3
 80077c2:	d00e      	beq.n	80077e2 <_dtoa_r+0x306>
 80077c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c6:	4a21      	ldr	r2, [pc, #132]	; (800784c <_dtoa_r+0x370>)
 80077c8:	3301      	adds	r3, #1
 80077ca:	930e      	str	r3, [sp, #56]	; 0x38
 80077cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077ce:	0028      	movs	r0, r5
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	189b      	adds	r3, r3, r2
 80077d4:	0031      	movs	r1, r6
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f7f9 fd81 	bl	80012e0 <__aeabi_dmul>
 80077de:	0005      	movs	r5, r0
 80077e0:	000e      	movs	r6, r1
 80077e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077e4:	1064      	asrs	r4, r4, #1
 80077e6:	3301      	adds	r3, #1
 80077e8:	9310      	str	r3, [sp, #64]	; 0x40
 80077ea:	2c00      	cmp	r4, #0
 80077ec:	d1e7      	bne.n	80077be <_dtoa_r+0x2e2>
 80077ee:	9806      	ldr	r0, [sp, #24]
 80077f0:	9907      	ldr	r1, [sp, #28]
 80077f2:	002a      	movs	r2, r5
 80077f4:	0033      	movs	r3, r6
 80077f6:	f7f9 f969 	bl	8000acc <__aeabi_ddiv>
 80077fa:	9006      	str	r0, [sp, #24]
 80077fc:	9107      	str	r1, [sp, #28]
 80077fe:	e042      	b.n	8007886 <_dtoa_r+0x3aa>
 8007800:	7ff00000 	.word	0x7ff00000
 8007804:	0000270f 	.word	0x0000270f
 8007808:	08009693 	.word	0x08009693
 800780c:	08009696 	.word	0x08009696
 8007810:	08009688 	.word	0x08009688
 8007814:	08009689 	.word	0x08009689
 8007818:	3ff00000 	.word	0x3ff00000
 800781c:	fffffc01 	.word	0xfffffc01
 8007820:	3ff80000 	.word	0x3ff80000
 8007824:	636f4361 	.word	0x636f4361
 8007828:	3fd287a7 	.word	0x3fd287a7
 800782c:	8b60c8b3 	.word	0x8b60c8b3
 8007830:	3fc68a28 	.word	0x3fc68a28
 8007834:	509f79fb 	.word	0x509f79fb
 8007838:	3fd34413 	.word	0x3fd34413
 800783c:	080096c0 	.word	0x080096c0
 8007840:	00000432 	.word	0x00000432
 8007844:	00000412 	.word	0x00000412
 8007848:	fe100000 	.word	0xfe100000
 800784c:	08009698 	.word	0x08009698
 8007850:	2302      	movs	r3, #2
 8007852:	930e      	str	r3, [sp, #56]	; 0x38
 8007854:	2f00      	cmp	r7, #0
 8007856:	d016      	beq.n	8007886 <_dtoa_r+0x3aa>
 8007858:	9812      	ldr	r0, [sp, #72]	; 0x48
 800785a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800785c:	427c      	negs	r4, r7
 800785e:	330d      	adds	r3, #13
 8007860:	4023      	ands	r3, r4
 8007862:	4ace      	ldr	r2, [pc, #824]	; (8007b9c <_dtoa_r+0x6c0>)
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	18d3      	adds	r3, r2, r3
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f7f9 fd38 	bl	80012e0 <__aeabi_dmul>
 8007870:	2300      	movs	r3, #0
 8007872:	2601      	movs	r6, #1
 8007874:	001d      	movs	r5, r3
 8007876:	9006      	str	r0, [sp, #24]
 8007878:	9107      	str	r1, [sp, #28]
 800787a:	1124      	asrs	r4, r4, #4
 800787c:	2c00      	cmp	r4, #0
 800787e:	d000      	beq.n	8007882 <_dtoa_r+0x3a6>
 8007880:	e08c      	b.n	800799c <_dtoa_r+0x4c0>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1b9      	bne.n	80077fa <_dtoa_r+0x31e>
 8007886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007888:	2b00      	cmp	r3, #0
 800788a:	d100      	bne.n	800788e <_dtoa_r+0x3b2>
 800788c:	e096      	b.n	80079bc <_dtoa_r+0x4e0>
 800788e:	9c06      	ldr	r4, [sp, #24]
 8007890:	9d07      	ldr	r5, [sp, #28]
 8007892:	2200      	movs	r2, #0
 8007894:	4bc2      	ldr	r3, [pc, #776]	; (8007ba0 <_dtoa_r+0x6c4>)
 8007896:	0020      	movs	r0, r4
 8007898:	0029      	movs	r1, r5
 800789a:	f7f8 fdd3 	bl	8000444 <__aeabi_dcmplt>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d100      	bne.n	80078a4 <_dtoa_r+0x3c8>
 80078a2:	e08b      	b.n	80079bc <_dtoa_r+0x4e0>
 80078a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d100      	bne.n	80078ac <_dtoa_r+0x3d0>
 80078aa:	e087      	b.n	80079bc <_dtoa_r+0x4e0>
 80078ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	dd41      	ble.n	8007936 <_dtoa_r+0x45a>
 80078b2:	4bbc      	ldr	r3, [pc, #752]	; (8007ba4 <_dtoa_r+0x6c8>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	0020      	movs	r0, r4
 80078b8:	0029      	movs	r1, r5
 80078ba:	f7f9 fd11 	bl	80012e0 <__aeabi_dmul>
 80078be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078c0:	9006      	str	r0, [sp, #24]
 80078c2:	9107      	str	r1, [sp, #28]
 80078c4:	3301      	adds	r3, #1
 80078c6:	930e      	str	r3, [sp, #56]	; 0x38
 80078c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078ca:	1e7e      	subs	r6, r7, #1
 80078cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80078ce:	9310      	str	r3, [sp, #64]	; 0x40
 80078d0:	f7fa fb12 	bl	8001ef8 <__aeabi_i2d>
 80078d4:	9a06      	ldr	r2, [sp, #24]
 80078d6:	9b07      	ldr	r3, [sp, #28]
 80078d8:	f7f9 fd02 	bl	80012e0 <__aeabi_dmul>
 80078dc:	2200      	movs	r2, #0
 80078de:	4bb2      	ldr	r3, [pc, #712]	; (8007ba8 <_dtoa_r+0x6cc>)
 80078e0:	f7f8 fdd8 	bl	8000494 <__aeabi_dadd>
 80078e4:	4ab1      	ldr	r2, [pc, #708]	; (8007bac <_dtoa_r+0x6d0>)
 80078e6:	900e      	str	r0, [sp, #56]	; 0x38
 80078e8:	910f      	str	r1, [sp, #60]	; 0x3c
 80078ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80078ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80078ee:	4694      	mov	ip, r2
 80078f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078f2:	4463      	add	r3, ip
 80078f4:	9315      	str	r3, [sp, #84]	; 0x54
 80078f6:	001d      	movs	r5, r3
 80078f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d161      	bne.n	80079c2 <_dtoa_r+0x4e6>
 80078fe:	9806      	ldr	r0, [sp, #24]
 8007900:	9907      	ldr	r1, [sp, #28]
 8007902:	2200      	movs	r2, #0
 8007904:	4baa      	ldr	r3, [pc, #680]	; (8007bb0 <_dtoa_r+0x6d4>)
 8007906:	f7f9 ff5d 	bl	80017c4 <__aeabi_dsub>
 800790a:	0022      	movs	r2, r4
 800790c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800790e:	9006      	str	r0, [sp, #24]
 8007910:	9107      	str	r1, [sp, #28]
 8007912:	f7f8 fdab 	bl	800046c <__aeabi_dcmpgt>
 8007916:	2800      	cmp	r0, #0
 8007918:	d000      	beq.n	800791c <_dtoa_r+0x440>
 800791a:	e2a8      	b.n	8007e6e <_dtoa_r+0x992>
 800791c:	48a5      	ldr	r0, [pc, #660]	; (8007bb4 <_dtoa_r+0x6d8>)
 800791e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007920:	4684      	mov	ip, r0
 8007922:	4461      	add	r1, ip
 8007924:	000b      	movs	r3, r1
 8007926:	9806      	ldr	r0, [sp, #24]
 8007928:	9907      	ldr	r1, [sp, #28]
 800792a:	0022      	movs	r2, r4
 800792c:	f7f8 fd8a 	bl	8000444 <__aeabi_dcmplt>
 8007930:	2800      	cmp	r0, #0
 8007932:	d000      	beq.n	8007936 <_dtoa_r+0x45a>
 8007934:	e295      	b.n	8007e62 <_dtoa_r+0x986>
 8007936:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007938:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800793a:	9306      	str	r3, [sp, #24]
 800793c:	9407      	str	r4, [sp, #28]
 800793e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007940:	2b00      	cmp	r3, #0
 8007942:	da00      	bge.n	8007946 <_dtoa_r+0x46a>
 8007944:	e15c      	b.n	8007c00 <_dtoa_r+0x724>
 8007946:	2f0e      	cmp	r7, #14
 8007948:	dd00      	ble.n	800794c <_dtoa_r+0x470>
 800794a:	e159      	b.n	8007c00 <_dtoa_r+0x724>
 800794c:	4b93      	ldr	r3, [pc, #588]	; (8007b9c <_dtoa_r+0x6c0>)
 800794e:	00fa      	lsls	r2, r7, #3
 8007950:	189b      	adds	r3, r3, r2
 8007952:	685c      	ldr	r4, [r3, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	9405      	str	r4, [sp, #20]
 800795a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800795c:	2b00      	cmp	r3, #0
 800795e:	db00      	blt.n	8007962 <_dtoa_r+0x486>
 8007960:	e0d8      	b.n	8007b14 <_dtoa_r+0x638>
 8007962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	dd00      	ble.n	800796a <_dtoa_r+0x48e>
 8007968:	e0d4      	b.n	8007b14 <_dtoa_r+0x638>
 800796a:	d000      	beq.n	800796e <_dtoa_r+0x492>
 800796c:	e27d      	b.n	8007e6a <_dtoa_r+0x98e>
 800796e:	9804      	ldr	r0, [sp, #16]
 8007970:	9905      	ldr	r1, [sp, #20]
 8007972:	2200      	movs	r2, #0
 8007974:	4b8e      	ldr	r3, [pc, #568]	; (8007bb0 <_dtoa_r+0x6d4>)
 8007976:	f7f9 fcb3 	bl	80012e0 <__aeabi_dmul>
 800797a:	9a06      	ldr	r2, [sp, #24]
 800797c:	9b07      	ldr	r3, [sp, #28]
 800797e:	f7f8 fd7f 	bl	8000480 <__aeabi_dcmpge>
 8007982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007984:	9304      	str	r3, [sp, #16]
 8007986:	001e      	movs	r6, r3
 8007988:	2800      	cmp	r0, #0
 800798a:	d000      	beq.n	800798e <_dtoa_r+0x4b2>
 800798c:	e24f      	b.n	8007e2e <_dtoa_r+0x952>
 800798e:	9b08      	ldr	r3, [sp, #32]
 8007990:	9a08      	ldr	r2, [sp, #32]
 8007992:	1c5d      	adds	r5, r3, #1
 8007994:	2331      	movs	r3, #49	; 0x31
 8007996:	3701      	adds	r7, #1
 8007998:	7013      	strb	r3, [r2, #0]
 800799a:	e24b      	b.n	8007e34 <_dtoa_r+0x958>
 800799c:	4234      	tst	r4, r6
 800799e:	d00a      	beq.n	80079b6 <_dtoa_r+0x4da>
 80079a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079a2:	4a85      	ldr	r2, [pc, #532]	; (8007bb8 <_dtoa_r+0x6dc>)
 80079a4:	3301      	adds	r3, #1
 80079a6:	930e      	str	r3, [sp, #56]	; 0x38
 80079a8:	00eb      	lsls	r3, r5, #3
 80079aa:	189b      	adds	r3, r3, r2
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f7f9 fc96 	bl	80012e0 <__aeabi_dmul>
 80079b4:	0033      	movs	r3, r6
 80079b6:	1064      	asrs	r4, r4, #1
 80079b8:	3501      	adds	r5, #1
 80079ba:	e75f      	b.n	800787c <_dtoa_r+0x3a0>
 80079bc:	003e      	movs	r6, r7
 80079be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c0:	e784      	b.n	80078cc <_dtoa_r+0x3f0>
 80079c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80079c6:	1e5a      	subs	r2, r3, #1
 80079c8:	4b74      	ldr	r3, [pc, #464]	; (8007b9c <_dtoa_r+0x6c0>)
 80079ca:	00d2      	lsls	r2, r2, #3
 80079cc:	189b      	adds	r3, r3, r2
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2900      	cmp	r1, #0
 80079d4:	d049      	beq.n	8007a6a <_dtoa_r+0x58e>
 80079d6:	2000      	movs	r0, #0
 80079d8:	4978      	ldr	r1, [pc, #480]	; (8007bbc <_dtoa_r+0x6e0>)
 80079da:	f7f9 f877 	bl	8000acc <__aeabi_ddiv>
 80079de:	002b      	movs	r3, r5
 80079e0:	0022      	movs	r2, r4
 80079e2:	f7f9 feef 	bl	80017c4 <__aeabi_dsub>
 80079e6:	9b08      	ldr	r3, [sp, #32]
 80079e8:	900e      	str	r0, [sp, #56]	; 0x38
 80079ea:	910f      	str	r1, [sp, #60]	; 0x3c
 80079ec:	9315      	str	r3, [sp, #84]	; 0x54
 80079ee:	9806      	ldr	r0, [sp, #24]
 80079f0:	9907      	ldr	r1, [sp, #28]
 80079f2:	f7fa fa4b 	bl	8001e8c <__aeabi_d2iz>
 80079f6:	0004      	movs	r4, r0
 80079f8:	f7fa fa7e 	bl	8001ef8 <__aeabi_i2d>
 80079fc:	0002      	movs	r2, r0
 80079fe:	000b      	movs	r3, r1
 8007a00:	9806      	ldr	r0, [sp, #24]
 8007a02:	9907      	ldr	r1, [sp, #28]
 8007a04:	f7f9 fede 	bl	80017c4 <__aeabi_dsub>
 8007a08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a0a:	3430      	adds	r4, #48	; 0x30
 8007a0c:	1c5d      	adds	r5, r3, #1
 8007a0e:	701c      	strb	r4, [r3, #0]
 8007a10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a14:	9006      	str	r0, [sp, #24]
 8007a16:	9107      	str	r1, [sp, #28]
 8007a18:	f7f8 fd14 	bl	8000444 <__aeabi_dcmplt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d16c      	bne.n	8007afa <_dtoa_r+0x61e>
 8007a20:	9a06      	ldr	r2, [sp, #24]
 8007a22:	9b07      	ldr	r3, [sp, #28]
 8007a24:	2000      	movs	r0, #0
 8007a26:	495e      	ldr	r1, [pc, #376]	; (8007ba0 <_dtoa_r+0x6c4>)
 8007a28:	f7f9 fecc 	bl	80017c4 <__aeabi_dsub>
 8007a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a30:	f7f8 fd08 	bl	8000444 <__aeabi_dcmplt>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d000      	beq.n	8007a3a <_dtoa_r+0x55e>
 8007a38:	e0c3      	b.n	8007bc2 <_dtoa_r+0x6e6>
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a3e:	1aeb      	subs	r3, r5, r3
 8007a40:	429a      	cmp	r2, r3
 8007a42:	dc00      	bgt.n	8007a46 <_dtoa_r+0x56a>
 8007a44:	e777      	b.n	8007936 <_dtoa_r+0x45a>
 8007a46:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4b55      	ldr	r3, [pc, #340]	; (8007ba4 <_dtoa_r+0x6c8>)
 8007a4e:	f7f9 fc47 	bl	80012e0 <__aeabi_dmul>
 8007a52:	2200      	movs	r2, #0
 8007a54:	900e      	str	r0, [sp, #56]	; 0x38
 8007a56:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a58:	9806      	ldr	r0, [sp, #24]
 8007a5a:	9907      	ldr	r1, [sp, #28]
 8007a5c:	4b51      	ldr	r3, [pc, #324]	; (8007ba4 <_dtoa_r+0x6c8>)
 8007a5e:	f7f9 fc3f 	bl	80012e0 <__aeabi_dmul>
 8007a62:	9515      	str	r5, [sp, #84]	; 0x54
 8007a64:	9006      	str	r0, [sp, #24]
 8007a66:	9107      	str	r1, [sp, #28]
 8007a68:	e7c1      	b.n	80079ee <_dtoa_r+0x512>
 8007a6a:	0020      	movs	r0, r4
 8007a6c:	0029      	movs	r1, r5
 8007a6e:	f7f9 fc37 	bl	80012e0 <__aeabi_dmul>
 8007a72:	9c08      	ldr	r4, [sp, #32]
 8007a74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a76:	0023      	movs	r3, r4
 8007a78:	4694      	mov	ip, r2
 8007a7a:	900e      	str	r0, [sp, #56]	; 0x38
 8007a7c:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a7e:	4463      	add	r3, ip
 8007a80:	9315      	str	r3, [sp, #84]	; 0x54
 8007a82:	9806      	ldr	r0, [sp, #24]
 8007a84:	9907      	ldr	r1, [sp, #28]
 8007a86:	f7fa fa01 	bl	8001e8c <__aeabi_d2iz>
 8007a8a:	0005      	movs	r5, r0
 8007a8c:	f7fa fa34 	bl	8001ef8 <__aeabi_i2d>
 8007a90:	000b      	movs	r3, r1
 8007a92:	0002      	movs	r2, r0
 8007a94:	9806      	ldr	r0, [sp, #24]
 8007a96:	9907      	ldr	r1, [sp, #28]
 8007a98:	f7f9 fe94 	bl	80017c4 <__aeabi_dsub>
 8007a9c:	3530      	adds	r5, #48	; 0x30
 8007a9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007aa0:	7025      	strb	r5, [r4, #0]
 8007aa2:	3401      	adds	r4, #1
 8007aa4:	9006      	str	r0, [sp, #24]
 8007aa6:	9107      	str	r1, [sp, #28]
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d12a      	bne.n	8007b02 <_dtoa_r+0x626>
 8007aac:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007aae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ab0:	9a08      	ldr	r2, [sp, #32]
 8007ab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ab4:	4694      	mov	ip, r2
 8007ab6:	4463      	add	r3, ip
 8007ab8:	2200      	movs	r2, #0
 8007aba:	001d      	movs	r5, r3
 8007abc:	4b3f      	ldr	r3, [pc, #252]	; (8007bbc <_dtoa_r+0x6e0>)
 8007abe:	f7f8 fce9 	bl	8000494 <__aeabi_dadd>
 8007ac2:	0002      	movs	r2, r0
 8007ac4:	000b      	movs	r3, r1
 8007ac6:	9806      	ldr	r0, [sp, #24]
 8007ac8:	9907      	ldr	r1, [sp, #28]
 8007aca:	f7f8 fccf 	bl	800046c <__aeabi_dcmpgt>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d000      	beq.n	8007ad4 <_dtoa_r+0x5f8>
 8007ad2:	e076      	b.n	8007bc2 <_dtoa_r+0x6e6>
 8007ad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ad8:	2000      	movs	r0, #0
 8007ada:	4938      	ldr	r1, [pc, #224]	; (8007bbc <_dtoa_r+0x6e0>)
 8007adc:	f7f9 fe72 	bl	80017c4 <__aeabi_dsub>
 8007ae0:	0002      	movs	r2, r0
 8007ae2:	000b      	movs	r3, r1
 8007ae4:	9806      	ldr	r0, [sp, #24]
 8007ae6:	9907      	ldr	r1, [sp, #28]
 8007ae8:	f7f8 fcac 	bl	8000444 <__aeabi_dcmplt>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d100      	bne.n	8007af2 <_dtoa_r+0x616>
 8007af0:	e721      	b.n	8007936 <_dtoa_r+0x45a>
 8007af2:	1e6b      	subs	r3, r5, #1
 8007af4:	781a      	ldrb	r2, [r3, #0]
 8007af6:	2a30      	cmp	r2, #48	; 0x30
 8007af8:	d001      	beq.n	8007afe <_dtoa_r+0x622>
 8007afa:	0037      	movs	r7, r6
 8007afc:	e03f      	b.n	8007b7e <_dtoa_r+0x6a2>
 8007afe:	001d      	movs	r5, r3
 8007b00:	e7f7      	b.n	8007af2 <_dtoa_r+0x616>
 8007b02:	9806      	ldr	r0, [sp, #24]
 8007b04:	9907      	ldr	r1, [sp, #28]
 8007b06:	2200      	movs	r2, #0
 8007b08:	4b26      	ldr	r3, [pc, #152]	; (8007ba4 <_dtoa_r+0x6c8>)
 8007b0a:	f7f9 fbe9 	bl	80012e0 <__aeabi_dmul>
 8007b0e:	9006      	str	r0, [sp, #24]
 8007b10:	9107      	str	r1, [sp, #28]
 8007b12:	e7b6      	b.n	8007a82 <_dtoa_r+0x5a6>
 8007b14:	9e08      	ldr	r6, [sp, #32]
 8007b16:	9a04      	ldr	r2, [sp, #16]
 8007b18:	9b05      	ldr	r3, [sp, #20]
 8007b1a:	9806      	ldr	r0, [sp, #24]
 8007b1c:	9907      	ldr	r1, [sp, #28]
 8007b1e:	f7f8 ffd5 	bl	8000acc <__aeabi_ddiv>
 8007b22:	f7fa f9b3 	bl	8001e8c <__aeabi_d2iz>
 8007b26:	0004      	movs	r4, r0
 8007b28:	f7fa f9e6 	bl	8001ef8 <__aeabi_i2d>
 8007b2c:	9a04      	ldr	r2, [sp, #16]
 8007b2e:	9b05      	ldr	r3, [sp, #20]
 8007b30:	f7f9 fbd6 	bl	80012e0 <__aeabi_dmul>
 8007b34:	0002      	movs	r2, r0
 8007b36:	000b      	movs	r3, r1
 8007b38:	9806      	ldr	r0, [sp, #24]
 8007b3a:	9907      	ldr	r1, [sp, #28]
 8007b3c:	f7f9 fe42 	bl	80017c4 <__aeabi_dsub>
 8007b40:	0023      	movs	r3, r4
 8007b42:	3330      	adds	r3, #48	; 0x30
 8007b44:	7033      	strb	r3, [r6, #0]
 8007b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b48:	9b08      	ldr	r3, [sp, #32]
 8007b4a:	1c75      	adds	r5, r6, #1
 8007b4c:	1aeb      	subs	r3, r5, r3
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d148      	bne.n	8007be4 <_dtoa_r+0x708>
 8007b52:	0002      	movs	r2, r0
 8007b54:	000b      	movs	r3, r1
 8007b56:	f7f8 fc9d 	bl	8000494 <__aeabi_dadd>
 8007b5a:	9a04      	ldr	r2, [sp, #16]
 8007b5c:	9b05      	ldr	r3, [sp, #20]
 8007b5e:	9006      	str	r0, [sp, #24]
 8007b60:	9107      	str	r1, [sp, #28]
 8007b62:	f7f8 fc83 	bl	800046c <__aeabi_dcmpgt>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d12a      	bne.n	8007bc0 <_dtoa_r+0x6e4>
 8007b6a:	9a04      	ldr	r2, [sp, #16]
 8007b6c:	9b05      	ldr	r3, [sp, #20]
 8007b6e:	9806      	ldr	r0, [sp, #24]
 8007b70:	9907      	ldr	r1, [sp, #28]
 8007b72:	f7f8 fc61 	bl	8000438 <__aeabi_dcmpeq>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d001      	beq.n	8007b7e <_dtoa_r+0x6a2>
 8007b7a:	07e3      	lsls	r3, r4, #31
 8007b7c:	d420      	bmi.n	8007bc0 <_dtoa_r+0x6e4>
 8007b7e:	9903      	ldr	r1, [sp, #12]
 8007b80:	9802      	ldr	r0, [sp, #8]
 8007b82:	f000 fae2 	bl	800814a <_Bfree>
 8007b86:	2300      	movs	r3, #0
 8007b88:	702b      	strb	r3, [r5, #0]
 8007b8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b8c:	3701      	adds	r7, #1
 8007b8e:	601f      	str	r7, [r3, #0]
 8007b90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d100      	bne.n	8007b98 <_dtoa_r+0x6bc>
 8007b96:	e4e6      	b.n	8007566 <_dtoa_r+0x8a>
 8007b98:	601d      	str	r5, [r3, #0]
 8007b9a:	e4e4      	b.n	8007566 <_dtoa_r+0x8a>
 8007b9c:	080096c0 	.word	0x080096c0
 8007ba0:	3ff00000 	.word	0x3ff00000
 8007ba4:	40240000 	.word	0x40240000
 8007ba8:	401c0000 	.word	0x401c0000
 8007bac:	fcc00000 	.word	0xfcc00000
 8007bb0:	40140000 	.word	0x40140000
 8007bb4:	7cc00000 	.word	0x7cc00000
 8007bb8:	08009698 	.word	0x08009698
 8007bbc:	3fe00000 	.word	0x3fe00000
 8007bc0:	003e      	movs	r6, r7
 8007bc2:	1e6b      	subs	r3, r5, #1
 8007bc4:	781a      	ldrb	r2, [r3, #0]
 8007bc6:	2a39      	cmp	r2, #57	; 0x39
 8007bc8:	d106      	bne.n	8007bd8 <_dtoa_r+0x6fc>
 8007bca:	9a08      	ldr	r2, [sp, #32]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d107      	bne.n	8007be0 <_dtoa_r+0x704>
 8007bd0:	2330      	movs	r3, #48	; 0x30
 8007bd2:	7013      	strb	r3, [r2, #0]
 8007bd4:	0013      	movs	r3, r2
 8007bd6:	3601      	adds	r6, #1
 8007bd8:	781a      	ldrb	r2, [r3, #0]
 8007bda:	3201      	adds	r2, #1
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	e78c      	b.n	8007afa <_dtoa_r+0x61e>
 8007be0:	001d      	movs	r5, r3
 8007be2:	e7ee      	b.n	8007bc2 <_dtoa_r+0x6e6>
 8007be4:	2200      	movs	r2, #0
 8007be6:	4ba4      	ldr	r3, [pc, #656]	; (8007e78 <_dtoa_r+0x99c>)
 8007be8:	f7f9 fb7a 	bl	80012e0 <__aeabi_dmul>
 8007bec:	2200      	movs	r2, #0
 8007bee:	2300      	movs	r3, #0
 8007bf0:	9006      	str	r0, [sp, #24]
 8007bf2:	9107      	str	r1, [sp, #28]
 8007bf4:	002e      	movs	r6, r5
 8007bf6:	f7f8 fc1f 	bl	8000438 <__aeabi_dcmpeq>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d08b      	beq.n	8007b16 <_dtoa_r+0x63a>
 8007bfe:	e7be      	b.n	8007b7e <_dtoa_r+0x6a2>
 8007c00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c02:	2a00      	cmp	r2, #0
 8007c04:	d100      	bne.n	8007c08 <_dtoa_r+0x72c>
 8007c06:	e0da      	b.n	8007dbe <_dtoa_r+0x8e2>
 8007c08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c0a:	2a01      	cmp	r2, #1
 8007c0c:	dd00      	ble.n	8007c10 <_dtoa_r+0x734>
 8007c0e:	e0bd      	b.n	8007d8c <_dtoa_r+0x8b0>
 8007c10:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c12:	2a00      	cmp	r2, #0
 8007c14:	d100      	bne.n	8007c18 <_dtoa_r+0x73c>
 8007c16:	e0b5      	b.n	8007d84 <_dtoa_r+0x8a8>
 8007c18:	4a98      	ldr	r2, [pc, #608]	; (8007e7c <_dtoa_r+0x9a0>)
 8007c1a:	189b      	adds	r3, r3, r2
 8007c1c:	9d04      	ldr	r5, [sp, #16]
 8007c1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c22:	2101      	movs	r1, #1
 8007c24:	18d2      	adds	r2, r2, r3
 8007c26:	920a      	str	r2, [sp, #40]	; 0x28
 8007c28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c2a:	9802      	ldr	r0, [sp, #8]
 8007c2c:	18d3      	adds	r3, r2, r3
 8007c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c30:	f000 fb2b 	bl	800828a <__i2b>
 8007c34:	0006      	movs	r6, r0
 8007c36:	2c00      	cmp	r4, #0
 8007c38:	dd0e      	ble.n	8007c58 <_dtoa_r+0x77c>
 8007c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dd0b      	ble.n	8007c58 <_dtoa_r+0x77c>
 8007c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c42:	0023      	movs	r3, r4
 8007c44:	4294      	cmp	r4, r2
 8007c46:	dd00      	ble.n	8007c4a <_dtoa_r+0x76e>
 8007c48:	0013      	movs	r3, r2
 8007c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c4c:	1ae4      	subs	r4, r4, r3
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	920a      	str	r2, [sp, #40]	; 0x28
 8007c52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c58:	9b04      	ldr	r3, [sp, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01f      	beq.n	8007c9e <_dtoa_r+0x7c2>
 8007c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d100      	bne.n	8007c66 <_dtoa_r+0x78a>
 8007c64:	e0af      	b.n	8007dc6 <_dtoa_r+0x8ea>
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	d011      	beq.n	8007c8e <_dtoa_r+0x7b2>
 8007c6a:	0031      	movs	r1, r6
 8007c6c:	002a      	movs	r2, r5
 8007c6e:	9802      	ldr	r0, [sp, #8]
 8007c70:	f000 fba4 	bl	80083bc <__pow5mult>
 8007c74:	9a03      	ldr	r2, [sp, #12]
 8007c76:	0001      	movs	r1, r0
 8007c78:	0006      	movs	r6, r0
 8007c7a:	9802      	ldr	r0, [sp, #8]
 8007c7c:	f000 fb0e 	bl	800829c <__multiply>
 8007c80:	9903      	ldr	r1, [sp, #12]
 8007c82:	9010      	str	r0, [sp, #64]	; 0x40
 8007c84:	9802      	ldr	r0, [sp, #8]
 8007c86:	f000 fa60 	bl	800814a <_Bfree>
 8007c8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c8c:	9303      	str	r3, [sp, #12]
 8007c8e:	9b04      	ldr	r3, [sp, #16]
 8007c90:	1b5a      	subs	r2, r3, r5
 8007c92:	d004      	beq.n	8007c9e <_dtoa_r+0x7c2>
 8007c94:	9903      	ldr	r1, [sp, #12]
 8007c96:	9802      	ldr	r0, [sp, #8]
 8007c98:	f000 fb90 	bl	80083bc <__pow5mult>
 8007c9c:	9003      	str	r0, [sp, #12]
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	9802      	ldr	r0, [sp, #8]
 8007ca2:	f000 faf2 	bl	800828a <__i2b>
 8007ca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ca8:	9004      	str	r0, [sp, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d100      	bne.n	8007cb0 <_dtoa_r+0x7d4>
 8007cae:	e1e3      	b.n	8008078 <_dtoa_r+0xb9c>
 8007cb0:	001a      	movs	r2, r3
 8007cb2:	0001      	movs	r1, r0
 8007cb4:	9802      	ldr	r0, [sp, #8]
 8007cb6:	f000 fb81 	bl	80083bc <__pow5mult>
 8007cba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007cbc:	9004      	str	r0, [sp, #16]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	dd00      	ble.n	8007cc4 <_dtoa_r+0x7e8>
 8007cc2:	e082      	b.n	8007dca <_dtoa_r+0x8ee>
 8007cc4:	2500      	movs	r5, #0
 8007cc6:	9b06      	ldr	r3, [sp, #24]
 8007cc8:	42ab      	cmp	r3, r5
 8007cca:	d10e      	bne.n	8007cea <_dtoa_r+0x80e>
 8007ccc:	9b07      	ldr	r3, [sp, #28]
 8007cce:	031b      	lsls	r3, r3, #12
 8007cd0:	42ab      	cmp	r3, r5
 8007cd2:	d10a      	bne.n	8007cea <_dtoa_r+0x80e>
 8007cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cd6:	9a07      	ldr	r2, [sp, #28]
 8007cd8:	4213      	tst	r3, r2
 8007cda:	d006      	beq.n	8007cea <_dtoa_r+0x80e>
 8007cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cde:	3501      	adds	r5, #1
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cec:	2001      	movs	r0, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d16c      	bne.n	8007dcc <_dtoa_r+0x8f0>
 8007cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cf4:	1818      	adds	r0, r3, r0
 8007cf6:	231f      	movs	r3, #31
 8007cf8:	4018      	ands	r0, r3
 8007cfa:	d07e      	beq.n	8007dfa <_dtoa_r+0x91e>
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	1a1b      	subs	r3, r3, r0
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	dd70      	ble.n	8007de6 <_dtoa_r+0x90a>
 8007d04:	231c      	movs	r3, #28
 8007d06:	1a18      	subs	r0, r3, r0
 8007d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d0a:	1824      	adds	r4, r4, r0
 8007d0c:	181b      	adds	r3, r3, r0
 8007d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d12:	181b      	adds	r3, r3, r0
 8007d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dd05      	ble.n	8007d28 <_dtoa_r+0x84c>
 8007d1c:	001a      	movs	r2, r3
 8007d1e:	9903      	ldr	r1, [sp, #12]
 8007d20:	9802      	ldr	r0, [sp, #8]
 8007d22:	f000 fb9d 	bl	8008460 <__lshift>
 8007d26:	9003      	str	r0, [sp, #12]
 8007d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	dd05      	ble.n	8007d3a <_dtoa_r+0x85e>
 8007d2e:	001a      	movs	r2, r3
 8007d30:	9904      	ldr	r1, [sp, #16]
 8007d32:	9802      	ldr	r0, [sp, #8]
 8007d34:	f000 fb94 	bl	8008460 <__lshift>
 8007d38:	9004      	str	r0, [sp, #16]
 8007d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d05e      	beq.n	8007dfe <_dtoa_r+0x922>
 8007d40:	9904      	ldr	r1, [sp, #16]
 8007d42:	9803      	ldr	r0, [sp, #12]
 8007d44:	f000 fbde 	bl	8008504 <__mcmp>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	da58      	bge.n	8007dfe <_dtoa_r+0x922>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	220a      	movs	r2, #10
 8007d50:	9903      	ldr	r1, [sp, #12]
 8007d52:	9802      	ldr	r0, [sp, #8]
 8007d54:	f000 fa12 	bl	800817c <__multadd>
 8007d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d5a:	3f01      	subs	r7, #1
 8007d5c:	9003      	str	r0, [sp, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d100      	bne.n	8007d64 <_dtoa_r+0x888>
 8007d62:	e190      	b.n	8008086 <_dtoa_r+0xbaa>
 8007d64:	2300      	movs	r3, #0
 8007d66:	0031      	movs	r1, r6
 8007d68:	220a      	movs	r2, #10
 8007d6a:	9802      	ldr	r0, [sp, #8]
 8007d6c:	f000 fa06 	bl	800817c <__multadd>
 8007d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d72:	0006      	movs	r6, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dd00      	ble.n	8007d7a <_dtoa_r+0x89e>
 8007d78:	e088      	b.n	8007e8c <_dtoa_r+0x9b0>
 8007d7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	dc00      	bgt.n	8007d82 <_dtoa_r+0x8a6>
 8007d80:	e084      	b.n	8007e8c <_dtoa_r+0x9b0>
 8007d82:	e044      	b.n	8007e0e <_dtoa_r+0x932>
 8007d84:	2336      	movs	r3, #54	; 0x36
 8007d86:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d88:	1a9b      	subs	r3, r3, r2
 8007d8a:	e747      	b.n	8007c1c <_dtoa_r+0x740>
 8007d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8e:	1e5d      	subs	r5, r3, #1
 8007d90:	9b04      	ldr	r3, [sp, #16]
 8007d92:	42ab      	cmp	r3, r5
 8007d94:	db08      	blt.n	8007da8 <_dtoa_r+0x8cc>
 8007d96:	1b5d      	subs	r5, r3, r5
 8007d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	da0c      	bge.n	8007db8 <_dtoa_r+0x8dc>
 8007d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da2:	1a9c      	subs	r4, r3, r2
 8007da4:	2300      	movs	r3, #0
 8007da6:	e73b      	b.n	8007c20 <_dtoa_r+0x744>
 8007da8:	9b04      	ldr	r3, [sp, #16]
 8007daa:	9504      	str	r5, [sp, #16]
 8007dac:	1aea      	subs	r2, r5, r3
 8007dae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007db0:	2500      	movs	r5, #0
 8007db2:	189b      	adds	r3, r3, r2
 8007db4:	9311      	str	r3, [sp, #68]	; 0x44
 8007db6:	e7ef      	b.n	8007d98 <_dtoa_r+0x8bc>
 8007db8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dbc:	e730      	b.n	8007c20 <_dtoa_r+0x744>
 8007dbe:	9d04      	ldr	r5, [sp, #16]
 8007dc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dc2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007dc4:	e737      	b.n	8007c36 <_dtoa_r+0x75a>
 8007dc6:	9a04      	ldr	r2, [sp, #16]
 8007dc8:	e764      	b.n	8007c94 <_dtoa_r+0x7b8>
 8007dca:	2500      	movs	r5, #0
 8007dcc:	9b04      	ldr	r3, [sp, #16]
 8007dce:	9a04      	ldr	r2, [sp, #16]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	9310      	str	r3, [sp, #64]	; 0x40
 8007dd4:	3303      	adds	r3, #3
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	18d3      	adds	r3, r2, r3
 8007dda:	6858      	ldr	r0, [r3, #4]
 8007ddc:	f000 fa0c 	bl	80081f8 <__hi0bits>
 8007de0:	2320      	movs	r3, #32
 8007de2:	1a18      	subs	r0, r3, r0
 8007de4:	e785      	b.n	8007cf2 <_dtoa_r+0x816>
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d095      	beq.n	8007d16 <_dtoa_r+0x83a>
 8007dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dec:	331c      	adds	r3, #28
 8007dee:	18d2      	adds	r2, r2, r3
 8007df0:	920a      	str	r2, [sp, #40]	; 0x28
 8007df2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007df4:	18e4      	adds	r4, r4, r3
 8007df6:	18d3      	adds	r3, r2, r3
 8007df8:	e78c      	b.n	8007d14 <_dtoa_r+0x838>
 8007dfa:	0003      	movs	r3, r0
 8007dfc:	e7f5      	b.n	8007dea <_dtoa_r+0x90e>
 8007dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	dc3d      	bgt.n	8007e80 <_dtoa_r+0x9a4>
 8007e04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	dd3a      	ble.n	8007e80 <_dtoa_r+0x9a4>
 8007e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e0c:	930c      	str	r3, [sp, #48]	; 0x30
 8007e0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10c      	bne.n	8007e2e <_dtoa_r+0x952>
 8007e14:	9904      	ldr	r1, [sp, #16]
 8007e16:	2205      	movs	r2, #5
 8007e18:	9802      	ldr	r0, [sp, #8]
 8007e1a:	f000 f9af 	bl	800817c <__multadd>
 8007e1e:	9004      	str	r0, [sp, #16]
 8007e20:	0001      	movs	r1, r0
 8007e22:	9803      	ldr	r0, [sp, #12]
 8007e24:	f000 fb6e 	bl	8008504 <__mcmp>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	dd00      	ble.n	8007e2e <_dtoa_r+0x952>
 8007e2c:	e5af      	b.n	800798e <_dtoa_r+0x4b2>
 8007e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e30:	9d08      	ldr	r5, [sp, #32]
 8007e32:	43df      	mvns	r7, r3
 8007e34:	2300      	movs	r3, #0
 8007e36:	9309      	str	r3, [sp, #36]	; 0x24
 8007e38:	9904      	ldr	r1, [sp, #16]
 8007e3a:	9802      	ldr	r0, [sp, #8]
 8007e3c:	f000 f985 	bl	800814a <_Bfree>
 8007e40:	2e00      	cmp	r6, #0
 8007e42:	d100      	bne.n	8007e46 <_dtoa_r+0x96a>
 8007e44:	e69b      	b.n	8007b7e <_dtoa_r+0x6a2>
 8007e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <_dtoa_r+0x97c>
 8007e4c:	42b3      	cmp	r3, r6
 8007e4e:	d003      	beq.n	8007e58 <_dtoa_r+0x97c>
 8007e50:	0019      	movs	r1, r3
 8007e52:	9802      	ldr	r0, [sp, #8]
 8007e54:	f000 f979 	bl	800814a <_Bfree>
 8007e58:	0031      	movs	r1, r6
 8007e5a:	9802      	ldr	r0, [sp, #8]
 8007e5c:	f000 f975 	bl	800814a <_Bfree>
 8007e60:	e68d      	b.n	8007b7e <_dtoa_r+0x6a2>
 8007e62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e64:	9304      	str	r3, [sp, #16]
 8007e66:	001e      	movs	r6, r3
 8007e68:	e7e1      	b.n	8007e2e <_dtoa_r+0x952>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e7fa      	b.n	8007e64 <_dtoa_r+0x988>
 8007e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e70:	0037      	movs	r7, r6
 8007e72:	9304      	str	r3, [sp, #16]
 8007e74:	001e      	movs	r6, r3
 8007e76:	e58a      	b.n	800798e <_dtoa_r+0x4b2>
 8007e78:	40240000 	.word	0x40240000
 8007e7c:	00000433 	.word	0x00000433
 8007e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d100      	bne.n	8007e88 <_dtoa_r+0x9ac>
 8007e86:	e0b2      	b.n	8007fee <_dtoa_r+0xb12>
 8007e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e8c:	2c00      	cmp	r4, #0
 8007e8e:	dd05      	ble.n	8007e9c <_dtoa_r+0x9c0>
 8007e90:	0031      	movs	r1, r6
 8007e92:	0022      	movs	r2, r4
 8007e94:	9802      	ldr	r0, [sp, #8]
 8007e96:	f000 fae3 	bl	8008460 <__lshift>
 8007e9a:	0006      	movs	r6, r0
 8007e9c:	0030      	movs	r0, r6
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	d011      	beq.n	8007ec6 <_dtoa_r+0x9ea>
 8007ea2:	6871      	ldr	r1, [r6, #4]
 8007ea4:	9802      	ldr	r0, [sp, #8]
 8007ea6:	f000 f918 	bl	80080da <_Balloc>
 8007eaa:	0031      	movs	r1, r6
 8007eac:	0004      	movs	r4, r0
 8007eae:	6933      	ldr	r3, [r6, #16]
 8007eb0:	310c      	adds	r1, #12
 8007eb2:	1c9a      	adds	r2, r3, #2
 8007eb4:	0092      	lsls	r2, r2, #2
 8007eb6:	300c      	adds	r0, #12
 8007eb8:	f000 f906 	bl	80080c8 <memcpy>
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	0021      	movs	r1, r4
 8007ec0:	9802      	ldr	r0, [sp, #8]
 8007ec2:	f000 facd 	bl	8008460 <__lshift>
 8007ec6:	9609      	str	r6, [sp, #36]	; 0x24
 8007ec8:	0006      	movs	r6, r0
 8007eca:	9b08      	ldr	r3, [sp, #32]
 8007ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8007ece:	9904      	ldr	r1, [sp, #16]
 8007ed0:	9803      	ldr	r0, [sp, #12]
 8007ed2:	f7ff fa7c 	bl	80073ce <quorem>
 8007ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ed8:	900d      	str	r0, [sp, #52]	; 0x34
 8007eda:	0004      	movs	r4, r0
 8007edc:	9803      	ldr	r0, [sp, #12]
 8007ede:	f000 fb11 	bl	8008504 <__mcmp>
 8007ee2:	0032      	movs	r2, r6
 8007ee4:	9010      	str	r0, [sp, #64]	; 0x40
 8007ee6:	9904      	ldr	r1, [sp, #16]
 8007ee8:	9802      	ldr	r0, [sp, #8]
 8007eea:	f000 fb25 	bl	8008538 <__mdiff>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ef2:	68c3      	ldr	r3, [r0, #12]
 8007ef4:	3430      	adds	r4, #48	; 0x30
 8007ef6:	0005      	movs	r5, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d104      	bne.n	8007f06 <_dtoa_r+0xa2a>
 8007efc:	0001      	movs	r1, r0
 8007efe:	9803      	ldr	r0, [sp, #12]
 8007f00:	f000 fb00 	bl	8008504 <__mcmp>
 8007f04:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f06:	0029      	movs	r1, r5
 8007f08:	9802      	ldr	r0, [sp, #8]
 8007f0a:	f000 f91e 	bl	800814a <_Bfree>
 8007f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f12:	4313      	orrs	r3, r2
 8007f14:	d10e      	bne.n	8007f34 <_dtoa_r+0xa58>
 8007f16:	9a06      	ldr	r2, [sp, #24]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	4213      	tst	r3, r2
 8007f1c:	d10a      	bne.n	8007f34 <_dtoa_r+0xa58>
 8007f1e:	2c39      	cmp	r4, #57	; 0x39
 8007f20:	d026      	beq.n	8007f70 <_dtoa_r+0xa94>
 8007f22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dd01      	ble.n	8007f2c <_dtoa_r+0xa50>
 8007f28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007f2a:	3431      	adds	r4, #49	; 0x31
 8007f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f2e:	1c5d      	adds	r5, r3, #1
 8007f30:	701c      	strb	r4, [r3, #0]
 8007f32:	e781      	b.n	8007e38 <_dtoa_r+0x95c>
 8007f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	db07      	blt.n	8007f4a <_dtoa_r+0xa6e>
 8007f3a:	001d      	movs	r5, r3
 8007f3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007f3e:	431d      	orrs	r5, r3
 8007f40:	d122      	bne.n	8007f88 <_dtoa_r+0xaac>
 8007f42:	2301      	movs	r3, #1
 8007f44:	9a06      	ldr	r2, [sp, #24]
 8007f46:	4213      	tst	r3, r2
 8007f48:	d11e      	bne.n	8007f88 <_dtoa_r+0xaac>
 8007f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dded      	ble.n	8007f2c <_dtoa_r+0xa50>
 8007f50:	9903      	ldr	r1, [sp, #12]
 8007f52:	2201      	movs	r2, #1
 8007f54:	9802      	ldr	r0, [sp, #8]
 8007f56:	f000 fa83 	bl	8008460 <__lshift>
 8007f5a:	9904      	ldr	r1, [sp, #16]
 8007f5c:	9003      	str	r0, [sp, #12]
 8007f5e:	f000 fad1 	bl	8008504 <__mcmp>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	dc02      	bgt.n	8007f6c <_dtoa_r+0xa90>
 8007f66:	d1e1      	bne.n	8007f2c <_dtoa_r+0xa50>
 8007f68:	07e3      	lsls	r3, r4, #31
 8007f6a:	d5df      	bpl.n	8007f2c <_dtoa_r+0xa50>
 8007f6c:	2c39      	cmp	r4, #57	; 0x39
 8007f6e:	d1db      	bne.n	8007f28 <_dtoa_r+0xa4c>
 8007f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f74:	1c5d      	adds	r5, r3, #1
 8007f76:	2339      	movs	r3, #57	; 0x39
 8007f78:	7013      	strb	r3, [r2, #0]
 8007f7a:	1e6b      	subs	r3, r5, #1
 8007f7c:	781a      	ldrb	r2, [r3, #0]
 8007f7e:	2a39      	cmp	r2, #57	; 0x39
 8007f80:	d067      	beq.n	8008052 <_dtoa_r+0xb76>
 8007f82:	3201      	adds	r2, #1
 8007f84:	701a      	strb	r2, [r3, #0]
 8007f86:	e757      	b.n	8007e38 <_dtoa_r+0x95c>
 8007f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8a:	1c5d      	adds	r5, r3, #1
 8007f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	dd04      	ble.n	8007f9c <_dtoa_r+0xac0>
 8007f92:	2c39      	cmp	r4, #57	; 0x39
 8007f94:	d0ec      	beq.n	8007f70 <_dtoa_r+0xa94>
 8007f96:	3401      	adds	r4, #1
 8007f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9a:	e7c9      	b.n	8007f30 <_dtoa_r+0xa54>
 8007f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fa0:	701c      	strb	r4, [r3, #0]
 8007fa2:	9b08      	ldr	r3, [sp, #32]
 8007fa4:	1aeb      	subs	r3, r5, r3
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d03e      	beq.n	8008028 <_dtoa_r+0xb4c>
 8007faa:	2300      	movs	r3, #0
 8007fac:	220a      	movs	r2, #10
 8007fae:	9903      	ldr	r1, [sp, #12]
 8007fb0:	9802      	ldr	r0, [sp, #8]
 8007fb2:	f000 f8e3 	bl	800817c <__multadd>
 8007fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb8:	9003      	str	r0, [sp, #12]
 8007fba:	42b3      	cmp	r3, r6
 8007fbc:	d109      	bne.n	8007fd2 <_dtoa_r+0xaf6>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	220a      	movs	r2, #10
 8007fc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fc4:	9802      	ldr	r0, [sp, #8]
 8007fc6:	f000 f8d9 	bl	800817c <__multadd>
 8007fca:	9009      	str	r0, [sp, #36]	; 0x24
 8007fcc:	0006      	movs	r6, r0
 8007fce:	950a      	str	r5, [sp, #40]	; 0x28
 8007fd0:	e77d      	b.n	8007ece <_dtoa_r+0x9f2>
 8007fd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	220a      	movs	r2, #10
 8007fd8:	9802      	ldr	r0, [sp, #8]
 8007fda:	f000 f8cf 	bl	800817c <__multadd>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	9009      	str	r0, [sp, #36]	; 0x24
 8007fe2:	220a      	movs	r2, #10
 8007fe4:	0031      	movs	r1, r6
 8007fe6:	9802      	ldr	r0, [sp, #8]
 8007fe8:	f000 f8c8 	bl	800817c <__multadd>
 8007fec:	e7ee      	b.n	8007fcc <_dtoa_r+0xaf0>
 8007fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ff2:	9b08      	ldr	r3, [sp, #32]
 8007ff4:	9306      	str	r3, [sp, #24]
 8007ff6:	9904      	ldr	r1, [sp, #16]
 8007ff8:	9803      	ldr	r0, [sp, #12]
 8007ffa:	f7ff f9e8 	bl	80073ce <quorem>
 8007ffe:	9b06      	ldr	r3, [sp, #24]
 8008000:	3030      	adds	r0, #48	; 0x30
 8008002:	1c5d      	adds	r5, r3, #1
 8008004:	7018      	strb	r0, [r3, #0]
 8008006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008008:	9b08      	ldr	r3, [sp, #32]
 800800a:	0004      	movs	r4, r0
 800800c:	1aeb      	subs	r3, r5, r3
 800800e:	429a      	cmp	r2, r3
 8008010:	dd08      	ble.n	8008024 <_dtoa_r+0xb48>
 8008012:	2300      	movs	r3, #0
 8008014:	220a      	movs	r2, #10
 8008016:	9903      	ldr	r1, [sp, #12]
 8008018:	9802      	ldr	r0, [sp, #8]
 800801a:	f000 f8af 	bl	800817c <__multadd>
 800801e:	9506      	str	r5, [sp, #24]
 8008020:	9003      	str	r0, [sp, #12]
 8008022:	e7e8      	b.n	8007ff6 <_dtoa_r+0xb1a>
 8008024:	2300      	movs	r3, #0
 8008026:	9309      	str	r3, [sp, #36]	; 0x24
 8008028:	9903      	ldr	r1, [sp, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	9802      	ldr	r0, [sp, #8]
 800802e:	f000 fa17 	bl	8008460 <__lshift>
 8008032:	9904      	ldr	r1, [sp, #16]
 8008034:	9003      	str	r0, [sp, #12]
 8008036:	f000 fa65 	bl	8008504 <__mcmp>
 800803a:	2800      	cmp	r0, #0
 800803c:	dc9d      	bgt.n	8007f7a <_dtoa_r+0xa9e>
 800803e:	d101      	bne.n	8008044 <_dtoa_r+0xb68>
 8008040:	07e3      	lsls	r3, r4, #31
 8008042:	d49a      	bmi.n	8007f7a <_dtoa_r+0xa9e>
 8008044:	1e6b      	subs	r3, r5, #1
 8008046:	781a      	ldrb	r2, [r3, #0]
 8008048:	2a30      	cmp	r2, #48	; 0x30
 800804a:	d000      	beq.n	800804e <_dtoa_r+0xb72>
 800804c:	e6f4      	b.n	8007e38 <_dtoa_r+0x95c>
 800804e:	001d      	movs	r5, r3
 8008050:	e7f8      	b.n	8008044 <_dtoa_r+0xb68>
 8008052:	9a08      	ldr	r2, [sp, #32]
 8008054:	429a      	cmp	r2, r3
 8008056:	d103      	bne.n	8008060 <_dtoa_r+0xb84>
 8008058:	2331      	movs	r3, #49	; 0x31
 800805a:	3701      	adds	r7, #1
 800805c:	7013      	strb	r3, [r2, #0]
 800805e:	e6eb      	b.n	8007e38 <_dtoa_r+0x95c>
 8008060:	001d      	movs	r5, r3
 8008062:	e78a      	b.n	8007f7a <_dtoa_r+0xa9e>
 8008064:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <_dtoa_r+0xbb8>)
 8008066:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008068:	9308      	str	r3, [sp, #32]
 800806a:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <_dtoa_r+0xbbc>)
 800806c:	2a00      	cmp	r2, #0
 800806e:	d001      	beq.n	8008074 <_dtoa_r+0xb98>
 8008070:	f7ff fa77 	bl	8007562 <_dtoa_r+0x86>
 8008074:	f7ff fa77 	bl	8007566 <_dtoa_r+0x8a>
 8008078:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800807a:	2b01      	cmp	r3, #1
 800807c:	dc00      	bgt.n	8008080 <_dtoa_r+0xba4>
 800807e:	e621      	b.n	8007cc4 <_dtoa_r+0x7e8>
 8008080:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008082:	2001      	movs	r0, #1
 8008084:	e635      	b.n	8007cf2 <_dtoa_r+0x816>
 8008086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008088:	2b00      	cmp	r3, #0
 800808a:	dcb2      	bgt.n	8007ff2 <_dtoa_r+0xb16>
 800808c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800808e:	2b02      	cmp	r3, #2
 8008090:	ddaf      	ble.n	8007ff2 <_dtoa_r+0xb16>
 8008092:	e6bc      	b.n	8007e0e <_dtoa_r+0x932>
 8008094:	0800968a 	.word	0x0800968a
 8008098:	08009692 	.word	0x08009692

0800809c <_localeconv_r>:
 800809c:	4b03      	ldr	r3, [pc, #12]	; (80080ac <_localeconv_r+0x10>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6a18      	ldr	r0, [r3, #32]
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d100      	bne.n	80080a8 <_localeconv_r+0xc>
 80080a6:	4802      	ldr	r0, [pc, #8]	; (80080b0 <_localeconv_r+0x14>)
 80080a8:	30f0      	adds	r0, #240	; 0xf0
 80080aa:	4770      	bx	lr
 80080ac:	20000014 	.word	0x20000014
 80080b0:	20000078 	.word	0x20000078

080080b4 <malloc>:
 80080b4:	b510      	push	{r4, lr}
 80080b6:	4b03      	ldr	r3, [pc, #12]	; (80080c4 <malloc+0x10>)
 80080b8:	0001      	movs	r1, r0
 80080ba:	6818      	ldr	r0, [r3, #0]
 80080bc:	f000 fb02 	bl	80086c4 <_malloc_r>
 80080c0:	bd10      	pop	{r4, pc}
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	20000014 	.word	0x20000014

080080c8 <memcpy>:
 80080c8:	2300      	movs	r3, #0
 80080ca:	b510      	push	{r4, lr}
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d100      	bne.n	80080d2 <memcpy+0xa>
 80080d0:	bd10      	pop	{r4, pc}
 80080d2:	5ccc      	ldrb	r4, [r1, r3]
 80080d4:	54c4      	strb	r4, [r0, r3]
 80080d6:	3301      	adds	r3, #1
 80080d8:	e7f8      	b.n	80080cc <memcpy+0x4>

080080da <_Balloc>:
 80080da:	b570      	push	{r4, r5, r6, lr}
 80080dc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080de:	0004      	movs	r4, r0
 80080e0:	000d      	movs	r5, r1
 80080e2:	2e00      	cmp	r6, #0
 80080e4:	d107      	bne.n	80080f6 <_Balloc+0x1c>
 80080e6:	2010      	movs	r0, #16
 80080e8:	f7ff ffe4 	bl	80080b4 <malloc>
 80080ec:	6260      	str	r0, [r4, #36]	; 0x24
 80080ee:	6046      	str	r6, [r0, #4]
 80080f0:	6086      	str	r6, [r0, #8]
 80080f2:	6006      	str	r6, [r0, #0]
 80080f4:	60c6      	str	r6, [r0, #12]
 80080f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080f8:	68f3      	ldr	r3, [r6, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d013      	beq.n	8008126 <_Balloc+0x4c>
 80080fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008100:	00aa      	lsls	r2, r5, #2
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	189b      	adds	r3, r3, r2
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	2800      	cmp	r0, #0
 800810a:	d118      	bne.n	800813e <_Balloc+0x64>
 800810c:	2101      	movs	r1, #1
 800810e:	000e      	movs	r6, r1
 8008110:	40ae      	lsls	r6, r5
 8008112:	1d72      	adds	r2, r6, #5
 8008114:	0092      	lsls	r2, r2, #2
 8008116:	0020      	movs	r0, r4
 8008118:	f000 fac6 	bl	80086a8 <_calloc_r>
 800811c:	2800      	cmp	r0, #0
 800811e:	d00c      	beq.n	800813a <_Balloc+0x60>
 8008120:	6045      	str	r5, [r0, #4]
 8008122:	6086      	str	r6, [r0, #8]
 8008124:	e00d      	b.n	8008142 <_Balloc+0x68>
 8008126:	2221      	movs	r2, #33	; 0x21
 8008128:	2104      	movs	r1, #4
 800812a:	0020      	movs	r0, r4
 800812c:	f000 fabc 	bl	80086a8 <_calloc_r>
 8008130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008132:	60f0      	str	r0, [r6, #12]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e1      	bne.n	80080fe <_Balloc+0x24>
 800813a:	2000      	movs	r0, #0
 800813c:	bd70      	pop	{r4, r5, r6, pc}
 800813e:	6802      	ldr	r2, [r0, #0]
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	2300      	movs	r3, #0
 8008144:	6103      	str	r3, [r0, #16]
 8008146:	60c3      	str	r3, [r0, #12]
 8008148:	e7f8      	b.n	800813c <_Balloc+0x62>

0800814a <_Bfree>:
 800814a:	b570      	push	{r4, r5, r6, lr}
 800814c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800814e:	0006      	movs	r6, r0
 8008150:	000d      	movs	r5, r1
 8008152:	2c00      	cmp	r4, #0
 8008154:	d107      	bne.n	8008166 <_Bfree+0x1c>
 8008156:	2010      	movs	r0, #16
 8008158:	f7ff ffac 	bl	80080b4 <malloc>
 800815c:	6270      	str	r0, [r6, #36]	; 0x24
 800815e:	6044      	str	r4, [r0, #4]
 8008160:	6084      	str	r4, [r0, #8]
 8008162:	6004      	str	r4, [r0, #0]
 8008164:	60c4      	str	r4, [r0, #12]
 8008166:	2d00      	cmp	r5, #0
 8008168:	d007      	beq.n	800817a <_Bfree+0x30>
 800816a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800816c:	686a      	ldr	r2, [r5, #4]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	0092      	lsls	r2, r2, #2
 8008172:	189b      	adds	r3, r3, r2
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	602a      	str	r2, [r5, #0]
 8008178:	601d      	str	r5, [r3, #0]
 800817a:	bd70      	pop	{r4, r5, r6, pc}

0800817c <__multadd>:
 800817c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800817e:	001e      	movs	r6, r3
 8008180:	2314      	movs	r3, #20
 8008182:	469c      	mov	ip, r3
 8008184:	0007      	movs	r7, r0
 8008186:	000c      	movs	r4, r1
 8008188:	2000      	movs	r0, #0
 800818a:	690d      	ldr	r5, [r1, #16]
 800818c:	448c      	add	ip, r1
 800818e:	4663      	mov	r3, ip
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3001      	adds	r0, #1
 8008194:	b299      	uxth	r1, r3
 8008196:	4663      	mov	r3, ip
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4351      	muls	r1, r2
 800819c:	0c1b      	lsrs	r3, r3, #16
 800819e:	4353      	muls	r3, r2
 80081a0:	1989      	adds	r1, r1, r6
 80081a2:	0c0e      	lsrs	r6, r1, #16
 80081a4:	199b      	adds	r3, r3, r6
 80081a6:	b289      	uxth	r1, r1
 80081a8:	0c1e      	lsrs	r6, r3, #16
 80081aa:	041b      	lsls	r3, r3, #16
 80081ac:	185b      	adds	r3, r3, r1
 80081ae:	4661      	mov	r1, ip
 80081b0:	c108      	stmia	r1!, {r3}
 80081b2:	468c      	mov	ip, r1
 80081b4:	4285      	cmp	r5, r0
 80081b6:	dcea      	bgt.n	800818e <__multadd+0x12>
 80081b8:	2e00      	cmp	r6, #0
 80081ba:	d01b      	beq.n	80081f4 <__multadd+0x78>
 80081bc:	68a3      	ldr	r3, [r4, #8]
 80081be:	42ab      	cmp	r3, r5
 80081c0:	dc12      	bgt.n	80081e8 <__multadd+0x6c>
 80081c2:	6863      	ldr	r3, [r4, #4]
 80081c4:	0038      	movs	r0, r7
 80081c6:	1c59      	adds	r1, r3, #1
 80081c8:	f7ff ff87 	bl	80080da <_Balloc>
 80081cc:	0021      	movs	r1, r4
 80081ce:	6923      	ldr	r3, [r4, #16]
 80081d0:	9001      	str	r0, [sp, #4]
 80081d2:	1c9a      	adds	r2, r3, #2
 80081d4:	0092      	lsls	r2, r2, #2
 80081d6:	310c      	adds	r1, #12
 80081d8:	300c      	adds	r0, #12
 80081da:	f7ff ff75 	bl	80080c8 <memcpy>
 80081de:	0021      	movs	r1, r4
 80081e0:	0038      	movs	r0, r7
 80081e2:	f7ff ffb2 	bl	800814a <_Bfree>
 80081e6:	9c01      	ldr	r4, [sp, #4]
 80081e8:	1d2b      	adds	r3, r5, #4
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	18e3      	adds	r3, r4, r3
 80081ee:	3501      	adds	r5, #1
 80081f0:	605e      	str	r6, [r3, #4]
 80081f2:	6125      	str	r5, [r4, #16]
 80081f4:	0020      	movs	r0, r4
 80081f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080081f8 <__hi0bits>:
 80081f8:	0003      	movs	r3, r0
 80081fa:	0c02      	lsrs	r2, r0, #16
 80081fc:	2000      	movs	r0, #0
 80081fe:	4282      	cmp	r2, r0
 8008200:	d101      	bne.n	8008206 <__hi0bits+0xe>
 8008202:	041b      	lsls	r3, r3, #16
 8008204:	3010      	adds	r0, #16
 8008206:	0e1a      	lsrs	r2, r3, #24
 8008208:	d101      	bne.n	800820e <__hi0bits+0x16>
 800820a:	3008      	adds	r0, #8
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	0f1a      	lsrs	r2, r3, #28
 8008210:	d101      	bne.n	8008216 <__hi0bits+0x1e>
 8008212:	3004      	adds	r0, #4
 8008214:	011b      	lsls	r3, r3, #4
 8008216:	0f9a      	lsrs	r2, r3, #30
 8008218:	d101      	bne.n	800821e <__hi0bits+0x26>
 800821a:	3002      	adds	r0, #2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	db03      	blt.n	800822a <__hi0bits+0x32>
 8008222:	3001      	adds	r0, #1
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	d400      	bmi.n	800822a <__hi0bits+0x32>
 8008228:	2020      	movs	r0, #32
 800822a:	4770      	bx	lr

0800822c <__lo0bits>:
 800822c:	2207      	movs	r2, #7
 800822e:	6803      	ldr	r3, [r0, #0]
 8008230:	b510      	push	{r4, lr}
 8008232:	0001      	movs	r1, r0
 8008234:	401a      	ands	r2, r3
 8008236:	d00d      	beq.n	8008254 <__lo0bits+0x28>
 8008238:	2401      	movs	r4, #1
 800823a:	2000      	movs	r0, #0
 800823c:	4223      	tst	r3, r4
 800823e:	d105      	bne.n	800824c <__lo0bits+0x20>
 8008240:	3002      	adds	r0, #2
 8008242:	4203      	tst	r3, r0
 8008244:	d003      	beq.n	800824e <__lo0bits+0x22>
 8008246:	40e3      	lsrs	r3, r4
 8008248:	0020      	movs	r0, r4
 800824a:	600b      	str	r3, [r1, #0]
 800824c:	bd10      	pop	{r4, pc}
 800824e:	089b      	lsrs	r3, r3, #2
 8008250:	600b      	str	r3, [r1, #0]
 8008252:	e7fb      	b.n	800824c <__lo0bits+0x20>
 8008254:	b29c      	uxth	r4, r3
 8008256:	0010      	movs	r0, r2
 8008258:	2c00      	cmp	r4, #0
 800825a:	d101      	bne.n	8008260 <__lo0bits+0x34>
 800825c:	2010      	movs	r0, #16
 800825e:	0c1b      	lsrs	r3, r3, #16
 8008260:	b2da      	uxtb	r2, r3
 8008262:	2a00      	cmp	r2, #0
 8008264:	d101      	bne.n	800826a <__lo0bits+0x3e>
 8008266:	3008      	adds	r0, #8
 8008268:	0a1b      	lsrs	r3, r3, #8
 800826a:	071a      	lsls	r2, r3, #28
 800826c:	d101      	bne.n	8008272 <__lo0bits+0x46>
 800826e:	3004      	adds	r0, #4
 8008270:	091b      	lsrs	r3, r3, #4
 8008272:	079a      	lsls	r2, r3, #30
 8008274:	d101      	bne.n	800827a <__lo0bits+0x4e>
 8008276:	3002      	adds	r0, #2
 8008278:	089b      	lsrs	r3, r3, #2
 800827a:	07da      	lsls	r2, r3, #31
 800827c:	d4e8      	bmi.n	8008250 <__lo0bits+0x24>
 800827e:	085b      	lsrs	r3, r3, #1
 8008280:	d001      	beq.n	8008286 <__lo0bits+0x5a>
 8008282:	3001      	adds	r0, #1
 8008284:	e7e4      	b.n	8008250 <__lo0bits+0x24>
 8008286:	2020      	movs	r0, #32
 8008288:	e7e0      	b.n	800824c <__lo0bits+0x20>

0800828a <__i2b>:
 800828a:	b510      	push	{r4, lr}
 800828c:	000c      	movs	r4, r1
 800828e:	2101      	movs	r1, #1
 8008290:	f7ff ff23 	bl	80080da <_Balloc>
 8008294:	2301      	movs	r3, #1
 8008296:	6144      	str	r4, [r0, #20]
 8008298:	6103      	str	r3, [r0, #16]
 800829a:	bd10      	pop	{r4, pc}

0800829c <__multiply>:
 800829c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800829e:	690b      	ldr	r3, [r1, #16]
 80082a0:	0014      	movs	r4, r2
 80082a2:	6912      	ldr	r2, [r2, #16]
 80082a4:	b089      	sub	sp, #36	; 0x24
 80082a6:	000d      	movs	r5, r1
 80082a8:	4293      	cmp	r3, r2
 80082aa:	da01      	bge.n	80082b0 <__multiply+0x14>
 80082ac:	0025      	movs	r5, r4
 80082ae:	000c      	movs	r4, r1
 80082b0:	692f      	ldr	r7, [r5, #16]
 80082b2:	6926      	ldr	r6, [r4, #16]
 80082b4:	6869      	ldr	r1, [r5, #4]
 80082b6:	19bb      	adds	r3, r7, r6
 80082b8:	9302      	str	r3, [sp, #8]
 80082ba:	68ab      	ldr	r3, [r5, #8]
 80082bc:	19ba      	adds	r2, r7, r6
 80082be:	4293      	cmp	r3, r2
 80082c0:	da00      	bge.n	80082c4 <__multiply+0x28>
 80082c2:	3101      	adds	r1, #1
 80082c4:	f7ff ff09 	bl	80080da <_Balloc>
 80082c8:	0002      	movs	r2, r0
 80082ca:	19bb      	adds	r3, r7, r6
 80082cc:	3214      	adds	r2, #20
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	18d3      	adds	r3, r2, r3
 80082d2:	469c      	mov	ip, r3
 80082d4:	2100      	movs	r1, #0
 80082d6:	0013      	movs	r3, r2
 80082d8:	9004      	str	r0, [sp, #16]
 80082da:	4563      	cmp	r3, ip
 80082dc:	d31d      	bcc.n	800831a <__multiply+0x7e>
 80082de:	3514      	adds	r5, #20
 80082e0:	00bf      	lsls	r7, r7, #2
 80082e2:	19eb      	adds	r3, r5, r7
 80082e4:	3414      	adds	r4, #20
 80082e6:	00b6      	lsls	r6, r6, #2
 80082e8:	9305      	str	r3, [sp, #20]
 80082ea:	19a3      	adds	r3, r4, r6
 80082ec:	9503      	str	r5, [sp, #12]
 80082ee:	9401      	str	r4, [sp, #4]
 80082f0:	9307      	str	r3, [sp, #28]
 80082f2:	9b07      	ldr	r3, [sp, #28]
 80082f4:	9901      	ldr	r1, [sp, #4]
 80082f6:	4299      	cmp	r1, r3
 80082f8:	d311      	bcc.n	800831e <__multiply+0x82>
 80082fa:	9b02      	ldr	r3, [sp, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	dd06      	ble.n	800830e <__multiply+0x72>
 8008300:	2304      	movs	r3, #4
 8008302:	425b      	negs	r3, r3
 8008304:	449c      	add	ip, r3
 8008306:	4663      	mov	r3, ip
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d051      	beq.n	80083b2 <__multiply+0x116>
 800830e:	9b04      	ldr	r3, [sp, #16]
 8008310:	9a02      	ldr	r2, [sp, #8]
 8008312:	0018      	movs	r0, r3
 8008314:	611a      	str	r2, [r3, #16]
 8008316:	b009      	add	sp, #36	; 0x24
 8008318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800831a:	c302      	stmia	r3!, {r1}
 800831c:	e7dd      	b.n	80082da <__multiply+0x3e>
 800831e:	9b01      	ldr	r3, [sp, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	b298      	uxth	r0, r3
 8008324:	2800      	cmp	r0, #0
 8008326:	d01c      	beq.n	8008362 <__multiply+0xc6>
 8008328:	0015      	movs	r5, r2
 800832a:	2600      	movs	r6, #0
 800832c:	9f03      	ldr	r7, [sp, #12]
 800832e:	cf02      	ldmia	r7!, {r1}
 8008330:	682c      	ldr	r4, [r5, #0]
 8008332:	b28b      	uxth	r3, r1
 8008334:	4343      	muls	r3, r0
 8008336:	0c09      	lsrs	r1, r1, #16
 8008338:	4341      	muls	r1, r0
 800833a:	b2a4      	uxth	r4, r4
 800833c:	191b      	adds	r3, r3, r4
 800833e:	199b      	adds	r3, r3, r6
 8008340:	000e      	movs	r6, r1
 8008342:	6829      	ldr	r1, [r5, #0]
 8008344:	9506      	str	r5, [sp, #24]
 8008346:	0c09      	lsrs	r1, r1, #16
 8008348:	1871      	adds	r1, r6, r1
 800834a:	0c1e      	lsrs	r6, r3, #16
 800834c:	1989      	adds	r1, r1, r6
 800834e:	0c0e      	lsrs	r6, r1, #16
 8008350:	b29b      	uxth	r3, r3
 8008352:	0409      	lsls	r1, r1, #16
 8008354:	430b      	orrs	r3, r1
 8008356:	c508      	stmia	r5!, {r3}
 8008358:	9b05      	ldr	r3, [sp, #20]
 800835a:	42bb      	cmp	r3, r7
 800835c:	d8e7      	bhi.n	800832e <__multiply+0x92>
 800835e:	9b06      	ldr	r3, [sp, #24]
 8008360:	605e      	str	r6, [r3, #4]
 8008362:	9b01      	ldr	r3, [sp, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	0c1d      	lsrs	r5, r3, #16
 8008368:	d01e      	beq.n	80083a8 <__multiply+0x10c>
 800836a:	0010      	movs	r0, r2
 800836c:	2700      	movs	r7, #0
 800836e:	6813      	ldr	r3, [r2, #0]
 8008370:	9e03      	ldr	r6, [sp, #12]
 8008372:	6831      	ldr	r1, [r6, #0]
 8008374:	6804      	ldr	r4, [r0, #0]
 8008376:	b289      	uxth	r1, r1
 8008378:	4369      	muls	r1, r5
 800837a:	0c24      	lsrs	r4, r4, #16
 800837c:	1909      	adds	r1, r1, r4
 800837e:	19c9      	adds	r1, r1, r7
 8008380:	040f      	lsls	r7, r1, #16
 8008382:	b29b      	uxth	r3, r3
 8008384:	433b      	orrs	r3, r7
 8008386:	6003      	str	r3, [r0, #0]
 8008388:	ce80      	ldmia	r6!, {r7}
 800838a:	6843      	ldr	r3, [r0, #4]
 800838c:	0c3f      	lsrs	r7, r7, #16
 800838e:	436f      	muls	r7, r5
 8008390:	b29b      	uxth	r3, r3
 8008392:	18fb      	adds	r3, r7, r3
 8008394:	0c09      	lsrs	r1, r1, #16
 8008396:	185b      	adds	r3, r3, r1
 8008398:	9905      	ldr	r1, [sp, #20]
 800839a:	9006      	str	r0, [sp, #24]
 800839c:	0c1f      	lsrs	r7, r3, #16
 800839e:	3004      	adds	r0, #4
 80083a0:	42b1      	cmp	r1, r6
 80083a2:	d8e6      	bhi.n	8008372 <__multiply+0xd6>
 80083a4:	9906      	ldr	r1, [sp, #24]
 80083a6:	604b      	str	r3, [r1, #4]
 80083a8:	9b01      	ldr	r3, [sp, #4]
 80083aa:	3204      	adds	r2, #4
 80083ac:	3304      	adds	r3, #4
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	e79f      	b.n	80082f2 <__multiply+0x56>
 80083b2:	9b02      	ldr	r3, [sp, #8]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	9302      	str	r3, [sp, #8]
 80083b8:	e79f      	b.n	80082fa <__multiply+0x5e>
	...

080083bc <__pow5mult>:
 80083bc:	2303      	movs	r3, #3
 80083be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083c0:	4013      	ands	r3, r2
 80083c2:	0005      	movs	r5, r0
 80083c4:	000e      	movs	r6, r1
 80083c6:	0014      	movs	r4, r2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d008      	beq.n	80083de <__pow5mult+0x22>
 80083cc:	4922      	ldr	r1, [pc, #136]	; (8008458 <__pow5mult+0x9c>)
 80083ce:	3b01      	subs	r3, #1
 80083d0:	009a      	lsls	r2, r3, #2
 80083d2:	5852      	ldr	r2, [r2, r1]
 80083d4:	2300      	movs	r3, #0
 80083d6:	0031      	movs	r1, r6
 80083d8:	f7ff fed0 	bl	800817c <__multadd>
 80083dc:	0006      	movs	r6, r0
 80083de:	10a3      	asrs	r3, r4, #2
 80083e0:	9301      	str	r3, [sp, #4]
 80083e2:	d036      	beq.n	8008452 <__pow5mult+0x96>
 80083e4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80083e6:	2c00      	cmp	r4, #0
 80083e8:	d107      	bne.n	80083fa <__pow5mult+0x3e>
 80083ea:	2010      	movs	r0, #16
 80083ec:	f7ff fe62 	bl	80080b4 <malloc>
 80083f0:	6268      	str	r0, [r5, #36]	; 0x24
 80083f2:	6044      	str	r4, [r0, #4]
 80083f4:	6084      	str	r4, [r0, #8]
 80083f6:	6004      	str	r4, [r0, #0]
 80083f8:	60c4      	str	r4, [r0, #12]
 80083fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80083fc:	68bc      	ldr	r4, [r7, #8]
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d107      	bne.n	8008412 <__pow5mult+0x56>
 8008402:	4916      	ldr	r1, [pc, #88]	; (800845c <__pow5mult+0xa0>)
 8008404:	0028      	movs	r0, r5
 8008406:	f7ff ff40 	bl	800828a <__i2b>
 800840a:	2300      	movs	r3, #0
 800840c:	0004      	movs	r4, r0
 800840e:	60b8      	str	r0, [r7, #8]
 8008410:	6003      	str	r3, [r0, #0]
 8008412:	2201      	movs	r2, #1
 8008414:	9b01      	ldr	r3, [sp, #4]
 8008416:	4213      	tst	r3, r2
 8008418:	d00a      	beq.n	8008430 <__pow5mult+0x74>
 800841a:	0031      	movs	r1, r6
 800841c:	0022      	movs	r2, r4
 800841e:	0028      	movs	r0, r5
 8008420:	f7ff ff3c 	bl	800829c <__multiply>
 8008424:	0007      	movs	r7, r0
 8008426:	0031      	movs	r1, r6
 8008428:	0028      	movs	r0, r5
 800842a:	f7ff fe8e 	bl	800814a <_Bfree>
 800842e:	003e      	movs	r6, r7
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	105b      	asrs	r3, r3, #1
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	d00c      	beq.n	8008452 <__pow5mult+0x96>
 8008438:	6820      	ldr	r0, [r4, #0]
 800843a:	2800      	cmp	r0, #0
 800843c:	d107      	bne.n	800844e <__pow5mult+0x92>
 800843e:	0022      	movs	r2, r4
 8008440:	0021      	movs	r1, r4
 8008442:	0028      	movs	r0, r5
 8008444:	f7ff ff2a 	bl	800829c <__multiply>
 8008448:	2300      	movs	r3, #0
 800844a:	6020      	str	r0, [r4, #0]
 800844c:	6003      	str	r3, [r0, #0]
 800844e:	0004      	movs	r4, r0
 8008450:	e7df      	b.n	8008412 <__pow5mult+0x56>
 8008452:	0030      	movs	r0, r6
 8008454:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008456:	46c0      	nop			; (mov r8, r8)
 8008458:	08009788 	.word	0x08009788
 800845c:	00000271 	.word	0x00000271

08008460 <__lshift>:
 8008460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008462:	000d      	movs	r5, r1
 8008464:	0017      	movs	r7, r2
 8008466:	692b      	ldr	r3, [r5, #16]
 8008468:	1154      	asrs	r4, r2, #5
 800846a:	b085      	sub	sp, #20
 800846c:	18e3      	adds	r3, r4, r3
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	3301      	adds	r3, #1
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	6849      	ldr	r1, [r1, #4]
 8008476:	68ab      	ldr	r3, [r5, #8]
 8008478:	9002      	str	r0, [sp, #8]
 800847a:	9a00      	ldr	r2, [sp, #0]
 800847c:	4293      	cmp	r3, r2
 800847e:	db35      	blt.n	80084ec <__lshift+0x8c>
 8008480:	9802      	ldr	r0, [sp, #8]
 8008482:	f7ff fe2a 	bl	80080da <_Balloc>
 8008486:	2300      	movs	r3, #0
 8008488:	0002      	movs	r2, r0
 800848a:	0006      	movs	r6, r0
 800848c:	0019      	movs	r1, r3
 800848e:	3214      	adds	r2, #20
 8008490:	42a3      	cmp	r3, r4
 8008492:	db2e      	blt.n	80084f2 <__lshift+0x92>
 8008494:	43e3      	mvns	r3, r4
 8008496:	17db      	asrs	r3, r3, #31
 8008498:	401c      	ands	r4, r3
 800849a:	002b      	movs	r3, r5
 800849c:	00a4      	lsls	r4, r4, #2
 800849e:	1914      	adds	r4, r2, r4
 80084a0:	692a      	ldr	r2, [r5, #16]
 80084a2:	3314      	adds	r3, #20
 80084a4:	0092      	lsls	r2, r2, #2
 80084a6:	189a      	adds	r2, r3, r2
 80084a8:	4694      	mov	ip, r2
 80084aa:	221f      	movs	r2, #31
 80084ac:	4017      	ands	r7, r2
 80084ae:	d024      	beq.n	80084fa <__lshift+0x9a>
 80084b0:	3201      	adds	r2, #1
 80084b2:	1bd2      	subs	r2, r2, r7
 80084b4:	9203      	str	r2, [sp, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	6819      	ldr	r1, [r3, #0]
 80084ba:	0020      	movs	r0, r4
 80084bc:	40b9      	lsls	r1, r7
 80084be:	430a      	orrs	r2, r1
 80084c0:	c404      	stmia	r4!, {r2}
 80084c2:	cb04      	ldmia	r3!, {r2}
 80084c4:	9903      	ldr	r1, [sp, #12]
 80084c6:	40ca      	lsrs	r2, r1
 80084c8:	459c      	cmp	ip, r3
 80084ca:	d8f5      	bhi.n	80084b8 <__lshift+0x58>
 80084cc:	6042      	str	r2, [r0, #4]
 80084ce:	2a00      	cmp	r2, #0
 80084d0:	d002      	beq.n	80084d8 <__lshift+0x78>
 80084d2:	9b01      	ldr	r3, [sp, #4]
 80084d4:	3302      	adds	r3, #2
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	9b00      	ldr	r3, [sp, #0]
 80084da:	9802      	ldr	r0, [sp, #8]
 80084dc:	3b01      	subs	r3, #1
 80084de:	6133      	str	r3, [r6, #16]
 80084e0:	0029      	movs	r1, r5
 80084e2:	f7ff fe32 	bl	800814a <_Bfree>
 80084e6:	0030      	movs	r0, r6
 80084e8:	b005      	add	sp, #20
 80084ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ec:	3101      	adds	r1, #1
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	e7c3      	b.n	800847a <__lshift+0x1a>
 80084f2:	0098      	lsls	r0, r3, #2
 80084f4:	5011      	str	r1, [r2, r0]
 80084f6:	3301      	adds	r3, #1
 80084f8:	e7ca      	b.n	8008490 <__lshift+0x30>
 80084fa:	cb04      	ldmia	r3!, {r2}
 80084fc:	c404      	stmia	r4!, {r2}
 80084fe:	459c      	cmp	ip, r3
 8008500:	d8fb      	bhi.n	80084fa <__lshift+0x9a>
 8008502:	e7e9      	b.n	80084d8 <__lshift+0x78>

08008504 <__mcmp>:
 8008504:	690a      	ldr	r2, [r1, #16]
 8008506:	6903      	ldr	r3, [r0, #16]
 8008508:	b530      	push	{r4, r5, lr}
 800850a:	1a9b      	subs	r3, r3, r2
 800850c:	d10d      	bne.n	800852a <__mcmp+0x26>
 800850e:	0092      	lsls	r2, r2, #2
 8008510:	3014      	adds	r0, #20
 8008512:	3114      	adds	r1, #20
 8008514:	1884      	adds	r4, r0, r2
 8008516:	1889      	adds	r1, r1, r2
 8008518:	3c04      	subs	r4, #4
 800851a:	3904      	subs	r1, #4
 800851c:	6825      	ldr	r5, [r4, #0]
 800851e:	680a      	ldr	r2, [r1, #0]
 8008520:	4295      	cmp	r5, r2
 8008522:	d004      	beq.n	800852e <__mcmp+0x2a>
 8008524:	2301      	movs	r3, #1
 8008526:	4295      	cmp	r5, r2
 8008528:	d304      	bcc.n	8008534 <__mcmp+0x30>
 800852a:	0018      	movs	r0, r3
 800852c:	bd30      	pop	{r4, r5, pc}
 800852e:	42a0      	cmp	r0, r4
 8008530:	d3f2      	bcc.n	8008518 <__mcmp+0x14>
 8008532:	e7fa      	b.n	800852a <__mcmp+0x26>
 8008534:	425b      	negs	r3, r3
 8008536:	e7f8      	b.n	800852a <__mcmp+0x26>

08008538 <__mdiff>:
 8008538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853a:	000d      	movs	r5, r1
 800853c:	b085      	sub	sp, #20
 800853e:	0007      	movs	r7, r0
 8008540:	0011      	movs	r1, r2
 8008542:	0028      	movs	r0, r5
 8008544:	0014      	movs	r4, r2
 8008546:	f7ff ffdd 	bl	8008504 <__mcmp>
 800854a:	1e06      	subs	r6, r0, #0
 800854c:	d108      	bne.n	8008560 <__mdiff+0x28>
 800854e:	0001      	movs	r1, r0
 8008550:	0038      	movs	r0, r7
 8008552:	f7ff fdc2 	bl	80080da <_Balloc>
 8008556:	2301      	movs	r3, #1
 8008558:	6146      	str	r6, [r0, #20]
 800855a:	6103      	str	r3, [r0, #16]
 800855c:	b005      	add	sp, #20
 800855e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008560:	2301      	movs	r3, #1
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	2800      	cmp	r0, #0
 8008566:	db04      	blt.n	8008572 <__mdiff+0x3a>
 8008568:	0023      	movs	r3, r4
 800856a:	002c      	movs	r4, r5
 800856c:	001d      	movs	r5, r3
 800856e:	2300      	movs	r3, #0
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	6861      	ldr	r1, [r4, #4]
 8008574:	0038      	movs	r0, r7
 8008576:	f7ff fdb0 	bl	80080da <_Balloc>
 800857a:	002f      	movs	r7, r5
 800857c:	2200      	movs	r2, #0
 800857e:	9b01      	ldr	r3, [sp, #4]
 8008580:	6926      	ldr	r6, [r4, #16]
 8008582:	60c3      	str	r3, [r0, #12]
 8008584:	3414      	adds	r4, #20
 8008586:	00b3      	lsls	r3, r6, #2
 8008588:	18e3      	adds	r3, r4, r3
 800858a:	9302      	str	r3, [sp, #8]
 800858c:	692b      	ldr	r3, [r5, #16]
 800858e:	3714      	adds	r7, #20
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	18fb      	adds	r3, r7, r3
 8008594:	9303      	str	r3, [sp, #12]
 8008596:	0003      	movs	r3, r0
 8008598:	4694      	mov	ip, r2
 800859a:	3314      	adds	r3, #20
 800859c:	cc20      	ldmia	r4!, {r5}
 800859e:	cf04      	ldmia	r7!, {r2}
 80085a0:	9201      	str	r2, [sp, #4]
 80085a2:	b2aa      	uxth	r2, r5
 80085a4:	4494      	add	ip, r2
 80085a6:	466a      	mov	r2, sp
 80085a8:	4661      	mov	r1, ip
 80085aa:	8892      	ldrh	r2, [r2, #4]
 80085ac:	0c2d      	lsrs	r5, r5, #16
 80085ae:	1a8a      	subs	r2, r1, r2
 80085b0:	9901      	ldr	r1, [sp, #4]
 80085b2:	0c09      	lsrs	r1, r1, #16
 80085b4:	1a69      	subs	r1, r5, r1
 80085b6:	1415      	asrs	r5, r2, #16
 80085b8:	1949      	adds	r1, r1, r5
 80085ba:	140d      	asrs	r5, r1, #16
 80085bc:	b292      	uxth	r2, r2
 80085be:	0409      	lsls	r1, r1, #16
 80085c0:	430a      	orrs	r2, r1
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	9a03      	ldr	r2, [sp, #12]
 80085c6:	46ac      	mov	ip, r5
 80085c8:	3304      	adds	r3, #4
 80085ca:	42ba      	cmp	r2, r7
 80085cc:	d8e6      	bhi.n	800859c <__mdiff+0x64>
 80085ce:	9902      	ldr	r1, [sp, #8]
 80085d0:	001a      	movs	r2, r3
 80085d2:	428c      	cmp	r4, r1
 80085d4:	d305      	bcc.n	80085e2 <__mdiff+0xaa>
 80085d6:	3a04      	subs	r2, #4
 80085d8:	6813      	ldr	r3, [r2, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00e      	beq.n	80085fc <__mdiff+0xc4>
 80085de:	6106      	str	r6, [r0, #16]
 80085e0:	e7bc      	b.n	800855c <__mdiff+0x24>
 80085e2:	cc04      	ldmia	r4!, {r2}
 80085e4:	b291      	uxth	r1, r2
 80085e6:	4461      	add	r1, ip
 80085e8:	140d      	asrs	r5, r1, #16
 80085ea:	0c12      	lsrs	r2, r2, #16
 80085ec:	1952      	adds	r2, r2, r5
 80085ee:	1415      	asrs	r5, r2, #16
 80085f0:	b289      	uxth	r1, r1
 80085f2:	0412      	lsls	r2, r2, #16
 80085f4:	430a      	orrs	r2, r1
 80085f6:	46ac      	mov	ip, r5
 80085f8:	c304      	stmia	r3!, {r2}
 80085fa:	e7e8      	b.n	80085ce <__mdiff+0x96>
 80085fc:	3e01      	subs	r6, #1
 80085fe:	e7ea      	b.n	80085d6 <__mdiff+0x9e>

08008600 <__d2b>:
 8008600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008602:	001d      	movs	r5, r3
 8008604:	2101      	movs	r1, #1
 8008606:	0014      	movs	r4, r2
 8008608:	9f08      	ldr	r7, [sp, #32]
 800860a:	f7ff fd66 	bl	80080da <_Balloc>
 800860e:	032b      	lsls	r3, r5, #12
 8008610:	006d      	lsls	r5, r5, #1
 8008612:	0006      	movs	r6, r0
 8008614:	0b1b      	lsrs	r3, r3, #12
 8008616:	0d6d      	lsrs	r5, r5, #21
 8008618:	d124      	bne.n	8008664 <__d2b+0x64>
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	2c00      	cmp	r4, #0
 800861e:	d027      	beq.n	8008670 <__d2b+0x70>
 8008620:	4668      	mov	r0, sp
 8008622:	9400      	str	r4, [sp, #0]
 8008624:	f7ff fe02 	bl	800822c <__lo0bits>
 8008628:	9c00      	ldr	r4, [sp, #0]
 800862a:	2800      	cmp	r0, #0
 800862c:	d01e      	beq.n	800866c <__d2b+0x6c>
 800862e:	9b01      	ldr	r3, [sp, #4]
 8008630:	2120      	movs	r1, #32
 8008632:	001a      	movs	r2, r3
 8008634:	1a09      	subs	r1, r1, r0
 8008636:	408a      	lsls	r2, r1
 8008638:	40c3      	lsrs	r3, r0
 800863a:	4322      	orrs	r2, r4
 800863c:	6172      	str	r2, [r6, #20]
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	9c01      	ldr	r4, [sp, #4]
 8008642:	61b4      	str	r4, [r6, #24]
 8008644:	1e63      	subs	r3, r4, #1
 8008646:	419c      	sbcs	r4, r3
 8008648:	3401      	adds	r4, #1
 800864a:	6134      	str	r4, [r6, #16]
 800864c:	2d00      	cmp	r5, #0
 800864e:	d018      	beq.n	8008682 <__d2b+0x82>
 8008650:	4b12      	ldr	r3, [pc, #72]	; (800869c <__d2b+0x9c>)
 8008652:	18ed      	adds	r5, r5, r3
 8008654:	2335      	movs	r3, #53	; 0x35
 8008656:	182d      	adds	r5, r5, r0
 8008658:	603d      	str	r5, [r7, #0]
 800865a:	1a18      	subs	r0, r3, r0
 800865c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865e:	6018      	str	r0, [r3, #0]
 8008660:	0030      	movs	r0, r6
 8008662:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008664:	2280      	movs	r2, #128	; 0x80
 8008666:	0352      	lsls	r2, r2, #13
 8008668:	4313      	orrs	r3, r2
 800866a:	e7d6      	b.n	800861a <__d2b+0x1a>
 800866c:	6174      	str	r4, [r6, #20]
 800866e:	e7e7      	b.n	8008640 <__d2b+0x40>
 8008670:	a801      	add	r0, sp, #4
 8008672:	f7ff fddb 	bl	800822c <__lo0bits>
 8008676:	2401      	movs	r4, #1
 8008678:	9b01      	ldr	r3, [sp, #4]
 800867a:	6134      	str	r4, [r6, #16]
 800867c:	6173      	str	r3, [r6, #20]
 800867e:	3020      	adds	r0, #32
 8008680:	e7e4      	b.n	800864c <__d2b+0x4c>
 8008682:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <__d2b+0xa0>)
 8008684:	18c0      	adds	r0, r0, r3
 8008686:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <__d2b+0xa4>)
 8008688:	6038      	str	r0, [r7, #0]
 800868a:	18e3      	adds	r3, r4, r3
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	18f3      	adds	r3, r6, r3
 8008690:	6958      	ldr	r0, [r3, #20]
 8008692:	f7ff fdb1 	bl	80081f8 <__hi0bits>
 8008696:	0164      	lsls	r4, r4, #5
 8008698:	1a20      	subs	r0, r4, r0
 800869a:	e7df      	b.n	800865c <__d2b+0x5c>
 800869c:	fffffbcd 	.word	0xfffffbcd
 80086a0:	fffffbce 	.word	0xfffffbce
 80086a4:	3fffffff 	.word	0x3fffffff

080086a8 <_calloc_r>:
 80086a8:	434a      	muls	r2, r1
 80086aa:	b570      	push	{r4, r5, r6, lr}
 80086ac:	0011      	movs	r1, r2
 80086ae:	0014      	movs	r4, r2
 80086b0:	f000 f808 	bl	80086c4 <_malloc_r>
 80086b4:	1e05      	subs	r5, r0, #0
 80086b6:	d003      	beq.n	80086c0 <_calloc_r+0x18>
 80086b8:	0022      	movs	r2, r4
 80086ba:	2100      	movs	r1, #0
 80086bc:	f7fe fb2a 	bl	8006d14 <memset>
 80086c0:	0028      	movs	r0, r5
 80086c2:	bd70      	pop	{r4, r5, r6, pc}

080086c4 <_malloc_r>:
 80086c4:	2303      	movs	r3, #3
 80086c6:	b570      	push	{r4, r5, r6, lr}
 80086c8:	1ccd      	adds	r5, r1, #3
 80086ca:	439d      	bics	r5, r3
 80086cc:	3508      	adds	r5, #8
 80086ce:	0006      	movs	r6, r0
 80086d0:	2d0c      	cmp	r5, #12
 80086d2:	d21e      	bcs.n	8008712 <_malloc_r+0x4e>
 80086d4:	250c      	movs	r5, #12
 80086d6:	42a9      	cmp	r1, r5
 80086d8:	d81d      	bhi.n	8008716 <_malloc_r+0x52>
 80086da:	0030      	movs	r0, r6
 80086dc:	f000 f874 	bl	80087c8 <__malloc_lock>
 80086e0:	4a25      	ldr	r2, [pc, #148]	; (8008778 <_malloc_r+0xb4>)
 80086e2:	6814      	ldr	r4, [r2, #0]
 80086e4:	0021      	movs	r1, r4
 80086e6:	2900      	cmp	r1, #0
 80086e8:	d119      	bne.n	800871e <_malloc_r+0x5a>
 80086ea:	4c24      	ldr	r4, [pc, #144]	; (800877c <_malloc_r+0xb8>)
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d103      	bne.n	80086fa <_malloc_r+0x36>
 80086f2:	0030      	movs	r0, r6
 80086f4:	f000 f844 	bl	8008780 <_sbrk_r>
 80086f8:	6020      	str	r0, [r4, #0]
 80086fa:	0029      	movs	r1, r5
 80086fc:	0030      	movs	r0, r6
 80086fe:	f000 f83f 	bl	8008780 <_sbrk_r>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	d12b      	bne.n	800875e <_malloc_r+0x9a>
 8008706:	230c      	movs	r3, #12
 8008708:	0030      	movs	r0, r6
 800870a:	6033      	str	r3, [r6, #0]
 800870c:	f000 f85d 	bl	80087ca <__malloc_unlock>
 8008710:	e003      	b.n	800871a <_malloc_r+0x56>
 8008712:	2d00      	cmp	r5, #0
 8008714:	dadf      	bge.n	80086d6 <_malloc_r+0x12>
 8008716:	230c      	movs	r3, #12
 8008718:	6033      	str	r3, [r6, #0]
 800871a:	2000      	movs	r0, #0
 800871c:	bd70      	pop	{r4, r5, r6, pc}
 800871e:	680b      	ldr	r3, [r1, #0]
 8008720:	1b5b      	subs	r3, r3, r5
 8008722:	d419      	bmi.n	8008758 <_malloc_r+0x94>
 8008724:	2b0b      	cmp	r3, #11
 8008726:	d903      	bls.n	8008730 <_malloc_r+0x6c>
 8008728:	600b      	str	r3, [r1, #0]
 800872a:	18cc      	adds	r4, r1, r3
 800872c:	6025      	str	r5, [r4, #0]
 800872e:	e003      	b.n	8008738 <_malloc_r+0x74>
 8008730:	684b      	ldr	r3, [r1, #4]
 8008732:	428c      	cmp	r4, r1
 8008734:	d10d      	bne.n	8008752 <_malloc_r+0x8e>
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	0030      	movs	r0, r6
 800873a:	f000 f846 	bl	80087ca <__malloc_unlock>
 800873e:	0020      	movs	r0, r4
 8008740:	2207      	movs	r2, #7
 8008742:	300b      	adds	r0, #11
 8008744:	1d23      	adds	r3, r4, #4
 8008746:	4390      	bics	r0, r2
 8008748:	1ac3      	subs	r3, r0, r3
 800874a:	d0e7      	beq.n	800871c <_malloc_r+0x58>
 800874c:	425a      	negs	r2, r3
 800874e:	50e2      	str	r2, [r4, r3]
 8008750:	e7e4      	b.n	800871c <_malloc_r+0x58>
 8008752:	6063      	str	r3, [r4, #4]
 8008754:	000c      	movs	r4, r1
 8008756:	e7ef      	b.n	8008738 <_malloc_r+0x74>
 8008758:	000c      	movs	r4, r1
 800875a:	6849      	ldr	r1, [r1, #4]
 800875c:	e7c3      	b.n	80086e6 <_malloc_r+0x22>
 800875e:	2303      	movs	r3, #3
 8008760:	1cc4      	adds	r4, r0, #3
 8008762:	439c      	bics	r4, r3
 8008764:	42a0      	cmp	r0, r4
 8008766:	d0e1      	beq.n	800872c <_malloc_r+0x68>
 8008768:	1a21      	subs	r1, r4, r0
 800876a:	0030      	movs	r0, r6
 800876c:	f000 f808 	bl	8008780 <_sbrk_r>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d1db      	bne.n	800872c <_malloc_r+0x68>
 8008774:	e7c7      	b.n	8008706 <_malloc_r+0x42>
 8008776:	46c0      	nop			; (mov r8, r8)
 8008778:	20000414 	.word	0x20000414
 800877c:	20000418 	.word	0x20000418

08008780 <_sbrk_r>:
 8008780:	2300      	movs	r3, #0
 8008782:	b570      	push	{r4, r5, r6, lr}
 8008784:	4c06      	ldr	r4, [pc, #24]	; (80087a0 <_sbrk_r+0x20>)
 8008786:	0005      	movs	r5, r0
 8008788:	0008      	movs	r0, r1
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	f7fa fd60 	bl	8003250 <_sbrk>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d103      	bne.n	800879c <_sbrk_r+0x1c>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d000      	beq.n	800879c <_sbrk_r+0x1c>
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	bd70      	pop	{r4, r5, r6, pc}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	20000648 	.word	0x20000648

080087a4 <__ascii_mbtowc>:
 80087a4:	b082      	sub	sp, #8
 80087a6:	2900      	cmp	r1, #0
 80087a8:	d100      	bne.n	80087ac <__ascii_mbtowc+0x8>
 80087aa:	a901      	add	r1, sp, #4
 80087ac:	1e10      	subs	r0, r2, #0
 80087ae:	d006      	beq.n	80087be <__ascii_mbtowc+0x1a>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d006      	beq.n	80087c2 <__ascii_mbtowc+0x1e>
 80087b4:	7813      	ldrb	r3, [r2, #0]
 80087b6:	600b      	str	r3, [r1, #0]
 80087b8:	7810      	ldrb	r0, [r2, #0]
 80087ba:	1e43      	subs	r3, r0, #1
 80087bc:	4198      	sbcs	r0, r3
 80087be:	b002      	add	sp, #8
 80087c0:	4770      	bx	lr
 80087c2:	2002      	movs	r0, #2
 80087c4:	4240      	negs	r0, r0
 80087c6:	e7fa      	b.n	80087be <__ascii_mbtowc+0x1a>

080087c8 <__malloc_lock>:
 80087c8:	4770      	bx	lr

080087ca <__malloc_unlock>:
 80087ca:	4770      	bx	lr

080087cc <__ascii_wctomb>:
 80087cc:	1e0b      	subs	r3, r1, #0
 80087ce:	d004      	beq.n	80087da <__ascii_wctomb+0xe>
 80087d0:	2aff      	cmp	r2, #255	; 0xff
 80087d2:	d904      	bls.n	80087de <__ascii_wctomb+0x12>
 80087d4:	238a      	movs	r3, #138	; 0x8a
 80087d6:	6003      	str	r3, [r0, #0]
 80087d8:	3b8b      	subs	r3, #139	; 0x8b
 80087da:	0018      	movs	r0, r3
 80087dc:	4770      	bx	lr
 80087de:	700a      	strb	r2, [r1, #0]
 80087e0:	2301      	movs	r3, #1
 80087e2:	e7fa      	b.n	80087da <__ascii_wctomb+0xe>

080087e4 <_init>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	46c0      	nop			; (mov r8, r8)
 80087e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ea:	bc08      	pop	{r3}
 80087ec:	469e      	mov	lr, r3
 80087ee:	4770      	bx	lr

080087f0 <_fini>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	46c0      	nop			; (mov r8, r8)
 80087f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f6:	bc08      	pop	{r3}
 80087f8:	469e      	mov	lr, r3
 80087fa:	4770      	bx	lr
